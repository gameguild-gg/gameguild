// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using cms.Data;

#nullable disable

namespace cms.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250610171114_RemoveAssignedByAndStatus")]
    partial class RemoveAssignedByAndStatus
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("ContentContentLicense", b =>
                {
                    b.Property<Guid>("ContentsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LicensesId")
                        .HasColumnType("TEXT");

                    b.HasKey("ContentsId", "LicensesId");

                    b.HasIndex("LicensesId");

                    b.ToTable("ContentContentLicense");
                });

            modelBuilder.Entity("cms.Common.Entities.ContentTypePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("PermissionFlags1")
                        .HasColumnType("bigint");

                    b.Property<ulong>("PermissionFlags2")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantPermissionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("TenantPermissionId");

                    b.HasIndex("UserId1");

                    b.HasIndex(new[] { "ContentType", "TenantId" }, "IX_ContentTypePermissions_ContentType_Tenant");

                    b.HasIndex(new[] { "ContentType", "UserId", "TenantId" }, "IX_ContentTypePermissions_ContentType_User_Tenant")
                        .IsUnique();

                    b.HasIndex(new[] { "ExpiresAt" }, "IX_ContentTypePermissions_ExpiresAt");

                    b.HasIndex(new[] { "TenantId" }, "IX_ContentTypePermissions_TenantId");

                    b.HasIndex(new[] { "UserId" }, "IX_ContentTypePermissions_UserId");

                    b.ToTable("ContentTypePermissions");
                });

            modelBuilder.Entity("cms.Common.Entities.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("Name");

                    b.HasIndex("TenantId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("cms.Common.Entities.ResourceBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MetadataId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Visibility")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TenantId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("cms.Common.Entities.ResourceLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ResourceBaseId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ResourceBaseId");

                    b.HasIndex("TenantId");

                    b.ToTable("ResourceLocalizations");
                });

            modelBuilder.Entity("cms.Common.Entities.ResourceMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SeoMetadata")
                        .HasColumnType("jsonb");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("ResourceType");

                    b.HasIndex("TenantId");

                    b.ToTable("ResourceMetadata");
                });

            modelBuilder.Entity("cms.Modules.Auth.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("TenantId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("cms.Modules.Certificate.Models.Certificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CertificateTemplate")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CompletionPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("MinimumGrade")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("MinimumRating")
                        .HasColumnType("decimal(2,1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProgramId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProgramId1")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequiresFeedback")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresRating")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ValidityDays")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VerificationMethod")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CompletionPercentage");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("ProgramId1");

                    b.HasIndex("TenantId");

                    b.HasIndex("Type");

                    b.ToTable("certificates");
                });

            modelBuilder.Entity("cms.Modules.Certificate.Models.CertificateBlockchainAnchor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("AnchoredAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("BlockHash")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<long?>("BlockNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BlockchainNetwork")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CertificateId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContractAddress")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TokenId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AnchoredAt");

                    b.HasIndex("BlockchainNetwork");

                    b.HasIndex("CertificateId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("Status");

                    b.HasIndex("TenantId");

                    b.HasIndex("TransactionHash")
                        .IsUnique();

                    b.ToTable("certificate_blockchain_anchors");
                });

            modelBuilder.Entity("cms.Modules.Certificate.Models.CertificateTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CertificateId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CertificateId1")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("RelationshipType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TagId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TagProficiencyId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.HasIndex("CertificateId1");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("RelationshipType");

                    b.HasIndex("TagId");

                    b.HasIndex("TagProficiencyId");

                    b.HasIndex("TenantId");

                    b.HasIndex("CertificateId", "TagId")
                        .IsUnique();

                    b.ToTable("certificate_tags");
                });

            modelBuilder.Entity("cms.Modules.Certificate.Models.UserCertificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CertificateId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CertificateId1")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("FinalGrade")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Metadata")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProgramId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProgramUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RevocationReason")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.HasIndex("CertificateId1");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("IssuedAt");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("ProgramUserId");

                    b.HasIndex("Status");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.HasIndex("VerificationCode")
                        .IsUnique();

                    b.ToTable("user_certificates");
                });

            modelBuilder.Entity("cms.Modules.Feedback.Models.ProgramFeedbackSubmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FeedbackData")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<decimal?>("OverallRating")
                        .HasColumnType("decimal(2,1)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProgramId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProgramId1")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProgramUserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProgramUserId1")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("WouldRecommend")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("OverallRating");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("ProgramId1");

                    b.HasIndex("ProgramUserId");

                    b.HasIndex("ProgramUserId1");

                    b.HasIndex("SubmittedAt");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "ProgramId")
                        .IsUnique();

                    b.ToTable("program_feedback_submissions");
                });

            modelBuilder.Entity("cms.Modules.Feedback.Models.ProgramRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal?>("ContentQualityRating")
                        .HasColumnType("decimal(2,1)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DifficultyRating")
                        .HasColumnType("decimal(2,1)");

                    b.Property<decimal?>("InstructorRating")
                        .HasColumnType("decimal(2,1)");

                    b.Property<DateTime?>("ModeratedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ModeratedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("ModerationStatus")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProgramId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProgramId1")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProgramUserId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(2,1)");

                    b.Property<string>("Review")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ValueRating")
                        .HasColumnType("decimal(2,1)");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("WouldRecommend")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("ModeratedBy");

                    b.HasIndex("ModerationStatus");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("ProgramId1");

                    b.HasIndex("ProgramUserId");

                    b.HasIndex("Rating");

                    b.HasIndex("SubmittedAt");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "ProgramId")
                        .IsUnique();

                    b.ToTable("program_ratings");
                });

            modelBuilder.Entity("cms.Modules.Kyc.Models.UserKycVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentCountry")
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentTypes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalVerificationId")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Provider")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProviderData")
                        .HasColumnType("jsonb");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("VerificationLevel")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("ExternalVerificationId");

                    b.HasIndex("Provider");

                    b.HasIndex("Status");

                    b.HasIndex("SubmittedAt");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("user_kyc_verifications");
                });

            modelBuilder.Entity("cms.Modules.Payment.Models.FinancialTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalTransactionId")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FailedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FromUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Metadata")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("NetAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid?>("PaymentMethodId")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("PlatformFee")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ProcessorFee")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid?>("PromoCodeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PromoCodeId1")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ToUserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Amount");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("ExternalTransactionId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ProcessedAt");

                    b.HasIndex("PromoCodeId");

                    b.HasIndex("PromoCodeId1");

                    b.HasIndex("Status");

                    b.HasIndex("TenantId");

                    b.HasIndex("ToUserId");

                    b.HasIndex("Type");

                    b.ToTable("financial_transactions");
                });

            modelBuilder.Entity("cms.Modules.Payment.Models.UserFinancialMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Brand")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExpiryMonth")
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExpiryYear")
                        .HasMaxLength(4)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastFour")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("ExternalId");

                    b.HasIndex("IsDefault");

                    b.HasIndex("Status");

                    b.HasIndex("TenantId");

                    b.HasIndex("Type");

                    b.HasIndex("UserId");

                    b.ToTable("user_financial_methods");
                });

            modelBuilder.Entity("cms.Modules.Product.Models.ProductPricing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SaleEndDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("SaleStartDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Currency");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("IsDefault");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleEndDate");

                    b.HasIndex("SaleStartDate");

                    b.HasIndex("TenantId");

                    b.ToTable("product_pricing");
                });

            modelBuilder.Entity("cms.Modules.Product.Models.ProductProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProgramId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProgramId1")
                        .HasColumnType("TEXT");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("ProgramId");

                    b.HasIndex("ProgramId1");

                    b.HasIndex("TenantId");

                    b.HasIndex("ProductId", "ProgramId")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" IS NULL");

                    b.HasIndex("ProductId", "SortOrder");

                    b.ToTable("product_programs");
                });

            modelBuilder.Entity("cms.Modules.Product.Models.ProductSubscriptionPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("BillingInterval")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("IntervalCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TrialPeriodDays")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BillingInterval")
                        .HasDatabaseName("IX_ProductSubscriptionPlans_BillingInterval");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_ProductSubscriptionPlans_IsActive");

                    b.HasIndex("IsDefault")
                        .HasDatabaseName("IX_ProductSubscriptionPlans_IsDefault");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_ProductSubscriptionPlans_Name");

                    b.HasIndex("Price")
                        .HasDatabaseName("IX_ProductSubscriptionPlans_Price");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("IX_ProductSubscriptionPlans_ProductId");

                    b.HasIndex("TenantId");

                    b.ToTable("product_subscription_plans");
                });

            modelBuilder.Entity("cms.Modules.Product.Models.PromoCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaxUses")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaxUsesPerUser")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("MinimumOrderAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("IsActive");

                    b.HasIndex("ProductId");

                    b.HasIndex("TenantId");

                    b.HasIndex("Type");

                    b.HasIndex("ValidFrom");

                    b.HasIndex("ValidUntil");

                    b.ToTable("promo_codes");
                });

            modelBuilder.Entity("cms.Modules.Product.Models.PromoCodeUse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DiscountApplied")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("FinancialTransactionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PromoCodeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("FinancialTransactionId");

                    b.HasIndex("PromoCodeId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("promo_code_uses");
                });

            modelBuilder.Entity("cms.Modules.Product.Models.UserProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("AccessEndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AccessStartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AcquisitionType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("GiftedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PricePaid")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProductId1")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserSubscriptionId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccessEndDate");

                    b.HasIndex("AccessStatus");

                    b.HasIndex("AcquisitionType");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("GiftedByUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductId1");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserSubscriptionId");

                    b.HasIndex("UserId", "ProductId")
                        .IsUnique();

                    b.ToTable("user_products");
                });

            modelBuilder.Entity("cms.Modules.Program.Models.ActivityGrade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ContentInteractionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Feedback")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Grade")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("GradedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GraderProgramUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("GradingDetails")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("ProgramUserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProgramUserId1")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ContentInteractionId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("GraderProgramUserId");

                    b.HasIndex("ProgramUserId");

                    b.HasIndex("ProgramUserId1");

                    b.HasIndex("TenantId");

                    b.ToTable("activity_grades");
                });

            modelBuilder.Entity("cms.Modules.Program.Models.ContentInteraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CompletionPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FirstAccessedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProgramContentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProgramUserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubmissionData")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TimeSpentMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("ProgramContentId");

                    b.HasIndex("ProgramUserId");

                    b.HasIndex("TenantId");

                    b.ToTable("content_interactions");
                });

            modelBuilder.Entity("cms.Modules.Program.Models.ProgramContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("EstimatedMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GradingMethod")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("MaxPoints")
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProgramId")
                        .HasColumnType("TEXT");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Visibility")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("IsRequired");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("SortOrder");

                    b.HasIndex("TenantId");

                    b.HasIndex("Type");

                    b.HasIndex("Visibility");

                    b.HasIndex("ParentId", "SortOrder");

                    b.HasIndex("ProgramId", "SortOrder");

                    b.ToTable("program_contents");
                });

            modelBuilder.Entity("cms.Modules.Program.Models.ProgramUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CompletionPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("FinalGrade")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProgramId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CompletionPercentage");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("IsActive");

                    b.HasIndex("JoinedAt");

                    b.HasIndex("ProgramId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "ProgramId")
                        .IsUnique();

                    b.ToTable("program_users");
                });

            modelBuilder.Entity("cms.Modules.Subscription.Models.UserSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CanceledAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("CurrentPeriodEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CurrentPeriodStart")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndsAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalSubscriptionId")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastPaymentAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextBillingAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProductSubscriptionPlanId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SubscriptionPlanId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TrialEndsAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CurrentPeriodEnd");

                    b.HasIndex("CurrentPeriodStart");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("ExternalSubscriptionId");

                    b.HasIndex("NextBillingAt");

                    b.HasIndex("ProductSubscriptionPlanId");

                    b.HasIndex("Status");

                    b.HasIndex("SubscriptionPlanId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("user_subscriptions");
                });

            modelBuilder.Entity("cms.Modules.Tag.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("TenantId");

                    b.HasIndex("Type");

                    b.HasIndex("Name", "TenantId")
                        .IsUnique();

                    b.ToTable("tags");
                });

            modelBuilder.Entity("cms.Modules.Tag.Models.TagProficiency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProficiencyLevel")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("ProficiencyLevel");

                    b.HasIndex("TenantId");

                    b.HasIndex("Type");

                    b.ToTable("tag_proficiencies");
                });

            modelBuilder.Entity("cms.Modules.Tag.Models.TagRelationship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Metadata")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(3,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.HasIndex("TenantId");

                    b.HasIndex("Type");

                    b.HasIndex("SourceId", "TargetId")
                        .IsUnique();

                    b.ToTable("tag_relationships", t =>
                        {
                            t.HasCheckConstraint("CK_TagRelationships_NoSelfReference", "\"SourceId\" != \"TargetId\"");
                        });
                });

            modelBuilder.Entity("cms.Modules.Tenant.Models.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("cms.Modules.Tenant.Models.TenantPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("PermissionFlags1")
                        .HasColumnType("bigint");

                    b.Property<ulong>("PermissionFlags2")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("UserId1");

                    b.HasIndex(new[] { "ExpiresAt" }, "IX_TenantPermissions_ExpiresAt");

                    b.HasIndex(new[] { "TenantId" }, "IX_TenantPermissions_TenantId");

                    b.HasIndex(new[] { "UserId" }, "IX_TenantPermissions_UserId");

                    b.HasIndex(new[] { "UserId", "TenantId" }, "IX_TenantPermissions_User_Tenant")
                        .IsUnique();

                    b.ToTable("TenantPermissions");
                });

            modelBuilder.Entity("cms.Modules.User.Models.Credential", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Metadata")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId", "Type");

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("cms.Modules.User.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal>("AvailableBalance")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("cms.Common.Entities.Content", b =>
                {
                    b.HasBaseType("cms.Common.Entities.ResourceBase");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.ToTable((string)null);
                });

            modelBuilder.Entity("cms.Common.Entities.ContentLicense", b =>
                {
                    b.HasBaseType("cms.Common.Entities.ResourceBase");

                    b.Property<string>("Url")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.ToTable("ContentLicenses");
                });

            modelBuilder.Entity("cms.Modules.Reputation.Models.ReputationAction", b =>
                {
                    b.HasBaseType("cms.Common.Entities.ResourceBase");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("DailyLimit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("RequiredLevelId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TotalLimit")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ActionType")
                        .IsUnique();

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("IsActive");

                    b.HasIndex("Points");

                    b.HasIndex("RequiredLevelId");

                    b.HasIndex("ActionType", "TenantId")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" IS NULL");

                    b.ToTable("ReputationActions");
                });

            modelBuilder.Entity("cms.Modules.Reputation.Models.ReputationTier", b =>
                {
                    b.HasBaseType("cms.Common.Entities.ResourceBase");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaximumScore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinimumScore")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("MinimumScore");

                    b.HasIndex("SortOrder");

                    b.ToTable("ReputationLevels");
                });

            modelBuilder.Entity("cms.Modules.Reputation.Models.UserReputation", b =>
                {
                    b.HasBaseType("cms.Common.Entities.ResourceBase");

                    b.Property<Guid?>("CurrentLevelId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastLevelCalculation")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("NegativeChanges")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PositiveChanges")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ReputationTierId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CurrentLevelId");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("ReputationTierId");

                    b.HasIndex("Score");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" IS NULL");

                    b.ToTable("UserReputations");
                });

            modelBuilder.Entity("cms.Modules.Reputation.Models.UserReputationHistory", b =>
                {
                    b.HasBaseType("cms.Common.Entities.ResourceBase");

                    b.Property<Guid?>("NewLevelId")
                        .HasColumnType("TEXT");

                    b.Property<int>("NewScore")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("PointsChange")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("PreviousLevelId")
                        .HasColumnType("TEXT");

                    b.Property<int>("PreviousScore")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RelatedResourceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReputationActionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantPermissionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TriggeredByUserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserReputationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserTenantReputationId")
                        .HasColumnType("TEXT");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("NewLevelId");

                    b.HasIndex("OccurredAt");

                    b.HasIndex("PointsChange");

                    b.HasIndex("PreviousLevelId");

                    b.HasIndex("RelatedResourceId");

                    b.HasIndex("ReputationActionId");

                    b.HasIndex("TriggeredByUserId");

                    b.HasIndex("UserReputationId");

                    b.HasIndex("UserTenantReputationId");

                    b.HasIndex("TenantPermissionId", "OccurredAt");

                    b.HasIndex("UserId", "OccurredAt");

                    b.ToTable("UserReputationHistory", null, t =>
                        {
                            t.HasCheckConstraint("CK_UserReputationHistory_UserOrUserTenant", "(\"UserId\" IS NOT NULL AND \"UserTenantId\" IS NULL) OR (\"UserId\" IS NULL AND \"UserTenantId\" IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("cms.Modules.Reputation.Models.UserTenantReputation", b =>
                {
                    b.HasBaseType("cms.Common.Entities.ResourceBase");

                    b.Property<Guid?>("CurrentLevelId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastLevelCalculation")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("NegativeChanges")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PositiveChanges")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TenantPermissionId")
                        .HasColumnType("TEXT");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CurrentLevelId");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("Score");

                    b.HasIndex("TenantPermissionId")
                        .IsUnique();

                    b.ToTable("UserTenantReputations");
                });

            modelBuilder.Entity("cms.Modules.Product.Models.Product", b =>
                {
                    b.HasBaseType("cms.Common.Entities.Content");

                    b.Property<decimal>("AffiliateCommissionPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("BundleItems")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBundle")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MaxAffiliateDiscount")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ReferralCommissionPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("Name");

                    b.HasIndex("Status");

                    b.HasIndex("Visibility");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("cms.Modules.Program.Models.Program", b =>
                {
                    b.HasBaseType("cms.Common.Entities.Content");

                    b.Property<string>("Thumbnail")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("Slug");

                    b.HasIndex("Status");

                    b.HasIndex("Visibility");

                    b.ToTable("programs");
                });

            modelBuilder.Entity("ContentContentLicense", b =>
                {
                    b.HasOne("cms.Common.Entities.Content", null)
                        .WithMany()
                        .HasForeignKey("ContentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Common.Entities.ContentLicense", null)
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cms.Common.Entities.ContentTypePermission", b =>
                {
                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("cms.Modules.Tenant.Models.TenantPermission", null)
                        .WithMany("ContentTypePermissions")
                        .HasForeignKey("TenantPermissionId");

                    b.HasOne("cms.Modules.User.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("cms.Modules.User.Models.User", null)
                        .WithMany("ContentTypePermissions")
                        .HasForeignKey("UserId1");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("cms.Common.Entities.Language", b =>
                {
                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("cms.Common.Entities.ResourceBase", b =>
                {
                    b.HasOne("cms.Common.Entities.ResourceMetadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.HasOne("cms.Modules.User.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Metadata");

                    b.Navigation("Owner");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("cms.Common.Entities.ResourceLocalization", b =>
                {
                    b.HasOne("cms.Common.Entities.Language", "Language")
                        .WithMany("ResourceLocalizations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Common.Entities.ResourceBase", null)
                        .WithMany("Localizations")
                        .HasForeignKey("ResourceBaseId");

                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Language");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("cms.Common.Entities.ResourceMetadata", b =>
                {
                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("cms.Modules.Auth.Models.RefreshToken", b =>
                {
                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("cms.Modules.Certificate.Models.Certificate", b =>
                {
                    b.HasOne("cms.Modules.Product.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Modules.Program.Models.Program", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Modules.Program.Models.Program", null)
                        .WithMany("Certificates")
                        .HasForeignKey("ProgramId1");

                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Product");

                    b.Navigation("Program");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("cms.Modules.Certificate.Models.CertificateBlockchainAnchor", b =>
                {
                    b.HasOne("cms.Modules.Certificate.Models.UserCertificate", "Certificate")
                        .WithMany("BlockchainAnchors")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Certificate");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("cms.Modules.Certificate.Models.CertificateTag", b =>
                {
                    b.HasOne("cms.Modules.Certificate.Models.Certificate", "Certificate")
                        .WithMany()
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Modules.Certificate.Models.Certificate", null)
                        .WithMany("CertificateTags")
                        .HasForeignKey("CertificateId1");

                    b.HasOne("cms.Modules.Tag.Models.TagProficiency", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Modules.Tag.Models.TagProficiency", null)
                        .WithMany("CertificateTags")
                        .HasForeignKey("TagProficiencyId");

                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Certificate");

                    b.Navigation("Tag");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("cms.Modules.Certificate.Models.UserCertificate", b =>
                {
                    b.HasOne("cms.Modules.Certificate.Models.Certificate", "Certificate")
                        .WithMany()
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Modules.Certificate.Models.Certificate", null)
                        .WithMany("UserCertificates")
                        .HasForeignKey("CertificateId1");

                    b.HasOne("cms.Modules.Product.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Modules.Program.Models.Program", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Modules.Program.Models.ProgramUser", "ProgramUser")
                        .WithMany("UserCertificates")
                        .HasForeignKey("ProgramUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("cms.Modules.User.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certificate");

                    b.Navigation("Product");

                    b.Navigation("Program");

                    b.Navigation("ProgramUser");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("cms.Modules.Feedback.Models.ProgramFeedbackSubmission", b =>
                {
                    b.HasOne("cms.Modules.Product.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Modules.Program.Models.Program", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Modules.Program.Models.Program", null)
                        .WithMany("FeedbackSubmissions")
                        .HasForeignKey("ProgramId1");

                    b.HasOne("cms.Modules.Program.Models.ProgramUser", "ProgramUser")
                        .WithMany()
                        .HasForeignKey("ProgramUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Modules.Program.Models.ProgramUser", null)
                        .WithMany("FeedbackSubmissions")
                        .HasForeignKey("ProgramUserId1");

                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("cms.Modules.User.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Program");

                    b.Navigation("ProgramUser");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("cms.Modules.Feedback.Models.ProgramRating", b =>
                {
                    b.HasOne("cms.Modules.User.Models.User", "Moderator")
                        .WithMany()
                        .HasForeignKey("ModeratedBy");

                    b.HasOne("cms.Modules.Product.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("cms.Modules.Program.Models.Program", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Modules.Program.Models.Program", null)
                        .WithMany("ProgramRatings")
                        .HasForeignKey("ProgramId1");

                    b.HasOne("cms.Modules.Program.Models.ProgramUser", "ProgramUser")
                        .WithMany("ProgramRatings")
                        .HasForeignKey("ProgramUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("cms.Modules.User.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moderator");

                    b.Navigation("Product");

                    b.Navigation("Program");

                    b.Navigation("ProgramUser");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("cms.Modules.Kyc.Models.UserKycVerification", b =>
                {
                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("cms.Modules.User.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("cms.Modules.Payment.Models.FinancialTransaction", b =>
                {
                    b.HasOne("cms.Modules.User.Models.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Modules.Payment.Models.UserFinancialMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Modules.Product.Models.PromoCode", "PromoCode")
                        .WithMany()
                        .HasForeignKey("PromoCodeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Modules.Product.Models.PromoCode", null)
                        .WithMany("FinancialTransactions")
                        .HasForeignKey("PromoCodeId1");

                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("cms.Modules.User.Models.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("FromUser");

                    b.Navigation("PaymentMethod");

                    b.Navigation("PromoCode");

                    b.Navigation("Tenant");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("cms.Modules.Payment.Models.UserFinancialMethod", b =>
                {
                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("cms.Modules.User.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("cms.Modules.Product.Models.ProductPricing", b =>
                {
                    b.HasOne("cms.Modules.Product.Models.Product", "Product")
                        .WithMany("ProductPricings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Product");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("cms.Modules.Product.Models.ProductProgram", b =>
                {
                    b.HasOne("cms.Modules.Product.Models.Product", "Product")
                        .WithMany("ProductPrograms")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Modules.Program.Models.Program", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Modules.Program.Models.Program", null)
                        .WithMany("ProductPrograms")
                        .HasForeignKey("ProgramId1");

                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Product");

                    b.Navigation("Program");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("cms.Modules.Product.Models.ProductSubscriptionPlan", b =>
                {
                    b.HasOne("cms.Modules.Product.Models.Product", "Product")
                        .WithMany("SubscriptionPlans")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Product");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("cms.Modules.Product.Models.PromoCode", b =>
                {
                    b.HasOne("cms.Modules.User.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("cms.Modules.Product.Models.Product", "Product")
                        .WithMany("PromoCodes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Product");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("cms.Modules.Product.Models.PromoCodeUse", b =>
                {
                    b.HasOne("cms.Modules.Payment.Models.FinancialTransaction", "FinancialTransaction")
                        .WithMany("PromoCodeUses")
                        .HasForeignKey("FinancialTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Modules.Product.Models.PromoCode", "PromoCode")
                        .WithMany("PromoCodeUses")
                        .HasForeignKey("PromoCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("cms.Modules.User.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinancialTransaction");

                    b.Navigation("PromoCode");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("cms.Modules.Product.Models.UserProduct", b =>
                {
                    b.HasOne("cms.Modules.User.Models.User", "GiftedByUser")
                        .WithMany()
                        .HasForeignKey("GiftedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Modules.Product.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("cms.Modules.Product.Models.Product", null)
                        .WithMany("UserProducts")
                        .HasForeignKey("ProductId1");

                    b.HasOne("cms.Modules.Subscription.Models.UserSubscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("cms.Modules.User.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("cms.Modules.Subscription.Models.UserSubscription", null)
                        .WithMany("UserProducts")
                        .HasForeignKey("UserSubscriptionId");

                    b.Navigation("GiftedByUser");

                    b.Navigation("Product");

                    b.Navigation("Subscription");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("cms.Modules.Program.Models.ActivityGrade", b =>
                {
                    b.HasOne("cms.Modules.Program.Models.ContentInteraction", "ContentInteraction")
                        .WithMany("ActivityGrades")
                        .HasForeignKey("ContentInteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Modules.Program.Models.ProgramUser", "GraderProgramUser")
                        .WithMany()
                        .HasForeignKey("GraderProgramUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("cms.Modules.Program.Models.ProgramUser", null)
                        .WithMany("GivenGrades")
                        .HasForeignKey("ProgramUserId");

                    b.HasOne("cms.Modules.Program.Models.ProgramUser", null)
                        .WithMany("ReceivedGrades")
                        .HasForeignKey("ProgramUserId1");

                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("ContentInteraction");

                    b.Navigation("GraderProgramUser");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("cms.Modules.Program.Models.ContentInteraction", b =>
                {
                    b.HasOne("cms.Modules.Program.Models.ProgramContent", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Modules.Program.Models.ProgramContent", null)
                        .WithMany("ContentInteractions")
                        .HasForeignKey("ProgramContentId");

                    b.HasOne("cms.Modules.Program.Models.ProgramUser", "ProgramUser")
                        .WithMany("ContentInteractions")
                        .HasForeignKey("ProgramUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Content");

                    b.Navigation("ProgramUser");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("cms.Modules.Program.Models.ProgramContent", b =>
                {
                    b.HasOne("cms.Modules.Program.Models.ProgramContent", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("cms.Modules.Program.Models.Program", "Program")
                        .WithMany("ProgramContents")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Parent");

                    b.Navigation("Program");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("cms.Modules.Program.Models.ProgramUser", b =>
                {
                    b.HasOne("cms.Modules.Program.Models.Program", "Program")
                        .WithMany("ProgramUsers")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("cms.Modules.User.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("cms.Modules.Subscription.Models.UserSubscription", b =>
                {
                    b.HasOne("cms.Modules.Product.Models.ProductSubscriptionPlan", null)
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("ProductSubscriptionPlanId");

                    b.HasOne("cms.Modules.Product.Models.ProductSubscriptionPlan", "SubscriptionPlan")
                        .WithMany()
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("cms.Modules.User.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubscriptionPlan");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("cms.Modules.Tag.Models.Tag", b =>
                {
                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("cms.Modules.Tag.Models.TagProficiency", b =>
                {
                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("cms.Modules.Tag.Models.TagRelationship", b =>
                {
                    b.HasOne("cms.Modules.Tag.Models.Tag", "Source")
                        .WithMany("SourceRelationships")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Modules.Tag.Models.Tag", "Target")
                        .WithMany("TargetRelationships")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Source");

                    b.Navigation("Target");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("cms.Modules.Tenant.Models.Tenant", b =>
                {
                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("cms.Modules.Tenant.Models.TenantPermission", b =>
                {
                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany("TenantPermissions")
                        .HasForeignKey("TenantId");

                    b.HasOne("cms.Modules.User.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("cms.Modules.User.Models.User", null)
                        .WithMany("TenantPermissions")
                        .HasForeignKey("UserId1");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("cms.Modules.User.Models.Credential", b =>
                {
                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Modules.User.Models.User", "User")
                        .WithMany("Credentials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("cms.Modules.User.Models.User", b =>
                {
                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("cms.Modules.Reputation.Models.ReputationAction", b =>
                {
                    b.HasOne("cms.Modules.Reputation.Models.ReputationTier", "RequiredLevel")
                        .WithMany()
                        .HasForeignKey("RequiredLevelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("RequiredLevel");
                });

            modelBuilder.Entity("cms.Modules.Reputation.Models.UserReputation", b =>
                {
                    b.HasOne("cms.Modules.Reputation.Models.ReputationTier", "CurrentLevel")
                        .WithMany()
                        .HasForeignKey("CurrentLevelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Modules.Reputation.Models.ReputationTier", null)
                        .WithMany("UserReputations")
                        .HasForeignKey("ReputationTierId");

                    b.HasOne("cms.Modules.User.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentLevel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("cms.Modules.Reputation.Models.UserReputationHistory", b =>
                {
                    b.HasOne("cms.Modules.Reputation.Models.ReputationTier", "NewLevel")
                        .WithMany()
                        .HasForeignKey("NewLevelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Modules.Reputation.Models.ReputationTier", "PreviousLevel")
                        .WithMany()
                        .HasForeignKey("PreviousLevelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Common.Entities.ResourceBase", "RelatedResource")
                        .WithMany()
                        .HasForeignKey("RelatedResourceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Modules.Reputation.Models.ReputationAction", "ReputationAction")
                        .WithMany("ReputationHistory")
                        .HasForeignKey("ReputationActionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Modules.Tenant.Models.TenantPermission", "TenantPermission")
                        .WithMany()
                        .HasForeignKey("TenantPermissionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Modules.User.Models.User", "TriggeredByUser")
                        .WithMany()
                        .HasForeignKey("TriggeredByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Modules.User.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Modules.Reputation.Models.UserReputation", null)
                        .WithMany("History")
                        .HasForeignKey("UserReputationId");

                    b.HasOne("cms.Modules.Reputation.Models.UserTenantReputation", null)
                        .WithMany("History")
                        .HasForeignKey("UserTenantReputationId");

                    b.Navigation("NewLevel");

                    b.Navigation("PreviousLevel");

                    b.Navigation("RelatedResource");

                    b.Navigation("ReputationAction");

                    b.Navigation("TenantPermission");

                    b.Navigation("TriggeredByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("cms.Modules.Reputation.Models.UserTenantReputation", b =>
                {
                    b.HasOne("cms.Modules.Reputation.Models.ReputationTier", "CurrentLevel")
                        .WithMany()
                        .HasForeignKey("CurrentLevelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Modules.Tenant.Models.TenantPermission", "TenantPermission")
                        .WithMany()
                        .HasForeignKey("TenantPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentLevel");

                    b.Navigation("TenantPermission");
                });

            modelBuilder.Entity("cms.Modules.Product.Models.Product", b =>
                {
                    b.HasOne("cms.Modules.User.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("cms.Common.Entities.Language", b =>
                {
                    b.Navigation("ResourceLocalizations");
                });

            modelBuilder.Entity("cms.Common.Entities.ResourceBase", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("cms.Modules.Certificate.Models.Certificate", b =>
                {
                    b.Navigation("CertificateTags");

                    b.Navigation("UserCertificates");
                });

            modelBuilder.Entity("cms.Modules.Certificate.Models.UserCertificate", b =>
                {
                    b.Navigation("BlockchainAnchors");
                });

            modelBuilder.Entity("cms.Modules.Payment.Models.FinancialTransaction", b =>
                {
                    b.Navigation("PromoCodeUses");
                });

            modelBuilder.Entity("cms.Modules.Product.Models.ProductSubscriptionPlan", b =>
                {
                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("cms.Modules.Product.Models.PromoCode", b =>
                {
                    b.Navigation("FinancialTransactions");

                    b.Navigation("PromoCodeUses");
                });

            modelBuilder.Entity("cms.Modules.Program.Models.ContentInteraction", b =>
                {
                    b.Navigation("ActivityGrades");
                });

            modelBuilder.Entity("cms.Modules.Program.Models.ProgramContent", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("ContentInteractions");
                });

            modelBuilder.Entity("cms.Modules.Program.Models.ProgramUser", b =>
                {
                    b.Navigation("ContentInteractions");

                    b.Navigation("FeedbackSubmissions");

                    b.Navigation("GivenGrades");

                    b.Navigation("ProgramRatings");

                    b.Navigation("ReceivedGrades");

                    b.Navigation("UserCertificates");
                });

            modelBuilder.Entity("cms.Modules.Subscription.Models.UserSubscription", b =>
                {
                    b.Navigation("UserProducts");
                });

            modelBuilder.Entity("cms.Modules.Tag.Models.Tag", b =>
                {
                    b.Navigation("SourceRelationships");

                    b.Navigation("TargetRelationships");
                });

            modelBuilder.Entity("cms.Modules.Tag.Models.TagProficiency", b =>
                {
                    b.Navigation("CertificateTags");
                });

            modelBuilder.Entity("cms.Modules.Tenant.Models.Tenant", b =>
                {
                    b.Navigation("TenantPermissions");
                });

            modelBuilder.Entity("cms.Modules.Tenant.Models.TenantPermission", b =>
                {
                    b.Navigation("ContentTypePermissions");
                });

            modelBuilder.Entity("cms.Modules.User.Models.User", b =>
                {
                    b.Navigation("ContentTypePermissions");

                    b.Navigation("Credentials");

                    b.Navigation("TenantPermissions");
                });

            modelBuilder.Entity("cms.Modules.Reputation.Models.ReputationAction", b =>
                {
                    b.Navigation("ReputationHistory");
                });

            modelBuilder.Entity("cms.Modules.Reputation.Models.ReputationTier", b =>
                {
                    b.Navigation("UserReputations");
                });

            modelBuilder.Entity("cms.Modules.Reputation.Models.UserReputation", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("cms.Modules.Reputation.Models.UserTenantReputation", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("cms.Modules.Product.Models.Product", b =>
                {
                    b.Navigation("ProductPricings");

                    b.Navigation("ProductPrograms");

                    b.Navigation("PromoCodes");

                    b.Navigation("SubscriptionPlans");

                    b.Navigation("UserProducts");
                });

            modelBuilder.Entity("cms.Modules.Program.Models.Program", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("FeedbackSubmissions");

                    b.Navigation("ProductPrograms");

                    b.Navigation("ProgramContents");

                    b.Navigation("ProgramRatings");

                    b.Navigation("ProgramUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
