// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using cms.Data;

#nullable disable

namespace cms.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250605025018_AddRefreshTokens")]
    partial class AddRefreshTokens
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("cms.Common.Entities.ContentTypePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AssignedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Permissions")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserTenantId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AssignedByUserId");

                    b.HasIndex("ContentTypeName");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("Permissions");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserTenantId");

                    b.HasIndex("UserId", "ContentTypeName")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" IS NULL AND \"TenantId\" IS NULL");

                    b.ToTable("ContentTypePermissions", (string)null);
                });

            modelBuilder.Entity("cms.Common.Entities.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" IS NULL");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("Name");

                    b.HasIndex("TenantId");

                    b.ToTable("Languages", (string)null);
                });

            modelBuilder.Entity("cms.Common.Entities.ResourceBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Visibility")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TenantId");

                    b.HasIndex("Visibility");

                    b.ToTable("Resources", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("cms.Common.Entities.ResourceLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ResourceBaseId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ResourceBaseId");

                    b.HasIndex("Status");

                    b.HasIndex("TenantId");

                    b.HasIndex("ResourceId", "ResourceType")
                        .HasFilter("\"DeletedAt\" IS NULL");

                    b.HasIndex("ResourceId", "ResourceType", "LanguageId", "FieldName")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" IS NULL");

                    b.ToTable("ResourceLocalizations", (string)null);
                });

            modelBuilder.Entity("cms.Common.Entities.ResourceMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ResourceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SeoMetadata")
                        .HasColumnType("jsonb");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("ResourceId")
                        .IsUnique();

                    b.HasIndex("ResourceType");

                    b.HasIndex("TenantId");

                    b.ToTable("ResourceMetadata", (string)null);
                });

            modelBuilder.Entity("cms.Common.Entities.ResourcePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GrantedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Permissions")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ResourceBaseId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ResourceMetadataId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("GrantedByUserId");

                    b.HasIndex("Permissions");

                    b.HasIndex("ResourceBaseId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("ResourceMetadataId");

                    b.HasIndex("ResourceType");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("ResourcePermissions", (string)null);
                });

            modelBuilder.Entity("cms.Modules.Auth.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("TenantId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("cms.Modules.Tenant.Models.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" IS NULL");

                    b.HasIndex("TenantId");

                    b.ToTable("Tenants", (string)null);
                });

            modelBuilder.Entity("cms.Modules.Tenant.Models.TenantRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Permissions")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("TenantId", "Name")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" IS NULL");

                    b.ToTable("TenantRoles", (string)null);
                });

            modelBuilder.Entity("cms.Modules.Tenant.Models.UserTenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId", "TenantId")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" IS NULL");

                    b.ToTable("UserTenants", (string)null);
                });

            modelBuilder.Entity("cms.Modules.Tenant.Models.UserTenantRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TenantRoleId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserTenantId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantRoleId");

                    b.HasIndex("UserTenantId", "TenantRoleId")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" IS NULL");

                    b.ToTable("UserTenantRoles", (string)null);
                });

            modelBuilder.Entity("cms.Modules.User.Models.Credential", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Metadata")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId", "Type");

                    b.ToTable("Credentials", (string)null);
                });

            modelBuilder.Entity("cms.Modules.User.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" IS NULL");

                    b.HasIndex("TenantId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("cms.Modules.Reputation.Models.ReputationAction", b =>
                {
                    b.HasBaseType("cms.Common.Entities.ResourceBase");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<int?>("DailyLimit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("RequiredLevelId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TotalLimit")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ActionType")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" IS NULL");

                    b.HasIndex("IsActive");

                    b.HasIndex("Points");

                    b.HasIndex("RequiredLevelId");

                    b.ToTable("ReputationActions", (string)null);
                });

            modelBuilder.Entity("cms.Modules.Reputation.Models.ReputationTier", b =>
                {
                    b.HasBaseType("cms.Common.Entities.ResourceBase");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaximumScore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinimumScore")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.HasIndex("MinimumScore");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" IS NULL");

                    b.HasIndex("SortOrder");

                    b.ToTable("ReputationLevels", (string)null);
                });

            modelBuilder.Entity("cms.Modules.Reputation.Models.UserReputation", b =>
                {
                    b.HasBaseType("cms.Common.Entities.ResourceBase");

                    b.Property<Guid?>("CurrentLevelId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastLevelCalculation")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("NegativeChanges")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PositiveChanges")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ReputationTierId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasIndex("CurrentLevelId");

                    b.HasIndex("ReputationTierId");

                    b.HasIndex("Score");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" IS NULL");

                    b.ToTable("UserReputations", (string)null);
                });

            modelBuilder.Entity("cms.Modules.Reputation.Models.UserReputationHistory", b =>
                {
                    b.HasBaseType("cms.Common.Entities.ResourceBase");

                    b.Property<Guid?>("NewLevelId")
                        .HasColumnType("TEXT");

                    b.Property<int>("NewScore")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("PointsChange")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("PreviousLevelId")
                        .HasColumnType("TEXT");

                    b.Property<int>("PreviousScore")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RelatedResourceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReputationActionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TriggeredByUserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserReputationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserTenantId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserTenantReputationId")
                        .HasColumnType("TEXT");

                    b.HasIndex("NewLevelId");

                    b.HasIndex("OccurredAt");

                    b.HasIndex("PointsChange");

                    b.HasIndex("PreviousLevelId");

                    b.HasIndex("RelatedResourceId");

                    b.HasIndex("ReputationActionId");

                    b.HasIndex("TriggeredByUserId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserReputationId");

                    b.HasIndex("UserTenantId");

                    b.HasIndex("UserTenantReputationId");

                    b.ToTable("UserReputationHistory", null, t =>
                        {
                            t.HasCheckConstraint("CK_UserReputationHistory_UserOrUserTenant", "(\"UserId\" IS NOT NULL AND \"UserTenantId\" IS NULL) OR (\"UserId\" IS NULL AND \"UserTenantId\" IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("cms.Modules.Reputation.Models.UserTenantReputation", b =>
                {
                    b.HasBaseType("cms.Common.Entities.ResourceBase");

                    b.Property<Guid?>("CurrentLevelId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastLevelCalculation")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("NegativeChanges")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PositiveChanges")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserTenantId")
                        .HasColumnType("TEXT");

                    b.HasIndex("CurrentLevelId");

                    b.HasIndex("Score");

                    b.HasIndex("UserTenantId")
                        .IsUnique();

                    b.ToTable("UserTenantReputations", (string)null);
                });

            modelBuilder.Entity("cms.Modules.UserProfile.Models.UserProfile", b =>
                {
                    b.HasBaseType("cms.Common.Entities.ResourceBase");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FamilyName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("GivenName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.ToTable("UserProfiles", (string)null);
                });

            modelBuilder.Entity("cms.Common.Entities.ContentTypePermission", b =>
                {
                    b.HasOne("cms.Modules.User.Models.User", "AssignedByUser")
                        .WithMany()
                        .HasForeignKey("AssignedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("cms.Modules.User.Models.User", "User")
                        .WithMany("ContentTypePermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Modules.Tenant.Models.UserTenant", null)
                        .WithMany("ContentTypePermissions")
                        .HasForeignKey("UserTenantId");

                    b.Navigation("AssignedByUser");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("cms.Common.Entities.Language", b =>
                {
                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("cms.Common.Entities.ResourceBase", b =>
                {
                    b.HasOne("cms.Modules.User.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Owner");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("cms.Common.Entities.ResourceLocalization", b =>
                {
                    b.HasOne("cms.Common.Entities.Language", "Language")
                        .WithMany("ResourceLocalizations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Common.Entities.ResourceBase", null)
                        .WithMany("Localizations")
                        .HasForeignKey("ResourceBaseId");

                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Language");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("cms.Common.Entities.ResourceMetadata", b =>
                {
                    b.HasOne("cms.Common.Entities.ResourceBase", null)
                        .WithOne("Metadata")
                        .HasForeignKey("cms.Common.Entities.ResourceMetadata", "ResourceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("cms.Common.Entities.ResourcePermission", b =>
                {
                    b.HasOne("cms.Modules.User.Models.User", "GrantedByUser")
                        .WithMany("GrantedPermissions")
                        .HasForeignKey("GrantedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("cms.Common.Entities.ResourceBase", null)
                        .WithMany("ResourcePermissions")
                        .HasForeignKey("ResourceBaseId");

                    b.HasOne("cms.Common.Entities.ResourceBase", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Common.Entities.ResourceMetadata", "ResourceMetadata")
                        .WithMany("ResourcePermissions")
                        .HasForeignKey("ResourceMetadataId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("cms.Modules.User.Models.User", "User")
                        .WithMany("GrantedResourcePermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("GrantedByUser");

                    b.Navigation("Resource");

                    b.Navigation("ResourceMetadata");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("cms.Modules.Auth.Models.RefreshToken", b =>
                {
                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("cms.Modules.Tenant.Models.Tenant", b =>
                {
                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("cms.Modules.Tenant.Models.TenantRole", b =>
                {
                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany("TenantRoles")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("cms.Modules.Tenant.Models.UserTenant", b =>
                {
                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany("UserTenants")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Modules.User.Models.User", "User")
                        .WithMany("UserTenants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("cms.Modules.Tenant.Models.UserTenantRole", b =>
                {
                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("cms.Modules.Tenant.Models.TenantRole", "TenantRole")
                        .WithMany("UserTenantRoles")
                        .HasForeignKey("TenantRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Modules.Tenant.Models.UserTenant", "UserTenant")
                        .WithMany("UserTenantRoles")
                        .HasForeignKey("UserTenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("TenantRole");

                    b.Navigation("UserTenant");
                });

            modelBuilder.Entity("cms.Modules.User.Models.Credential", b =>
                {
                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Modules.User.Models.User", "User")
                        .WithMany("Credentials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("cms.Modules.User.Models.User", b =>
                {
                    b.HasOne("cms.Modules.Tenant.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("cms.Modules.Reputation.Models.ReputationAction", b =>
                {
                    b.HasOne("cms.Common.Entities.ResourceBase", null)
                        .WithOne()
                        .HasForeignKey("cms.Modules.Reputation.Models.ReputationAction", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Modules.Reputation.Models.ReputationTier", "RequiredLevel")
                        .WithMany()
                        .HasForeignKey("RequiredLevelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("RequiredLevel");
                });

            modelBuilder.Entity("cms.Modules.Reputation.Models.ReputationTier", b =>
                {
                    b.HasOne("cms.Common.Entities.ResourceBase", null)
                        .WithOne()
                        .HasForeignKey("cms.Modules.Reputation.Models.ReputationTier", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cms.Modules.Reputation.Models.UserReputation", b =>
                {
                    b.HasOne("cms.Modules.Reputation.Models.ReputationTier", "CurrentLevel")
                        .WithMany()
                        .HasForeignKey("CurrentLevelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Common.Entities.ResourceBase", null)
                        .WithOne()
                        .HasForeignKey("cms.Modules.Reputation.Models.UserReputation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Modules.Reputation.Models.ReputationTier", null)
                        .WithMany("UserReputations")
                        .HasForeignKey("ReputationTierId");

                    b.HasOne("cms.Modules.User.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentLevel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("cms.Modules.Reputation.Models.UserReputationHistory", b =>
                {
                    b.HasOne("cms.Common.Entities.ResourceBase", null)
                        .WithOne()
                        .HasForeignKey("cms.Modules.Reputation.Models.UserReputationHistory", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Modules.Reputation.Models.ReputationTier", "NewLevel")
                        .WithMany()
                        .HasForeignKey("NewLevelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Modules.Reputation.Models.ReputationTier", "PreviousLevel")
                        .WithMany()
                        .HasForeignKey("PreviousLevelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Common.Entities.ResourceBase", "RelatedResource")
                        .WithMany()
                        .HasForeignKey("RelatedResourceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Modules.Reputation.Models.ReputationAction", "ReputationAction")
                        .WithMany("ReputationHistory")
                        .HasForeignKey("ReputationActionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Modules.User.Models.User", "TriggeredByUser")
                        .WithMany()
                        .HasForeignKey("TriggeredByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Modules.User.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Modules.Reputation.Models.UserReputation", null)
                        .WithMany("History")
                        .HasForeignKey("UserReputationId");

                    b.HasOne("cms.Modules.Tenant.Models.UserTenant", "UserTenant")
                        .WithMany()
                        .HasForeignKey("UserTenantId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Modules.Reputation.Models.UserTenantReputation", null)
                        .WithMany("History")
                        .HasForeignKey("UserTenantReputationId");

                    b.Navigation("NewLevel");

                    b.Navigation("PreviousLevel");

                    b.Navigation("RelatedResource");

                    b.Navigation("ReputationAction");

                    b.Navigation("TriggeredByUser");

                    b.Navigation("User");

                    b.Navigation("UserTenant");
                });

            modelBuilder.Entity("cms.Modules.Reputation.Models.UserTenantReputation", b =>
                {
                    b.HasOne("cms.Modules.Reputation.Models.ReputationTier", "CurrentLevel")
                        .WithMany()
                        .HasForeignKey("CurrentLevelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("cms.Common.Entities.ResourceBase", null)
                        .WithOne()
                        .HasForeignKey("cms.Modules.Reputation.Models.UserTenantReputation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cms.Modules.Tenant.Models.UserTenant", "UserTenant")
                        .WithMany()
                        .HasForeignKey("UserTenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentLevel");

                    b.Navigation("UserTenant");
                });

            modelBuilder.Entity("cms.Modules.UserProfile.Models.UserProfile", b =>
                {
                    b.HasOne("cms.Common.Entities.ResourceBase", null)
                        .WithOne()
                        .HasForeignKey("cms.Modules.UserProfile.Models.UserProfile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cms.Common.Entities.Language", b =>
                {
                    b.Navigation("ResourceLocalizations");
                });

            modelBuilder.Entity("cms.Common.Entities.ResourceBase", b =>
                {
                    b.Navigation("Localizations");

                    b.Navigation("Metadata");

                    b.Navigation("ResourcePermissions");
                });

            modelBuilder.Entity("cms.Common.Entities.ResourceMetadata", b =>
                {
                    b.Navigation("ResourcePermissions");
                });

            modelBuilder.Entity("cms.Modules.Tenant.Models.Tenant", b =>
                {
                    b.Navigation("TenantRoles");

                    b.Navigation("UserTenants");
                });

            modelBuilder.Entity("cms.Modules.Tenant.Models.TenantRole", b =>
                {
                    b.Navigation("UserTenantRoles");
                });

            modelBuilder.Entity("cms.Modules.Tenant.Models.UserTenant", b =>
                {
                    b.Navigation("ContentTypePermissions");

                    b.Navigation("UserTenantRoles");
                });

            modelBuilder.Entity("cms.Modules.User.Models.User", b =>
                {
                    b.Navigation("ContentTypePermissions");

                    b.Navigation("Credentials");

                    b.Navigation("GrantedPermissions");

                    b.Navigation("GrantedResourcePermissions");

                    b.Navigation("UserTenants");
                });

            modelBuilder.Entity("cms.Modules.Reputation.Models.ReputationAction", b =>
                {
                    b.Navigation("ReputationHistory");
                });

            modelBuilder.Entity("cms.Modules.Reputation.Models.ReputationTier", b =>
                {
                    b.Navigation("UserReputations");
                });

            modelBuilder.Entity("cms.Modules.Reputation.Models.UserReputation", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("cms.Modules.Reputation.Models.UserTenantReputation", b =>
                {
                    b.Navigation("History");
                });
#pragma warning restore 612, 618
        }
    }
}
