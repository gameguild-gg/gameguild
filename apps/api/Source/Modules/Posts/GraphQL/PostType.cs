using GameGuild.Modules.Users;


namespace GameGuild.Modules.Posts.GraphQL;

/// <summary>
/// GraphQL type for Post entity
/// </summary>
public class PostType : ObjectType<Post> {
  protected override void Configure(IObjectTypeDescriptor<Post> descriptor) {
    descriptor.Name("Post");
    descriptor.Description("Represents a community post");

    descriptor
      .Field(p => p.Id)
      .Description("The unique identifier of the post");

    descriptor
      .Field(p => p.Title)
      .Description("The title of the post");

    descriptor
      .Field(p => p.Description)
      .Description("The description/content of the post");

    descriptor
      .Field(p => p.Description)
      .Description("The description/content of the post");

    descriptor
      .Field(p => p.Slug)
      .Description("The URL-friendly slug for the post");

    descriptor
      .Field(p => p.PostType)
      .Description("The type of post (e.g., 'general', 'announcement', 'user_signup')");

    descriptor
      .Field(p => p.AuthorId)
      .Description("The ID of the user who created the post");

    descriptor
      .Field(p => p.Author)
      .Description("The user who created the post")
      .ResolveWith<PostResolvers>(r => r.GetAuthorAsync(default!, default!, default!));

    descriptor
      .Field(p => p.IsSystemGenerated)
      .Description("Whether this post was automatically generated by the system");

    descriptor
      .Field(p => p.IsPinned)
      .Description("Whether this post is pinned to the top of feeds");

    descriptor
      .Field(p => p.LikesCount)
      .Description("The number of likes on this post");

    descriptor
      .Field(p => p.CommentsCount)
      .Description("The number of comments on this post");

    descriptor
      .Field(p => p.SharesCount)
      .Description("The number of shares/reposts of this post");

    descriptor
      .Field(p => p.RichContent)
      .Description("Rich content data as JSON (images, links, embeds, etc.)");

    descriptor
      .Field(p => p.Visibility)
      .Description("The visibility level of the post");

    descriptor
      .Field(p => p.Status)
      .Description("The publication status of the post");

    descriptor
      .Field(p => p.CreatedAt)
      .Description("When the post was created");

    descriptor
      .Field(p => p.UpdatedAt)
      .Description("When the post was last updated");

    descriptor
      .Field(p => p.ContentReferences)
      .Description("References to other content/resources related to this post")
      .ResolveWith<PostResolvers>(r => r.GetContentReferencesAsync(default!, default!, default!));

    descriptor
      .Field(p => p.Comments)
      .Description("Comments on this post")
      .ResolveWith<PostResolvers>(r => r.GetCommentsAsync(default!, default!, default!));

    descriptor
      .Field(p => p.Likes)
      .Description("Likes/reactions on this post")
      .ResolveWith<PostResolvers>(r => r.GetLikesAsync(default!, default!, default!));
  }
}

/// <summary>
/// GraphQL resolvers for Post fields that require data loading
/// </summary>
public class PostResolvers {
  /// <summary>
  /// Resolves the author of a post
  /// </summary>
  public async Task<User?> GetAuthorAsync(
    [Parent] Post post,
    [Service] IUserDataLoader userDataLoader,
    CancellationToken cancellationToken
  ) {
    if (post.AuthorId == null) return null;
    return await userDataLoader.LoadAsync(post.AuthorId.Value, cancellationToken);
  }

  /// <summary>
  /// Resolves the content references for a post
  /// </summary>
  public async Task<PostContentReference[]> GetContentReferencesAsync(
    [Parent] Post post,
    [Service] IPostContentReferenceDataLoader dataLoader,
    CancellationToken cancellationToken
  ) {
    return await dataLoader.LoadAsync(post.Id, cancellationToken) ?? Array.Empty<PostContentReference>();
  }

  /// <summary>
  /// Resolves the comments for a post
  /// </summary>
  public async Task<PostComment[]> GetCommentsAsync(
    [Parent] Post post,
    [Service] IPostCommentDataLoader dataLoader,
    CancellationToken cancellationToken
  ) {
    return await dataLoader.LoadAsync(post.Id, cancellationToken) ?? Array.Empty<PostComment>();
  }

  /// <summary>
  /// Resolves the likes for a post
  /// </summary>
  public async Task<PostLike[]> GetLikesAsync(
    [Parent] Post post,
    [Service] IPostLikeDataLoader dataLoader,
    CancellationToken cancellationToken
  ) {
    return await dataLoader.LoadAsync(post.Id, cancellationToken) ?? Array.Empty<PostLike>();
  }
}
