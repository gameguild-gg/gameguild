using GameGuild.Common;
using GameGuild.Database;
using GameGuild.Modules.Posts;
using GameGuild.Modules.Users;
using GameGuild.Modules.UserProfiles;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Moq;

namespace GameGuild.Tests.Modules.Posts.Unit.Handlers;

/// <summary>
/// Tests for UserProfileDomainEventHandler that listens to UserProfile events and creates posts
/// </summary>
public class UserProfileDomainEventHandlerTests : IDisposable
{
    private readonly ApplicationDbContext _context;
    private readonly Mock<ILogger<UserProfileDomainEventHandler>> _loggerMock;
    private readonly Mock<IDomainEventPublisher> _eventPublisherMock;
    private readonly UserProfileDomainEventHandler _handler;

    public UserProfileDomainEventHandlerTests()
    {
        var options = new DbContextOptionsBuilder<ApplicationDbContext>()
            .UseInMemoryDatabase(databaseName: Guid.NewGuid().ToString())
            .Options;
        
        _context = new ApplicationDbContext(options);
        _loggerMock = new Mock<ILogger<UserProfileDomainEventHandler>>();
        _eventPublisherMock = new Mock<IDomainEventPublisher>();
        
        _handler = new UserProfileDomainEventHandler(_context, _loggerMock.Object, _eventPublisherMock.Object);
    }

    [Fact]
    public async Task Handle_UserProfileCreatedEvent_Should_Create_Welcome_Post()
    {
        // Arrange
        var userProfileId = Guid.NewGuid();
        var userId = Guid.NewGuid();
        var tenantId = Guid.NewGuid();
        var displayName = "John Doe";
        var givenName = "John";
        var familyName = "Doe";
        
        // Create tenant
        var tenant = new GameGuild.Modules.Tenants.Tenant
        {
            Id = tenantId,
            Name = "Test Community",
            Slug = "test-community"
        };
        _context.Tenants.Add(tenant);

        // Create user
        var user = new User
        {
            Id = userId,
            Name = displayName,
            Email = "john@example.com",
            TenantId = tenantId,
            CreatedAt = DateTime.UtcNow
        };
        _context.Users.Add(user);

        // Create user profile
        var userProfile = new UserProfile
        {
            Id = userProfileId,
            UserId = userId,
            DisplayName = displayName,
            GivenName = givenName,
            FamilyName = familyName,
            User = user
        };
        _context.UserProfiles.Add(userProfile);
        await _context.SaveChangesAsync();

        var userProfileCreatedEvent = new UserProfileCreatedEvent(
            userProfileId, userId, displayName, givenName, familyName, DateTime.UtcNow);

        // Act
        await _handler.Handle(userProfileCreatedEvent, CancellationToken.None);

        // Assert
        var posts = await _context.Posts.ToListAsync();
        Assert.Single(posts);

        var post = posts.First();
        Assert.Equal($"Welcome {displayName}!", post.Title);
        Assert.Contains($"Welcome to the community, {displayName}!", post.Description);
        Assert.Equal("user_signup", post.PostType);
        Assert.Equal(userId, post.AuthorId);
        Assert.True(post.IsSystemGenerated);
        Assert.Equal("public", post.Visibility);
        Assert.Equal(tenantId, post.Tenant?.Id);

        // Verify event was published
        _eventPublisherMock.Verify(
            x => x.PublishAsync(It.IsAny<PostCreatedEvent>(), It.IsAny<CancellationToken>()),
            Times.Once);
    }

    [Fact]
    public async Task Handle_UserProfileUpdatedEvent_With_Significant_Changes_Should_Create_Activity_Post()
    {
        // Arrange
        var userProfileId = Guid.NewGuid();
        var userId = Guid.NewGuid();
        var displayName = "Jane Smith";
        
        // Create user
        var user = new User
        {
            Id = userId,
            Name = displayName,
            Email = "jane@example.com",
            CreatedAt = DateTime.UtcNow
        };
        _context.Users.Add(user);

        // Create user profile
        var userProfile = new UserProfile
        {
            Id = userProfileId,
            UserId = userId,
            DisplayName = displayName,
            User = user
        };
        _context.UserProfiles.Add(userProfile);
        await _context.SaveChangesAsync();

        var changes = new Dictionary<string, object>
        {
            ["DisplayName"] = "Jane Smith-Wilson",
            ["Bio"] = "Updated my bio with new information"
        };

        var userProfileUpdatedEvent = new UserProfileUpdatedEvent(
            userProfileId, userId, changes, DateTime.UtcNow, Guid.Empty);

        // Act
        await _handler.Handle(userProfileUpdatedEvent, CancellationToken.None);

        // Assert
        var posts = await _context.Posts.ToListAsync();
        Assert.Single(posts);

        var post = posts.First();
        Assert.Equal($"{displayName} updated their profile", post.Title);
        Assert.Contains("made some updates to their profile", post.Description);
        Assert.Contains("updated their display name and updated their bio", post.Description);
        Assert.Equal("profile_update", post.PostType);
        Assert.Equal(userId, post.AuthorId);
        Assert.True(post.IsSystemGenerated);
    }

    [Fact]
    public async Task Handle_UserProfileUpdatedEvent_With_No_Significant_Changes_Should_Not_Create_Post()
    {
        // Arrange
        var userProfileId = Guid.NewGuid();
        var userId = Guid.NewGuid();
        
        var changes = new Dictionary<string, object>
        {
            ["LastLoginAt"] = DateTime.UtcNow,
            ["LoginCount"] = 42
        };

        var userProfileUpdatedEvent = new UserProfileUpdatedEvent(
            userProfileId, userId, changes, DateTime.UtcNow, Guid.Empty);

        // Act
        await _handler.Handle(userProfileUpdatedEvent, CancellationToken.None);

        // Assert
        var posts = await _context.Posts.ToListAsync();
        Assert.Empty(posts);

        // Verify no event was published
        _eventPublisherMock.Verify(
            x => x.PublishAsync(It.IsAny<PostCreatedEvent>(), It.IsAny<CancellationToken>()),
            Times.Never);
    }

    [Fact]
    public async Task Handle_UserProfileCreatedEvent_For_Game_Developer_Should_Create_Welcome_Post()
    {
        // Arrange
        var userProfileId = Guid.NewGuid();
        var userId = Guid.NewGuid();
        var tenantId = Guid.NewGuid();
        var displayName = "Indie Game Dev";
        
        // Create game development tenant
        var tenant = new GameGuild.Modules.Tenants.Tenant
        {
            Id = tenantId,
            Name = "Game Development Community",
            Slug = "game-dev"
        };
        _context.Tenants.Add(tenant);

        // Create user
        var user = new User
        {
            Id = userId,
            Name = displayName,
            Email = "dev@indiegames.com",
            TenantId = tenantId,
            CreatedAt = DateTime.UtcNow
        };
        _context.Users.Add(user);

        // Create user profile
        var userProfile = new UserProfile
        {
            Id = userProfileId,
            UserId = userId,
            DisplayName = displayName,
            User = user
        };
        _context.UserProfiles.Add(userProfile);
        await _context.SaveChangesAsync();

        var userProfileCreatedEvent = new UserProfileCreatedEvent(
            userProfileId, userId, displayName, "Indie", "Dev", DateTime.UtcNow);

        // Act
        await _handler.Handle(userProfileCreatedEvent, CancellationToken.None);

        // Assert
        var posts = await _context.Posts.ToListAsync();
        Assert.Single(posts);

        var post = posts.First();
        Assert.Equal($"Welcome {displayName}!", post.Title);
        Assert.Contains("Welcome to the community", post.Description);
        Assert.Equal("user_signup", post.PostType);
        Assert.Equal(tenantId, post.Tenant?.Id);
        Assert.Equal("Game Development Community", post.Tenant?.Name);
    }

    [Fact]
    public async Task Handle_UserProfileCreatedEvent_For_Project_Manager_Should_Create_Welcome_Post()
    {
        // Arrange
        var userProfileId = Guid.NewGuid();
        var userId = Guid.NewGuid();
        var tenantId = Guid.NewGuid();
        var displayName = "Project Lead";
        
        // Create project management tenant
        var tenant = new GameGuild.Modules.Tenants.Tenant
        {
            Id = tenantId,
            Name = "Project Management Hub",
            Slug = "project-mgmt"
        };
        _context.Tenants.Add(tenant);

        // Create user
        var user = new User
        {
            Id = userId,
            Name = displayName,
            Email = "lead@projects.com",
            TenantId = tenantId,
            CreatedAt = DateTime.UtcNow
        };
        _context.Users.Add(user);

        // Create user profile
        var userProfile = new UserProfile
        {
            Id = userProfileId,
            UserId = userId,
            DisplayName = displayName,
            User = user
        };
        _context.UserProfiles.Add(userProfile);
        await _context.SaveChangesAsync();

        var userProfileCreatedEvent = new UserProfileCreatedEvent(
            userProfileId, userId, displayName, "Project", "Lead", DateTime.UtcNow);

        // Act
        await _handler.Handle(userProfileCreatedEvent, CancellationToken.None);

        // Assert
        var posts = await _context.Posts.ToListAsync();
        Assert.Single(posts);

        var post = posts.First();
        Assert.Equal($"Welcome {displayName}!", post.Title);
        Assert.Contains("Welcome to the community", post.Description);
        Assert.Equal("user_signup", post.PostType);
        Assert.Equal(tenantId, post.Tenant?.Id);
        Assert.Equal("Project Management Hub", post.Tenant?.Name);
    }

    [Fact]
    public async Task Handle_UserProfileCreatedEvent_For_Testing_Session_Participant_Should_Create_Welcome_Post()
    {
        // Arrange
        var userProfileId = Guid.NewGuid();
        var userId = Guid.NewGuid();
        var tenantId = Guid.NewGuid();
        var displayName = "QA Tester Pro";
        
        // Create testing lab tenant
        var tenant = new GameGuild.Modules.Tenants.Tenant
        {
            Id = tenantId,
            Name = "Testing Lab Community",
            Slug = "testing-lab"
        };
        _context.Tenants.Add(tenant);

        // Create user
        var user = new User
        {
            Id = userId,
            Name = displayName,
            Email = "tester@testinglab.com",
            TenantId = tenantId,
            CreatedAt = DateTime.UtcNow
        };
        _context.Users.Add(user);

        // Create user profile
        var userProfile = new UserProfile
        {
            Id = userProfileId,
            UserId = userId,
            DisplayName = displayName,
            User = user
        };
        _context.UserProfiles.Add(userProfile);
        await _context.SaveChangesAsync();

        var userProfileCreatedEvent = new UserProfileCreatedEvent(
            userProfileId, userId, displayName, "QA", "Tester", DateTime.UtcNow);

        // Act
        await _handler.Handle(userProfileCreatedEvent, CancellationToken.None);

        // Assert
        var posts = await _context.Posts.ToListAsync();
        Assert.Single(posts);

        var post = posts.First();
        Assert.Equal($"Welcome {displayName}!", post.Title);
        Assert.Contains("Welcome to the community", post.Description);
        Assert.Equal("user_signup", post.PostType);
        Assert.Equal(tenantId, post.Tenant?.Id);
        Assert.Equal("Testing Lab Community", post.Tenant?.Name);
    }

    [Fact]
    public async Task Handle_UserProfileUpdatedEvent_With_Title_Change_Should_Create_Activity_Post()
    {
        // Arrange
        var userProfileId = Guid.NewGuid();
        var userId = Guid.NewGuid();
        var displayName = "Senior Developer";
        
        // Create user
        var user = new User
        {
            Id = userId,
            Name = displayName,
            Email = "senior@dev.com",
            CreatedAt = DateTime.UtcNow
        };
        _context.Users.Add(user);

        // Create user profile
        var userProfile = new UserProfile
        {
            Id = userProfileId,
            UserId = userId,
            DisplayName = displayName,
            User = user
        };
        _context.UserProfiles.Add(userProfile);
        await _context.SaveChangesAsync();

        var changes = new Dictionary<string, object>
        {
            ["Title"] = "Lead Developer"
        };

        var userProfileUpdatedEvent = new UserProfileUpdatedEvent(
            userProfileId, userId, changes, DateTime.UtcNow, Guid.Empty);

        // Act
        await _handler.Handle(userProfileUpdatedEvent, CancellationToken.None);

        // Assert
        var posts = await _context.Posts.ToListAsync();
        Assert.Single(posts);

        var post = posts.First();
        Assert.Equal($"{displayName} updated their profile", post.Title);
        Assert.Contains("updated their title", post.Description);
        Assert.Equal("profile_update", post.PostType);
    }

    [Fact]
    public async Task Handle_UserProfileCreatedEvent_Should_Handle_Missing_UserProfile_Gracefully()
    {
        // Arrange
        var userProfileId = Guid.NewGuid();
        var userId = Guid.NewGuid();

        var userProfileCreatedEvent = new UserProfileCreatedEvent(
            userProfileId, userId, "Test User", "Test", "User", DateTime.UtcNow);

        // Act & Assert - Should not throw
        await _handler.Handle(userProfileCreatedEvent, CancellationToken.None);

        // Verify no posts were created
        var posts = await _context.Posts.ToListAsync();
        Assert.Empty(posts);
    }

    public void Dispose()
    {
        _context.Dispose();
    }
}
