// Project Platform Database Schema
// Simplified version of itch.io-like platform

// External references (handled by other systems)
// - user_id: references external user management system
// - asset_id: references external asset/file management system


// ===== ENUMS =====
Enum project_category {
  game
  tool
  art
  music
  writing
  other
}

Enum project_status {
  draft
  under_review
  published
  archived
}

Enum project_visibility {
  public
  private
  unlisted
  password_protected
}

Enum version_status {
  draft
  published
  archived
}

Enum file_type {
  executable
  documentation
  screenshot
  video
  audio
  source_code
  asset
  other
}

Enum team_role {
  owner
  editor
  member
}

Enum member_status {
  pending
  active
  removed
}

Enum jam_status {
  upcoming
  active
  voting
  completed
  cancelled
}

Enum testing_status {
  upcoming
  active
  completed
  cancelled
}

Enum vote_type {
  upvote
  downvote
}

Enum testing_mode {
  online
  in_person
  hybrid
}

Enum location_status {
  active
  maintenance
  inactive
}

Enum session_status {
  scheduled
  active
  completed
  cancelled
}

Enum attendance_status {
  registered
  checked_in
  completed
  no_show
}

Enum instruction_type {
  text
  url
  file
}

Enum registration_type {
  project_member
  tester
}

Enum testing_request_status {
  draft
  open
  in_progress
  completed
  cancelled
}

Enum testing_context {
  online
  in_person
}

// ===== CORE PROJECT ENTITIES =====

Table users {
  id uuid [primary key]
  username varchar(50) [unique, not null, note: 'Alphanumeric and underscore only, 3-50 chars']
  email varchar(255) [unique, not null, note: 'Valid email format required']
  password_hash varchar(255) [note: 'Hashed password, min 8 chars original'] // hashed password
  display_name varchar(100) [note: 'Display name, 1-100 chars']
  profile_picture_url varchar(500)
  
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
  
  Indexes {
    username
    email
    created_at
  }
}

Table projects {
  id uuid [primary key]
  title varchar(255) [not null, note: 'Project title, 1-255 chars']
  slug varchar(255) [unique, not null, note: 'URL-friendly slug, lowercase, alphanumeric and hyphens']
  short_description text [note: 'Brief description, max 500 chars']
  description text [note: 'Rich text/markdown for landing page']
  category project_category [not null]
  status project_status [not null, default: 'draft']
  visibility project_visibility [not null, default: 'private']
  license varchar(100)
  website_url varchar(500) [note: 'Valid URL format']
  repository_url varchar(500) [note: 'Valid URL format']
  social_links json [note: 'JSON object with social media links'] // {twitter, discord, etc.}
  
  // Statistics (simple counters)
  view_count integer [default: 0, note: 'Must be >= 0']
  download_count integer [default: 0, note: 'Must be >= 0']
  follower_count integer [default: 0, note: 'Must be >= 0']
  
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
  created_by uuid [not null, ref: > users.id] // user_id
  
  Indexes {
    slug
    category
    status
    visibility
    created_by
    created_at
    (category, status)
    (status, visibility)
  }
}

Table project_versions {
  id uuid [primary key]
  project_id uuid [not null, ref: > projects.id]
  version_number varchar(50) [not null] // e.g., "1.0.0", "alpha-0.1"
  release_notes text
  status version_status [not null, default: 'draft']
  download_count integer [default: 0]
  
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
  created_by uuid [not null, ref: > users.id] // user_id
}

Table project_version_files {
  id uuid [primary key]
  version_id uuid [not null, ref: > project_versions.id]
  asset_id uuid [not null] // reference to external asset system
  file_type file_type [not null] // executable, documentation, screenshot, etc.
  display_name varchar(255)
  is_primary boolean [default: false] // main executable/download
  
  created_at timestamp [not null, default: `now()`]
}

// ===== TEAM MANAGEMENT =====

Table project_team_members {
  id uuid [primary key]
  project_id uuid [not null, ref: > projects.id]
  user_id uuid [not null, ref: > users.id]
  role team_role [not null]
  invited_by uuid [ref: > users.id] // user_id who sent invitation
  status member_status [not null, default: 'pending']
  
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
  
  Indexes {
    (project_id, user_id) [unique]
  }
}

// ===== TAGS SYSTEM =====

Table tags {
  id uuid [primary key]
  name varchar(100) [unique, not null]
  color varchar(7) // hex color code
  
  created_at timestamp [not null, default: `now()`]
}

Table project_tags {
  id uuid [primary key]
  project_id uuid [not null, ref: > projects.id]
  tag_id uuid [not null, ref: > tags.id]
  
  created_at timestamp [not null, default: `now()`]
  
  Indexes {
    (project_id, tag_id) [unique]
    project_id
    tag_id
  }
}

// ===== COMMUNITY FEATURES =====

Table project_comments {
  id uuid [primary key]
  project_id uuid [not null, ref: > projects.id]
  parent_comment_id uuid [ref: > project_comments.id] // for nested replies
  user_id uuid [not null, ref: > users.id] // external user reference
  content text [not null, note: 'Cannot be empty']
  is_edited boolean [default: false]
  
  // Vote counters for performance
  upvote_count integer [default: 0, note: 'Must be >= 0']
  downvote_count integer [default: 0, note: 'Must be >= 0']
  
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
  
  Indexes {
    project_id
    parent_comment_id
    user_id
    created_at
    (project_id, created_at)
  }
}

Table project_comment_votes {
  id uuid [primary key]
  comment_id uuid [not null, ref: > project_comments.id]
  user_id uuid [not null, ref: > users.id]
  vote_type vote_type [not null] // upvote or downvote
  
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
  
  Indexes {
    (comment_id, user_id) [unique] // one vote per user per comment
    comment_id
    user_id
  }
}

Table project_ratings {
  id uuid [primary key]
  project_id uuid [not null, ref: > projects.id]
  user_id uuid [not null, ref: > users.id] // external user reference
  rating integer [not null, note: 'Must be between 1-5'] // 1-5 stars
  review_text text
  
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
  
  Indexes {
    (project_id, user_id) [unique]
    project_id
    user_id
    rating
    created_at
  }
}

Table project_followers {
  id uuid [primary key]
  project_id uuid [not null, ref: > projects.id]
  user_id uuid [not null, ref: > users.id] // external user reference
  
  created_at timestamp [not null, default: `now()`]
  
  Indexes {
    (project_id, user_id) [unique] // one follow per user per project
    project_id
    user_id
    created_at
  }
}

// ===== JAMS & COMPETITIONS =====

Table jams {
  id uuid [primary key]
  name varchar(255) [not null]
  slug varchar(255) [unique, not null]
  theme varchar(500)
  description text
  rules text
  submission_criteria text
  
  start_date timestamp [not null]
  end_date timestamp [not null]
  voting_end_date timestamp
  
  max_participants integer
  participant_count integer [default: 0]
  
  status jam_status [not null, default: 'upcoming']
  created_by uuid [not null, ref: > users.id] // user_id
  
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
}

Table jam_submissions {
  id uuid [primary key]
  jam_id uuid [not null, ref: > jams.id]
  project_version_id uuid [not null, ref: > project_versions.id]
  user_id uuid [not null, ref: > users.id] // submitter user_id
  submission_notes text
  
  created_at timestamp [not null, default: `now()`]
  
  Indexes {
    (jam_id, project_version_id) [unique]
  }
}

Table jam_judging_criteria {
  id uuid [primary key]
  jam_id uuid [not null, ref: > jams.id]
  name varchar(100) [not null] // e.g., "Creativity", "Fun", "Theme adherence"
  description text
  weight decimal(3,2) [default: 1.0] // scoring weight
  max_score integer [not null, default: 5]
  
  created_at timestamp [not null, default: `now()`]
}

Table jam_scores {
  id uuid [primary key]
  submission_id uuid [not null, ref: > jam_submissions.id]
  criteria_id uuid [not null, ref: > jam_judging_criteria.id]
  judge_user_id uuid [not null, ref: > users.id] // user_id of judge
  score integer [not null, note: 'Must be between 0 and max_score from criteria']
  feedback text
  
  created_at timestamp [not null, default: `now()`]
  
  Indexes {
    (submission_id, criteria_id, judge_user_id) [unique]
    submission_id
    criteria_id
    judge_user_id
  }
}

// ===== TESTING LAB =====

Table testing_requests {
  id uuid [primary key]
  project_version_id uuid [not null, ref: > project_versions.id]
  title varchar(255) [not null]
  description text
  
  // Testing instructions document (required)
  instructions_type instruction_type [not null] // text, url, or file
  instructions_content text // for text type
  instructions_url varchar(500) // for url type  
  instructions_file_id uuid // for file type, ref to external file system
  
  // Self-service settings
  max_testers integer
  current_tester_count integer [default: 0]
  
  // Scheduling settings
  start_date timestamp [not null]
  end_date timestamp [not null]
  
  status testing_request_status [not null, default: 'draft']
  
  created_by uuid [not null, ref: > users.id]
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
  
  Indexes {
    project_version_id
    created_by
    status
    (status, start_date)
  }
}

// Testing locations/labs management
Table testing_locations {
  id uuid [primary key]
  name varchar(255) [not null] // "Lab A", "Conference Room 1", etc.
  description text
  address text
  max_testers_capacity integer [not null] // how many testers can be accommodated simultaneously
  max_projects_capacity integer [not null] // how many projects can be tested simultaneously
  equipment_available text // what's available at this location
  
  status location_status [not null, default: 'active'] // active, maintenance, or inactive
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
  
  Indexes {
    status
    name
  }
}

// Manager-scheduled in-person testing sessions
Table testing_sessions {
  id uuid [primary key]
  testing_request_id uuid [not null, ref: > testing_requests.id]
  location_id uuid [not null, ref: > testing_locations.id]
  
  session_name varchar(255) [not null]
  session_date timestamp [not null]
  start_time timestamp [not null]
  end_time timestamp [not null]
  
  max_testers integer [not null] // how many testers can participate
  registered_tester_count integer [default: 0]
  
  // At least one project member must attend
  registered_project_member_count integer [default: 0]
  registered_project_count integer [default: 0]
  
  status session_status [not null, default: 'scheduled']
  
  // Manager responsible for this session
  manager_user_id uuid [not null, ref: > users.id] // manager responsible for this session
  created_by uuid [not null, ref: > users.id] // user who created this (could be same as manager)
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
  
  Indexes {
    testing_request_id
    location_id
    session_date
    status
    manager_user_id
    (location_id, session_date, start_time)
  }
}

// Unified registration system for both project members and testers
Table session_registrations {
  id uuid [primary key]
  session_id uuid [not null, ref: > testing_sessions.id]
  user_id uuid [not null, ref: > users.id]
  registration_type registration_type [not null] // project_member or tester
  
  // For project members
  project_role team_role // their role in the project (only for project_member type)
  
  // For testers
  registration_notes text // why they want to participate, experience, etc. (mainly for testers)
  
  attendance_status attendance_status [not null, default: 'registered']
  attended_at timestamp // when they actually showed up
  
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
  
  Indexes {
    (session_id, user_id) [unique] // one registration per user per session
    session_id
    user_id
    registration_type
    attendance_status
  }
}

// Self-service online testing participants (no registration needed)
Table testing_participants {
  id uuid [primary key]
  testing_request_id uuid [not null, ref: > testing_requests.id]
  user_id uuid [not null, ref: > users.id]
  
  instructions_acknowledged boolean [not null, default: false] // must read instructions first
  instructions_acknowledged_at timestamp
  
  started_at timestamp [not null, default: `now()`]
  completed_at timestamp // when they finished testing
  
  Indexes {
    (testing_request_id, user_id) [unique]
    testing_request_id
    user_id
  }
}

// Dynamic feedback forms for both online and in-person testing
Table testing_feedback_forms {
  id uuid [primary key]
  testing_request_id uuid [not null, ref: > testing_requests.id]
  form_schema json [not null] // dynamic form structure
  is_for_online boolean [default: true] // can be used for online testing
  is_for_sessions boolean [default: true] // can be used for in-person sessions
  
  created_at timestamp [not null, default: `now()`]
}

// Feedback from both online and in-person testing
Table testing_feedback {
  id uuid [primary key]
  testing_request_id uuid [not null, ref: > testing_requests.id]
  feedback_form_id uuid [not null, ref: > testing_feedback_forms.id]
  user_id uuid [not null, ref: > users.id] // tester who submitted feedback
  
  // Context: was this from online self-service or in-person session?
  session_id uuid [ref: > testing_sessions.id] // null for online testing
  testing_context testing_context [not null] // online or in_person
  
  feedback_data json [not null, note: 'JSON responses to form questions']
  additional_notes text
  
  created_at timestamp [not null, default: `now()`]
  
  Indexes {
    testing_request_id
    user_id
    session_id
    testing_context
    created_at
  }
}

// Project members rating the quality of feedback received
Table feedback_quality_ratings {
  id uuid [primary key]
  feedback_id uuid [not null, ref: > testing_feedback.id]
  rated_by_user_id uuid [not null, ref: > users.id] // project member who rated the feedback
  quality_rating integer [not null, note: 'Must be between 1-5, how helpful was this feedback']
  reason text [note: 'Optional explanation for the rating']
  
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
  
  Indexes {
    (feedback_id, rated_by_user_id) [unique] // one rating per project member per feedback
    feedback_id
    rated_by_user_id
    quality_rating
  }
}

// Waitlist system for popular testing sessions - automatic registration when spot opens
Table session_waitlist {
  id uuid [primary key]
  session_id uuid [not null, ref: > testing_sessions.id]
  user_id uuid [not null, ref: > users.id]
  registration_type registration_type [not null] // project_member or tester
  position integer [not null, note: 'Queue position, lower numbers = higher priority']
  registration_notes text [note: 'Why they want to participate, experience, etc.']
  
  created_at timestamp [not null, default: `now()`]
  
  Indexes {
    (session_id, user_id) [unique] // one waitlist entry per user per session
    (session_id, position) // for efficient queue management and auto-registration
    session_id
    user_id
    registration_type
  }
}