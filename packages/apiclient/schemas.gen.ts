// This file is auto-generated by @hey-api/openapi-ts

export const EmailDtoSchema = {
    type: 'object',
    properties: {
        email: {
            type: 'string'
        }
    },
    required: ['email']
} as const;

export const OkDtoSchema = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        }
    },
    required: ['success', 'message']
} as const;

export const LocalSignInDtoSchema = {
    type: 'object',
    properties: {
        email: {
            type: 'string'
        },
        password: {
            type: 'string'
        },
        username: {
            type: 'string'
        }
    },
    required: ['email', 'password', 'username']
} as const;

export const LocalSignUpDtoSchema = {
    type: 'object',
    properties: {
        username: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        password: {
            type: 'string'
        }
    },
    required: ['username', 'email', 'password']
} as const;

export const UserProfileEntitySchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: 'string'
        },
        user: {
            '$ref': '#/components/schemas/UserEntity'
        },
        bio: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        givenName: {
            type: 'string'
        },
        familyName: {
            type: 'string'
        },
        picture: {
            type: 'string'
        }
    },
    required: ['id', 'createdAt', 'updatedAt', 'user', 'bio', 'name', 'givenName', 'familyName', 'picture']
} as const;

export const CompetitionSubmissionEntitySchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: 'string'
        }
    },
    required: ['id', 'createdAt', 'updatedAt']
} as const;

export const PostEntitySchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: 'string'
        },
        owner: {
            '$ref': '#/components/schemas/UserEntity'
        },
        editors: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UserEntity'
            }
        },
        slug: {
            type: 'string'
        },
        title: {
            type: 'string'
        },
        summary: {
            type: 'string'
        },
        body: {
            type: 'string'
        },
        visibility: {
            type: 'string',
            enum: ['DRAFT', 'PUBLISHED', 'FUTURE', 'PENDING', 'PRIVATE', 'TRASH']
        },
        thumbnail: {
            type: 'string'
        }
    },
    required: ['id', 'createdAt', 'updatedAt', 'owner', 'editors', 'slug', 'title', 'summary', 'body', 'visibility', 'thumbnail']
} as const;

export const LectureEntitySchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: 'string'
        },
        owner: {
            '$ref': '#/components/schemas/UserEntity'
        },
        editors: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UserEntity'
            }
        },
        slug: {
            type: 'string'
        },
        title: {
            type: 'string'
        },
        summary: {
            type: 'string'
        },
        body: {
            type: 'string'
        },
        visibility: {
            type: 'string',
            enum: ['DRAFT', 'PUBLISHED', 'FUTURE', 'PENDING', 'PRIVATE', 'TRASH']
        },
        thumbnail: {
            type: 'string'
        },
        order: {
            type: 'number'
        },
        course: {
            '$ref': '#/components/schemas/CourseEntity'
        },
        chapter: {
            '$ref': '#/components/schemas/CourseEntity'
        }
    },
    required: ['id', 'createdAt', 'updatedAt', 'owner', 'editors', 'slug', 'title', 'summary', 'body', 'visibility', 'thumbnail', 'order', 'course', 'chapter']
} as const;

export const ChapterEntitySchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: 'string'
        },
        owner: {
            '$ref': '#/components/schemas/UserEntity'
        },
        editors: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UserEntity'
            }
        },
        slug: {
            type: 'string'
        },
        title: {
            type: 'string'
        },
        summary: {
            type: 'string'
        },
        body: {
            type: 'string'
        },
        visibility: {
            type: 'string',
            enum: ['DRAFT', 'PUBLISHED', 'FUTURE', 'PENDING', 'PRIVATE', 'TRASH']
        },
        thumbnail: {
            type: 'string'
        },
        order: {
            type: 'number'
        },
        course: {
            '$ref': '#/components/schemas/CourseEntity'
        },
        lectures: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LectureEntity'
            }
        }
    },
    required: ['id', 'createdAt', 'updatedAt', 'owner', 'editors', 'slug', 'title', 'summary', 'body', 'visibility', 'thumbnail', 'order', 'course', 'lectures']
} as const;

export const CourseEntitySchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: 'string'
        },
        owner: {
            '$ref': '#/components/schemas/UserEntity'
        },
        editors: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UserEntity'
            }
        },
        slug: {
            type: 'string'
        },
        title: {
            type: 'string'
        },
        summary: {
            type: 'string'
        },
        body: {
            type: 'string'
        },
        visibility: {
            type: 'string',
            enum: ['DRAFT', 'PUBLISHED', 'FUTURE', 'PENDING', 'PRIVATE', 'TRASH']
        },
        thumbnail: {
            type: 'string'
        },
        price: {
            type: 'number'
        },
        subscriptionAccess: {
            type: 'boolean'
        },
        author: {
            '$ref': '#/components/schemas/UserEntity'
        },
        lectures: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LectureEntity'
            }
        },
        chapters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ChapterEntity'
            }
        }
    },
    required: ['id', 'createdAt', 'updatedAt', 'owner', 'editors', 'slug', 'title', 'summary', 'body', 'visibility', 'thumbnail', 'price', 'subscriptionAccess', 'author', 'lectures', 'chapters']
} as const;

export const UserEntitySchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: 'string'
        },
        username: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        emailVerified: {
            type: 'boolean'
        },
        passwordHash: {
            type: 'string'
        },
        passwordSalt: {
            type: 'string'
        },
        facebookId: {
            type: 'string'
        },
        googleId: {
            type: 'string'
        },
        githubId: {
            type: 'string'
        },
        appleId: {
            type: 'string'
        },
        linkedinId: {
            type: 'string'
        },
        twitterId: {
            type: 'string'
        },
        walletAddress: {
            type: 'string'
        },
        profile: {
            '$ref': '#/components/schemas/UserProfileEntity'
        },
        competitionSubmissions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CompetitionSubmissionEntity'
            }
        },
        elo: {
            type: 'number'
        },
        posts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PostEntity'
            }
        },
        courses: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CourseEntity'
            }
        }
    },
    required: ['id', 'createdAt', 'updatedAt', 'username', 'email', 'emailVerified', 'passwordHash', 'passwordSalt', 'facebookId', 'googleId', 'githubId', 'appleId', 'linkedinId', 'twitterId', 'walletAddress', 'profile', 'competitionSubmissions', 'elo', 'posts', 'courses']
} as const;

export const LocalSignInResponseDtoSchema = {
    type: 'object',
    properties: {
        accessToken: {
            type: 'string'
        },
        refreshToken: {
            type: 'string'
        },
        user: {
            '$ref': '#/components/schemas/UserEntity'
        }
    },
    required: ['accessToken', 'refreshToken', 'user']
} as const;

export const EthereumSigninChallengeRequestDtoSchema = {
    type: 'object',
    properties: {
        address: {
            type: 'string'
        }
    },
    required: ['address']
} as const;

export const EthereumSigninChallengeResponseDtoSchema = {
    type: 'object',
    properties: {
        message: {
            type: 'string'
        }
    },
    required: ['message']
} as const;

export const EthereumSigninValidateRequestDtoSchema = {
    type: 'object',
    properties: {
        address: {
            type: 'string'
        },
        signature: {
            type: 'string'
        }
    },
    required: ['address', 'signature']
} as const;

export const GetManyProjectEntityResponseDtoSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProjectEntity'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const ProjectTestFeedbackQuestionSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['SHORT_ANSWER', 'PARAGRAPH', 'CHECKBOX', 'DROPDOWN', 'LINEAR_SCALE']
        },
        description: {
            type: 'string'
        },
        isRequired: {
            type: 'boolean'
        }
    },
    required: ['type', 'description', 'isRequired']
} as const;

export const ProjectTestFeedbackQuestionCheckboxSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['SHORT_ANSWER', 'PARAGRAPH', 'CHECKBOX', 'DROPDOWN', 'LINEAR_SCALE']
        },
        description: {
            type: 'string'
        },
        isRequired: {
            type: 'boolean'
        },
        options: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    required: ['type', 'description', 'isRequired', 'options']
} as const;

export const ProjectTestFeedbackQuestionDropdownSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['SHORT_ANSWER', 'PARAGRAPH', 'CHECKBOX', 'DROPDOWN', 'LINEAR_SCALE']
        },
        description: {
            type: 'string'
        },
        isRequired: {
            type: 'boolean'
        },
        options: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    required: ['type', 'description', 'isRequired', 'options']
} as const;

export const ProjectTestFeedbackQuestionLinearScaleSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['SHORT_ANSWER', 'PARAGRAPH', 'CHECKBOX', 'DROPDOWN', 'LINEAR_SCALE']
        },
        description: {
            type: 'string'
        },
        isRequired: {
            type: 'boolean'
        },
        minimum: {
            type: 'number'
        },
        maximum: {
            type: 'number'
        },
        steps: {
            type: 'number'
        }
    },
    required: ['type', 'description', 'isRequired', 'minimum', 'maximum', 'steps']
} as const;

export const ProjectTestFeedbackQuestionShortAnswerSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['SHORT_ANSWER', 'PARAGRAPH', 'CHECKBOX', 'DROPDOWN', 'LINEAR_SCALE']
        },
        description: {
            type: 'string'
        },
        isRequired: {
            type: 'boolean'
        },
        minimumCharacters: {
            type: 'number'
        },
        maximumCharacters: {
            type: 'number'
        }
    },
    required: ['type', 'description', 'isRequired', 'minimumCharacters', 'maximumCharacters']
} as const;

export const ProjectTestFeedbackQuestionParagraphSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['SHORT_ANSWER', 'PARAGRAPH', 'CHECKBOX', 'DROPDOWN', 'LINEAR_SCALE']
        },
        description: {
            type: 'string'
        },
        isRequired: {
            type: 'boolean'
        },
        minimumCharacters: {
            type: 'number'
        },
        maximumCharacters: {
            type: 'number'
        },
        minimumLines: {
            type: 'number'
        },
        maximumLines: {
            type: 'number'
        }
    },
    required: ['type', 'description', 'isRequired', 'minimumCharacters', 'maximumCharacters', 'minimumLines', 'maximumLines']
} as const;

export const GetManyProjectVersionEntityResponseDtoSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProjectVersionEntity'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const ProjectFeedbackResponseEntitySchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: 'string'
        },
        version: {
            '$ref': '#/components/schemas/ProjectVersionEntity'
        },
        user: {
            '$ref': '#/components/schemas/UserEntity'
        },
        responses: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    required: ['id', 'createdAt', 'updatedAt', 'version', 'user', 'responses']
} as const;

export const ProjectVersionEntitySchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: 'string'
        },
        version: {
            type: 'string'
        },
        archive_url: {
            type: 'string'
        },
        notes_url: {
            type: 'string'
        },
        feedback_form: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ProjectTestFeedbackQuestion'
                    },
                    {
                        '$ref': '#/components/schemas/ProjectTestFeedbackQuestionCheckbox'
                    },
                    {
                        '$ref': '#/components/schemas/ProjectTestFeedbackQuestionDropdown'
                    },
                    {
                        '$ref': '#/components/schemas/ProjectTestFeedbackQuestionLinearScale'
                    },
                    {
                        '$ref': '#/components/schemas/ProjectTestFeedbackQuestionShortAnswer'
                    },
                    {
                        '$ref': '#/components/schemas/ProjectTestFeedbackQuestionParagraph'
                    }
                ]
            }
        },
        feedback_deadline: {
            format: 'date-time',
            type: 'string'
        },
        project: {
            '$ref': '#/components/schemas/ProjectEntity'
        },
        responses: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProjectFeedbackResponseEntity'
            }
        }
    },
    required: ['id', 'createdAt', 'updatedAt', 'version', 'archive_url', 'notes_url', 'feedback_form', 'feedback_deadline', 'project', 'responses']
} as const;

export const ProjectEntitySchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: 'string'
        },
        owner: {
            '$ref': '#/components/schemas/UserEntity'
        },
        editors: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UserEntity'
            }
        },
        slug: {
            type: 'string'
        },
        title: {
            type: 'string'
        },
        summary: {
            type: 'string'
        },
        body: {
            type: 'string'
        },
        visibility: {
            type: 'string',
            enum: ['DRAFT', 'PUBLISHED', 'FUTURE', 'PENDING', 'PRIVATE', 'TRASH']
        },
        thumbnail: {
            type: 'string'
        },
        versions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProjectVersionEntity'
            }
        }
    },
    required: ['id', 'createdAt', 'updatedAt', 'owner', 'editors', 'slug', 'title', 'summary', 'body', 'visibility', 'thumbnail', 'versions']
} as const;

export const IdDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        }
    },
    required: ['id']
} as const;

export const TransferOwnershipRequestDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        newUser: {
            '$ref': '#/components/schemas/IdDto'
        }
    },
    required: ['id', 'newUser']
} as const;

export const EditorRequestDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        editor: {
            '$ref': '#/components/schemas/IdDto'
        }
    },
    required: ['id', 'editor']
} as const;

export const CompetitionSubmissionDtoSchema = {
    type: 'object',
    properties: {
        file: {
            type: 'string',
            format: 'binary'
        }
    },
    required: ['file']
} as const;

export const TerminalDtoSchema = {
    type: 'object',
    properties: {}
} as const;

export const ChessMoveRequestDtoSchema = {
    type: 'object',
    properties: {
        username: {
            type: 'string'
        },
        fen: {
            type: 'string'
        }
    },
    required: ['username', 'fen']
} as const;

export const ChessMatchRequestDtoSchema = {
    type: 'object',
    properties: {
        player1username: {
            type: 'string'
        },
        player2username: {
            type: 'string'
        }
    },
    required: ['player1username', 'player2username']
} as const;

export const ChessMatchResultDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        players: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        moves: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        winner: {
            type: 'string'
        },
        draw: {
            type: 'boolean'
        },
        result: {
            type: 'string',
            enum: ['GAME_OVER', 'DRAW', 'NONE']
        },
        reason: {
            type: 'string',
            enum: ['CHECKMATE', 'STALEMATE', 'INSUFFICIENT_MATERIAL', 'FIFTY_MOVE_RULE', 'THREEFOLD_REPETITION', 'INVALID_MOVE', 'NONE']
        },
        cpuTime: {
            type: 'array',
            items: {
                type: 'number'
            }
        },
        finalFen: {
            type: 'string'
        },
        eloChange: {
            type: 'array',
            items: {
                type: 'number'
            }
        },
        elo: {
            type: 'array',
            items: {
                type: 'number'
            }
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        }
    },
    required: ['id', 'players', 'moves', 'winner', 'draw', 'result', 'reason', 'cpuTime', 'finalFen', 'eloChange', 'elo', 'createdAt']
} as const;

export const MatchSearchRequestDtoSchema = {
    type: 'object',
    properties: {
        username: {
            type: 'string'
        },
        pageSize: {
            type: 'number',
            default: 100
        },
        pageId: {
            type: 'number',
            default: 0
        }
    },
    required: ['username', 'pageSize', 'pageId']
} as const;

export const MatchSearchResponseDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: 'string'
        },
        winner: {
            type: 'string'
        },
        lastState: {
            type: 'string'
        },
        players: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    required: ['id', 'createdAt', 'updatedAt', 'winner', 'lastState', 'players']
} as const;

export const ChessLeaderboardResponseEntryDtoSchema = {
    type: 'object',
    properties: {
        username: {
            type: 'string'
        },
        elo: {
            type: 'number'
        }
    },
    required: ['username', 'elo']
} as const;

export const CompetitionRunEntitySchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: 'string'
        }
    },
    required: ['id', 'createdAt', 'updatedAt']
} as const;

export const CompetitionRunSubmissionReportEntitySchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: 'string'
        },
        winsAsP1: {
            type: 'number'
        },
        winsAsP2: {
            type: 'number'
        },
        totalWins: {
            type: 'number'
        },
        pointsAsP1: {
            type: 'number'
        },
        pointsAsP2: {
            type: 'number'
        },
        totalPoints: {
            type: 'number'
        },
        run: {
            '$ref': '#/components/schemas/CompetitionRunEntity'
        },
        submission: {
            '$ref': '#/components/schemas/CompetitionSubmissionEntity'
        },
        user: {
            '$ref': '#/components/schemas/UserEntity'
        }
    },
    required: ['id', 'createdAt', 'updatedAt', 'winsAsP1', 'winsAsP2', 'totalWins', 'pointsAsP1', 'pointsAsP2', 'totalPoints', 'run', 'submission', 'user']
} as const;