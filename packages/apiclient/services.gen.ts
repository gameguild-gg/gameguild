// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, formDataBodySerializer } from '@hey-api/client-axios';
import type { AuthControllerMagicLinkData, AuthControllerMagicLinkError, AuthControllerMagicLinkResponse, AuthControllerLocalSignWithEmailOrUsernameData, AuthControllerLocalSignWithEmailOrUsernameError, AuthControllerLocalSignWithEmailOrUsernameResponse, AuthControllerSignUpWithEmailUsernamePasswordData, AuthControllerSignUpWithEmailUsernamePasswordError, AuthControllerSignUpWithEmailUsernamePasswordResponse, AuthControllerSignInWithGoogleData, AuthControllerSignInWithGoogleError, AuthControllerSignInWithGoogleResponse, AuthControllerGetWeb3SignInChallengeData, AuthControllerGetWeb3SignInChallengeError, AuthControllerGetWeb3SignInChallengeResponse, AuthControllerValidateWeb3SignInChallengeData, AuthControllerValidateWeb3SignInChallengeError, AuthControllerValidateWeb3SignInChallengeResponse, AuthControllerGetCurrentUserError, AuthControllerGetCurrentUserResponse, AuthControllerRefreshTokenError, AuthControllerRefreshTokenResponse, AuthControllerUserExistsData, AuthControllerUserExistsError, AuthControllerUserExistsResponse, ContentControllerCreateEmptyCourseError, ContentControllerCreateEmptyCourseResponse, CreateOneBaseProjectControllerProjectEntityData, CreateOneBaseProjectControllerProjectEntityError, CreateOneBaseProjectControllerProjectEntityResponse, GetManyBaseProjectControllerProjectEntityData, GetManyBaseProjectControllerProjectEntityError, GetManyBaseProjectControllerProjectEntityResponse, UpdateOneBaseProjectControllerProjectEntityData, UpdateOneBaseProjectControllerProjectEntityError, UpdateOneBaseProjectControllerProjectEntityResponse, GetOneBaseProjectControllerProjectEntityData, GetOneBaseProjectControllerProjectEntityError, GetOneBaseProjectControllerProjectEntityResponse, DeleteOneBaseProjectControllerProjectEntityData, DeleteOneBaseProjectControllerProjectEntityError, DeleteOneBaseProjectControllerProjectEntityResponse, ProjectControllerSwitchOwnerData, ProjectControllerAddEditorData, ProjectControllerRemoveEditorData, CreateOneBaseProjectVersionControllerProjectVersionEntityData, CreateOneBaseProjectVersionControllerProjectVersionEntityError, CreateOneBaseProjectVersionControllerProjectVersionEntityResponse, GetManyBaseProjectVersionControllerProjectVersionEntityData, GetManyBaseProjectVersionControllerProjectVersionEntityError, GetManyBaseProjectVersionControllerProjectVersionEntityResponse, DeleteOneBaseProjectVersionControllerProjectVersionEntityData, DeleteOneBaseProjectVersionControllerProjectVersionEntityError, DeleteOneBaseProjectVersionControllerProjectVersionEntityResponse, GetOneBaseProjectVersionControllerProjectVersionEntityData, GetOneBaseProjectVersionControllerProjectVersionEntityError, GetOneBaseProjectVersionControllerProjectVersionEntityResponse, CompetitionControllerSubmitChessAgentData, CompetitionControllerSubmitChessAgentError, CompetitionControllerSubmitChessAgentResponse, CompetitionControllerListChessAgentsError, CompetitionControllerListChessAgentsResponse, CompetitionControllerRequestChessMoveData, CompetitionControllerRequestChessMoveError, CompetitionControllerRequestChessMoveResponse, CompetitionControllerRunChessMatchData, CompetitionControllerRunChessMatchError, CompetitionControllerRunChessMatchResponse, CompetitionControllerFindChessMatchResultData, CompetitionControllerFindChessMatchResultError, CompetitionControllerFindChessMatchResultResponse, CompetitionControllerGetChessMatchResultData, CompetitionControllerGetChessMatchResultError, CompetitionControllerGetChessMatchResultResponse, CompetitionControllerGetChessLeaderboardError, CompetitionControllerGetChessLeaderboardResponse, CompetitionControllerGetLatestChessCompetitionReportError, CompetitionControllerGetLatestChessCompetitionReportResponse } from './types.gen';

export const client = createClient(createConfig());

export const authControllerMagicLink = <ThrowOnError extends boolean = false>(options: Options<AuthControllerMagicLinkData, ThrowOnError>) => { return (options?.client ?? client).post<AuthControllerMagicLinkResponse, AuthControllerMagicLinkError, ThrowOnError>({
    ...options,
    url: '/auth/magic-link'
}); };

export const authControllerLocalSignWithEmailOrUsername = <ThrowOnError extends boolean = false>(options: Options<AuthControllerLocalSignWithEmailOrUsernameData, ThrowOnError>) => { return (options?.client ?? client).post<AuthControllerLocalSignWithEmailOrUsernameResponse, AuthControllerLocalSignWithEmailOrUsernameError, ThrowOnError>({
    ...options,
    url: '/auth/local/sign-in'
}); };

export const authControllerSignUpWithEmailUsernamePassword = <ThrowOnError extends boolean = false>(options: Options<AuthControllerSignUpWithEmailUsernamePasswordData, ThrowOnError>) => { return (options?.client ?? client).post<AuthControllerSignUpWithEmailUsernamePasswordResponse, AuthControllerSignUpWithEmailUsernamePasswordError, ThrowOnError>({
    ...options,
    url: '/auth/local/sign-up'
}); };

export const authControllerSignInWithGoogle = <ThrowOnError extends boolean = false>(options: Options<AuthControllerSignInWithGoogleData, ThrowOnError>) => { return (options?.client ?? client).get<AuthControllerSignInWithGoogleResponse, AuthControllerSignInWithGoogleError, ThrowOnError>({
    ...options,
    url: '/auth/google/callback/{token}'
}); };

export const authControllerGetWeb3SignInChallenge = <ThrowOnError extends boolean = false>(options: Options<AuthControllerGetWeb3SignInChallengeData, ThrowOnError>) => { return (options?.client ?? client).post<AuthControllerGetWeb3SignInChallengeResponse, AuthControllerGetWeb3SignInChallengeError, ThrowOnError>({
    ...options,
    url: '/auth/web3/sign-in/challenge'
}); };

export const authControllerValidateWeb3SignInChallenge = <ThrowOnError extends boolean = false>(options: Options<AuthControllerValidateWeb3SignInChallengeData, ThrowOnError>) => { return (options?.client ?? client).post<AuthControllerValidateWeb3SignInChallengeResponse, AuthControllerValidateWeb3SignInChallengeError, ThrowOnError>({
    ...options,
    url: '/auth/web3/sign-in/validate'
}); };

export const authControllerGetCurrentUser = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<AuthControllerGetCurrentUserResponse, AuthControllerGetCurrentUserError, ThrowOnError>({
    ...options,
    url: '/auth/me'
}); };

export const authControllerRefreshToken = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<AuthControllerRefreshTokenResponse, AuthControllerRefreshTokenError, ThrowOnError>({
    ...options,
    url: '/auth/refresh-token'
}); };

export const authControllerUserExists = <ThrowOnError extends boolean = false>(options: Options<AuthControllerUserExistsData, ThrowOnError>) => { return (options?.client ?? client).get<AuthControllerUserExistsResponse, AuthControllerUserExistsError, ThrowOnError>({
    ...options,
    url: '/auth/userExists/{user}'
}); };

export const contentControllerCreateEmptyCourse = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).post<ContentControllerCreateEmptyCourseResponse, ContentControllerCreateEmptyCourseError, ThrowOnError>({
    ...options,
    url: '/content/course/create'
}); };

/**
 * Create a single ProjectEntity
 */
export const createOneBaseProjectControllerProjectEntity = <ThrowOnError extends boolean = false>(options: Options<CreateOneBaseProjectControllerProjectEntityData, ThrowOnError>) => { return (options?.client ?? client).post<CreateOneBaseProjectControllerProjectEntityResponse, CreateOneBaseProjectControllerProjectEntityError, ThrowOnError>({
    ...options,
    url: '/project'
}); };

/**
 * Retrieve multiple ProjectEntities
 */
export const getManyBaseProjectControllerProjectEntity = <ThrowOnError extends boolean = false>(options?: Options<GetManyBaseProjectControllerProjectEntityData, ThrowOnError>) => { return (options?.client ?? client).get<GetManyBaseProjectControllerProjectEntityResponse, GetManyBaseProjectControllerProjectEntityError, ThrowOnError>({
    ...options,
    url: '/project'
}); };

/**
 * Update a single ProjectEntity
 */
export const updateOneBaseProjectControllerProjectEntity = <ThrowOnError extends boolean = false>(options: Options<UpdateOneBaseProjectControllerProjectEntityData, ThrowOnError>) => { return (options?.client ?? client).patch<UpdateOneBaseProjectControllerProjectEntityResponse, UpdateOneBaseProjectControllerProjectEntityError, ThrowOnError>({
    ...options,
    url: '/project/{id}'
}); };

/**
 * Retrieve a single ProjectEntity
 */
export const getOneBaseProjectControllerProjectEntity = <ThrowOnError extends boolean = false>(options: Options<GetOneBaseProjectControllerProjectEntityData, ThrowOnError>) => { return (options?.client ?? client).get<GetOneBaseProjectControllerProjectEntityResponse, GetOneBaseProjectControllerProjectEntityError, ThrowOnError>({
    ...options,
    url: '/project/{id}'
}); };

/**
 * Delete a single ProjectEntity
 */
export const deleteOneBaseProjectControllerProjectEntity = <ThrowOnError extends boolean = false>(options: Options<DeleteOneBaseProjectControllerProjectEntityData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteOneBaseProjectControllerProjectEntityResponse, DeleteOneBaseProjectControllerProjectEntityError, ThrowOnError>({
    ...options,
    url: '/project/{id}'
}); };

export const projectControllerSwitchOwner = <ThrowOnError extends boolean = false>(options: Options<ProjectControllerSwitchOwnerData, ThrowOnError>) => { return (options?.client ?? client).post<void, unknown, ThrowOnError>({
    ...options,
    url: '/project/transfer-ownership'
}); };

export const projectControllerAddEditor = <ThrowOnError extends boolean = false>(options: Options<ProjectControllerAddEditorData, ThrowOnError>) => { return (options?.client ?? client).post<void, unknown, ThrowOnError>({
    ...options,
    url: '/project/add-editor'
}); };

export const projectControllerRemoveEditor = <ThrowOnError extends boolean = false>(options: Options<ProjectControllerRemoveEditorData, ThrowOnError>) => { return (options?.client ?? client).post<void, unknown, ThrowOnError>({
    ...options,
    url: '/project/remove-editor'
}); };

/**
 * Create a single ProjectVersionEntity
 */
export const createOneBaseProjectVersionControllerProjectVersionEntity = <ThrowOnError extends boolean = false>(options: Options<CreateOneBaseProjectVersionControllerProjectVersionEntityData, ThrowOnError>) => { return (options?.client ?? client).post<CreateOneBaseProjectVersionControllerProjectVersionEntityResponse, CreateOneBaseProjectVersionControllerProjectVersionEntityError, ThrowOnError>({
    ...options,
    url: '/project-version'
}); };

/**
 * Retrieve multiple ProjectVersionEntities
 */
export const getManyBaseProjectVersionControllerProjectVersionEntity = <ThrowOnError extends boolean = false>(options?: Options<GetManyBaseProjectVersionControllerProjectVersionEntityData, ThrowOnError>) => { return (options?.client ?? client).get<GetManyBaseProjectVersionControllerProjectVersionEntityResponse, GetManyBaseProjectVersionControllerProjectVersionEntityError, ThrowOnError>({
    ...options,
    url: '/project-version'
}); };

/**
 * Delete a single ProjectVersionEntity
 */
export const deleteOneBaseProjectVersionControllerProjectVersionEntity = <ThrowOnError extends boolean = false>(options: Options<DeleteOneBaseProjectVersionControllerProjectVersionEntityData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteOneBaseProjectVersionControllerProjectVersionEntityResponse, DeleteOneBaseProjectVersionControllerProjectVersionEntityError, ThrowOnError>({
    ...options,
    url: '/project-version/{id}'
}); };

/**
 * Retrieve a single ProjectVersionEntity
 */
export const getOneBaseProjectVersionControllerProjectVersionEntity = <ThrowOnError extends boolean = false>(options: Options<GetOneBaseProjectVersionControllerProjectVersionEntityData, ThrowOnError>) => { return (options?.client ?? client).get<GetOneBaseProjectVersionControllerProjectVersionEntityResponse, GetOneBaseProjectVersionControllerProjectVersionEntityError, ThrowOnError>({
    ...options,
    url: '/project-version/{id}'
}); };

export const competitionControllerSubmitChessAgent = <ThrowOnError extends boolean = false>(options: Options<CompetitionControllerSubmitChessAgentData, ThrowOnError>) => { return (options?.client ?? client).post<CompetitionControllerSubmitChessAgentResponse, CompetitionControllerSubmitChessAgentError, ThrowOnError>({
    ...options,
    ...formDataBodySerializer,
    headers: {
        'Content-Type': null
    },
    url: '/Competitions/Chess/submit'
}); };

export const competitionControllerListChessAgents = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<CompetitionControllerListChessAgentsResponse, CompetitionControllerListChessAgentsError, ThrowOnError>({
    ...options,
    url: '/Competitions/Chess/ListAgents'
}); };

export const competitionControllerRequestChessMove = <ThrowOnError extends boolean = false>(options: Options<CompetitionControllerRequestChessMoveData, ThrowOnError>) => { return (options?.client ?? client).post<CompetitionControllerRequestChessMoveResponse, CompetitionControllerRequestChessMoveError, ThrowOnError>({
    ...options,
    url: '/Competitions/Chess/Move'
}); };

export const competitionControllerRunChessMatch = <ThrowOnError extends boolean = false>(options: Options<CompetitionControllerRunChessMatchData, ThrowOnError>) => { return (options?.client ?? client).post<CompetitionControllerRunChessMatchResponse, CompetitionControllerRunChessMatchError, ThrowOnError>({
    ...options,
    url: '/Competitions/Chess/RunMatch'
}); };

export const competitionControllerFindChessMatchResult = <ThrowOnError extends boolean = false>(options: Options<CompetitionControllerFindChessMatchResultData, ThrowOnError>) => { return (options?.client ?? client).post<CompetitionControllerFindChessMatchResultResponse, CompetitionControllerFindChessMatchResultError, ThrowOnError>({
    ...options,
    url: '/Competitions/Chess/FindMatches'
}); };

export const competitionControllerGetChessMatchResult = <ThrowOnError extends boolean = false>(options: Options<CompetitionControllerGetChessMatchResultData, ThrowOnError>) => { return (options?.client ?? client).get<CompetitionControllerGetChessMatchResultResponse, CompetitionControllerGetChessMatchResultError, ThrowOnError>({
    ...options,
    url: '/Competitions/Chess/Match/{id}'
}); };

export const competitionControllerGetChessLeaderboard = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<CompetitionControllerGetChessLeaderboardResponse, CompetitionControllerGetChessLeaderboardError, ThrowOnError>({
    ...options,
    url: '/Competitions/Chess/Leaderboard'
}); };

export const competitionControllerRunCompetition = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<void, unknown, ThrowOnError>({
    ...options,
    url: '/Competitions/Chess/RunCompetition'
}); };

export const competitionControllerGetLatestChessCompetitionReport = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<CompetitionControllerGetLatestChessCompetitionReportResponse, CompetitionControllerGetLatestChessCompetitionReportError, ThrowOnError>({
    ...options,
    url: '/Competitions/Chess/LatestCompetitionReport'
}); };