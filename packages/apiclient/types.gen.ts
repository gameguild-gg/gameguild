// This file is auto-generated by @hey-api/openapi-ts

export type EmailDto = {
    email: string;
};

export type OkDto = {
    success: boolean;
    message: string;
};

export type LocalSignInDto = {
    email: string;
    password: string;
    username: string;
};

export type LocalSignUpDto = {
    username: string;
    email: string;
    password: string;
};

export type UserProfileEntity = {
    id: string;
    createdAt: string;
    updatedAt: string;
    user: UserEntity;
    bio: string;
    name: string;
    givenName: string;
    familyName: string;
    picture: string;
};

export type CompetitionSubmissionEntity = {
    id: string;
    createdAt: string;
    updatedAt: string;
};

export type PostEntity = {
    id: string;
    createdAt: string;
    updatedAt: string;
    owner: UserEntity;
    editors: Array<UserEntity>;
    slug: string;
    title: string;
    summary: string;
    body: string;
    visibility: 'DRAFT' | 'PUBLISHED' | 'FUTURE' | 'PENDING' | 'PRIVATE' | 'TRASH';
    thumbnail: string;
};

export type visibility = 'DRAFT' | 'PUBLISHED' | 'FUTURE' | 'PENDING' | 'PRIVATE' | 'TRASH';

export type LectureEntity = {
    id: string;
    createdAt: string;
    updatedAt: string;
    owner: UserEntity;
    editors: Array<UserEntity>;
    slug: string;
    title: string;
    summary: string;
    body: string;
    visibility: 'DRAFT' | 'PUBLISHED' | 'FUTURE' | 'PENDING' | 'PRIVATE' | 'TRASH';
    thumbnail: string;
    order: number;
    course: CourseEntity;
    chapter: CourseEntity;
};

export type ChapterEntity = {
    id: string;
    createdAt: string;
    updatedAt: string;
    owner: UserEntity;
    editors: Array<UserEntity>;
    slug: string;
    title: string;
    summary: string;
    body: string;
    visibility: 'DRAFT' | 'PUBLISHED' | 'FUTURE' | 'PENDING' | 'PRIVATE' | 'TRASH';
    thumbnail: string;
    order: number;
    course: CourseEntity;
    lectures: Array<LectureEntity>;
};

export type CourseEntity = {
    id: string;
    createdAt: string;
    updatedAt: string;
    owner: UserEntity;
    editors: Array<UserEntity>;
    slug: string;
    title: string;
    summary: string;
    body: string;
    visibility: 'DRAFT' | 'PUBLISHED' | 'FUTURE' | 'PENDING' | 'PRIVATE' | 'TRASH';
    thumbnail: string;
    price: number;
    subscriptionAccess: boolean;
    author: UserEntity;
    lectures: Array<LectureEntity>;
    chapters: Array<ChapterEntity>;
};

export type UserEntity = {
    id: string;
    createdAt: string;
    updatedAt: string;
    username: string;
    email: string;
    emailVerified: boolean;
    passwordHash: string;
    passwordSalt: string;
    facebookId: string;
    googleId: string;
    githubId: string;
    appleId: string;
    linkedinId: string;
    twitterId: string;
    walletAddress: string;
    profile: UserProfileEntity;
    competitionSubmissions: Array<CompetitionSubmissionEntity>;
    elo: number;
    posts: Array<PostEntity>;
    courses: Array<CourseEntity>;
};

export type LocalSignInResponseDto = {
    accessToken: string;
    refreshToken: string;
    user: UserEntity;
};

export type EthereumSigninChallengeRequestDto = {
    address: string;
};

export type EthereumSigninChallengeResponseDto = {
    message: string;
};

export type EthereumSigninValidateRequestDto = {
    address: string;
    signature: string;
};

export type GetManyProjectEntityResponseDto = {
    data: Array<ProjectEntity>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type ProjectTestFeedbackQuestion = {
    type: 'SHORT_ANSWER' | 'PARAGRAPH' | 'CHECKBOX' | 'DROPDOWN' | 'LINEAR_SCALE';
    description: string;
    isRequired: boolean;
};

export type type = 'SHORT_ANSWER' | 'PARAGRAPH' | 'CHECKBOX' | 'DROPDOWN' | 'LINEAR_SCALE';

export type ProjectTestFeedbackQuestionCheckbox = {
    type: 'SHORT_ANSWER' | 'PARAGRAPH' | 'CHECKBOX' | 'DROPDOWN' | 'LINEAR_SCALE';
    description: string;
    isRequired: boolean;
    options: Array<(string)>;
};

export type ProjectTestFeedbackQuestionDropdown = {
    type: 'SHORT_ANSWER' | 'PARAGRAPH' | 'CHECKBOX' | 'DROPDOWN' | 'LINEAR_SCALE';
    description: string;
    isRequired: boolean;
    options: Array<(string)>;
};

export type ProjectTestFeedbackQuestionLinearScale = {
    type: 'SHORT_ANSWER' | 'PARAGRAPH' | 'CHECKBOX' | 'DROPDOWN' | 'LINEAR_SCALE';
    description: string;
    isRequired: boolean;
    minimum: number;
    maximum: number;
    steps: number;
};

export type ProjectTestFeedbackQuestionShortAnswer = {
    type: 'SHORT_ANSWER' | 'PARAGRAPH' | 'CHECKBOX' | 'DROPDOWN' | 'LINEAR_SCALE';
    description: string;
    isRequired: boolean;
    minimumCharacters: number;
    maximumCharacters: number;
};

export type ProjectTestFeedbackQuestionParagraph = {
    type: 'SHORT_ANSWER' | 'PARAGRAPH' | 'CHECKBOX' | 'DROPDOWN' | 'LINEAR_SCALE';
    description: string;
    isRequired: boolean;
    minimumCharacters: number;
    maximumCharacters: number;
    minimumLines: number;
    maximumLines: number;
};

export type GetManyProjectVersionEntityResponseDto = {
    data: Array<ProjectVersionEntity>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type ProjectFeedbackResponseEntity = {
    id: string;
    createdAt: string;
    updatedAt: string;
    version: ProjectVersionEntity;
    user: UserEntity;
    responses: Array<(string)>;
};

export type ProjectVersionEntity = {
    id: string;
    createdAt: string;
    updatedAt: string;
    version: string;
    archive_url: string;
    notes_url: string;
    feedback_form: Array<(ProjectTestFeedbackQuestion | ProjectTestFeedbackQuestionCheckbox | ProjectTestFeedbackQuestionDropdown | ProjectTestFeedbackQuestionLinearScale | ProjectTestFeedbackQuestionShortAnswer | ProjectTestFeedbackQuestionParagraph)>;
    feedback_deadline: string;
    project: ProjectEntity;
    responses: Array<ProjectFeedbackResponseEntity>;
};

export type ProjectEntity = {
    id: string;
    createdAt: string;
    updatedAt: string;
    owner: UserEntity;
    editors: Array<UserEntity>;
    slug: string;
    title: string;
    summary: string;
    body: string;
    visibility: 'DRAFT' | 'PUBLISHED' | 'FUTURE' | 'PENDING' | 'PRIVATE' | 'TRASH';
    thumbnail: string;
    versions: Array<ProjectVersionEntity>;
};

export type IdDto = {
    id: string;
};

export type TransferOwnershipRequestDto = {
    id: string;
    newUser: IdDto;
};

export type EditorRequestDto = {
    id: string;
    editor: IdDto;
};

export type CompetitionSubmissionDto = {
    file: (Blob | File);
};

export type TerminalDto = {
    [key: string]: unknown;
};

export type ChessMoveRequestDto = {
    username: string;
    fen: string;
};

export type ChessMatchRequestDto = {
    player1username: string;
    player2username: string;
};

export type ChessMatchResultDto = {
    id: string;
    players: Array<(string)>;
    moves: Array<(string)>;
    winner: string;
    draw: boolean;
    result: 'GAME_OVER' | 'DRAW' | 'NONE';
    reason: 'CHECKMATE' | 'STALEMATE' | 'INSUFFICIENT_MATERIAL' | 'FIFTY_MOVE_RULE' | 'THREEFOLD_REPETITION' | 'INVALID_MOVE' | 'NONE';
    cpuTime: Array<(number)>;
    finalFen: string;
    eloChange: Array<(number)>;
    elo: Array<(number)>;
    createdAt: string;
};

export type result = 'GAME_OVER' | 'DRAW' | 'NONE';

export type reason = 'CHECKMATE' | 'STALEMATE' | 'INSUFFICIENT_MATERIAL' | 'FIFTY_MOVE_RULE' | 'THREEFOLD_REPETITION' | 'INVALID_MOVE' | 'NONE';

export type MatchSearchRequestDto = {
    username: string;
    pageSize: number;
    pageId: number;
};

export type MatchSearchResponseDto = {
    id: string;
    createdAt: string;
    updatedAt: string;
    winner: string;
    lastState: string;
    players: Array<(string)>;
};

export type ChessLeaderboardResponseEntryDto = {
    username: string;
    elo: number;
};

export type CompetitionRunEntity = {
    id: string;
    createdAt: string;
    updatedAt: string;
};

export type CompetitionRunSubmissionReportEntity = {
    id: string;
    createdAt: string;
    updatedAt: string;
    winsAsP1: number;
    winsAsP2: number;
    totalWins: number;
    pointsAsP1: number;
    pointsAsP2: number;
    totalPoints: number;
    run: CompetitionRunEntity;
    submission: CompetitionSubmissionEntity;
    user: UserEntity;
};

export type AuthControllerMagicLinkData = {
    body: EmailDto;
};

export type AuthControllerMagicLinkResponse = (OkDto);

export type AuthControllerMagicLinkError = unknown;

export type AuthControllerLocalSignWithEmailOrUsernameData = {
    body: LocalSignInDto;
};

export type AuthControllerLocalSignWithEmailOrUsernameResponse = (unknown);

export type AuthControllerLocalSignWithEmailOrUsernameError = unknown;

export type AuthControllerSignUpWithEmailUsernamePasswordData = {
    body: LocalSignUpDto;
};

export type AuthControllerSignUpWithEmailUsernamePasswordResponse = (LocalSignInResponseDto);

export type AuthControllerSignUpWithEmailUsernamePasswordError = unknown;

export type AuthControllerSignInWithGoogleData = {
    path: {
        token: string;
    };
};

export type AuthControllerSignInWithGoogleResponse = (LocalSignInResponseDto);

export type AuthControllerSignInWithGoogleError = unknown;

export type AuthControllerGetWeb3SignInChallengeData = {
    body: EthereumSigninChallengeRequestDto;
};

export type AuthControllerGetWeb3SignInChallengeResponse = (EthereumSigninChallengeResponseDto);

export type AuthControllerGetWeb3SignInChallengeError = unknown;

export type AuthControllerValidateWeb3SignInChallengeData = {
    body: EthereumSigninValidateRequestDto;
};

export type AuthControllerValidateWeb3SignInChallengeResponse = (LocalSignInResponseDto);

export type AuthControllerValidateWeb3SignInChallengeError = unknown;

export type AuthControllerGetCurrentUserResponse = (UserEntity);

export type AuthControllerGetCurrentUserError = (unknown);

export type AuthControllerRefreshTokenResponse = (LocalSignInResponseDto);

export type AuthControllerRefreshTokenError = (unknown);

export type AuthControllerUserExistsData = {
    path: {
        user: string;
    };
};

export type AuthControllerUserExistsResponse = (unknown);

export type AuthControllerUserExistsError = unknown;

export type ContentControllerCreateEmptyCourseResponse = (CourseEntity);

export type ContentControllerCreateEmptyCourseError = (unknown);

export type CreateOneBaseProjectControllerProjectEntityData = {
    body: ProjectEntity;
};

export type CreateOneBaseProjectControllerProjectEntityResponse = (ProjectEntity);

export type CreateOneBaseProjectControllerProjectEntityError = (unknown);

export type GetManyBaseProjectControllerProjectEntityData = {
    query?: {
        /**
         * Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a>
         */
        cache?: number;
        /**
         * Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a>
         */
        fields?: Array<(string)>;
        /**
         * Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a>
         */
        filter?: Array<(string)>;
        /**
         * Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a>
         */
        join?: Array<(string)>;
        /**
         * Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a>
         */
        limit?: number;
        /**
         * Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a>
         */
        offset?: number;
        /**
         * Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a>
         */
        or?: Array<(string)>;
        /**
         * Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a>
         */
        page?: number;
        /**
         * Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a>
         */
        s?: string;
        /**
         * Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a>
         */
        sort?: Array<(string)>;
    };
};

export type GetManyBaseProjectControllerProjectEntityResponse = ((GetManyProjectEntityResponseDto | Array<ProjectEntity>));

export type GetManyBaseProjectControllerProjectEntityError = (unknown);

export type UpdateOneBaseProjectControllerProjectEntityData = {
    body: ProjectEntity;
    path: {
        id: string;
    };
};

export type UpdateOneBaseProjectControllerProjectEntityResponse = (ProjectEntity);

export type UpdateOneBaseProjectControllerProjectEntityError = (unknown);

export type GetOneBaseProjectControllerProjectEntityData = {
    path: {
        id: string;
    };
    query?: {
        /**
         * Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a>
         */
        cache?: number;
        /**
         * Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a>
         */
        fields?: Array<(string)>;
        /**
         * Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a>
         */
        join?: Array<(string)>;
    };
};

export type GetOneBaseProjectControllerProjectEntityResponse = (ProjectEntity);

export type GetOneBaseProjectControllerProjectEntityError = (unknown);

export type DeleteOneBaseProjectControllerProjectEntityData = {
    path: {
        id: string;
    };
};

export type DeleteOneBaseProjectControllerProjectEntityResponse = (unknown);

export type DeleteOneBaseProjectControllerProjectEntityError = (unknown);

export type ProjectControllerSwitchOwnerData = {
    body: TransferOwnershipRequestDto;
};

export type ProjectControllerAddEditorData = {
    body: EditorRequestDto;
};

export type ProjectControllerRemoveEditorData = {
    body: EditorRequestDto;
};

export type CreateOneBaseProjectVersionControllerProjectVersionEntityData = {
    body: ProjectVersionEntity;
};

export type CreateOneBaseProjectVersionControllerProjectVersionEntityResponse = (ProjectVersionEntity);

export type CreateOneBaseProjectVersionControllerProjectVersionEntityError = (unknown);

export type GetManyBaseProjectVersionControllerProjectVersionEntityData = {
    query?: {
        /**
         * Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a>
         */
        cache?: number;
        /**
         * Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a>
         */
        fields?: Array<(string)>;
        /**
         * Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a>
         */
        filter?: Array<(string)>;
        /**
         * Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a>
         */
        join?: Array<(string)>;
        /**
         * Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a>
         */
        limit?: number;
        /**
         * Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a>
         */
        offset?: number;
        /**
         * Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a>
         */
        or?: Array<(string)>;
        /**
         * Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a>
         */
        page?: number;
        /**
         * Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a>
         */
        s?: string;
        /**
         * Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a>
         */
        sort?: Array<(string)>;
    };
};

export type GetManyBaseProjectVersionControllerProjectVersionEntityResponse = ((GetManyProjectVersionEntityResponseDto | Array<ProjectVersionEntity>));

export type GetManyBaseProjectVersionControllerProjectVersionEntityError = (unknown);

export type DeleteOneBaseProjectVersionControllerProjectVersionEntityData = {
    path: {
        id: string;
    };
};

export type DeleteOneBaseProjectVersionControllerProjectVersionEntityResponse = (unknown);

export type DeleteOneBaseProjectVersionControllerProjectVersionEntityError = (unknown);

export type GetOneBaseProjectVersionControllerProjectVersionEntityData = {
    path: {
        id: string;
    };
    query?: {
        /**
         * Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a>
         */
        cache?: number;
        /**
         * Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a>
         */
        fields?: Array<(string)>;
        /**
         * Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a>
         */
        join?: Array<(string)>;
    };
};

export type GetOneBaseProjectVersionControllerProjectVersionEntityResponse = (ProjectVersionEntity);

export type GetOneBaseProjectVersionControllerProjectVersionEntityError = (unknown);

export type CompetitionControllerSubmitChessAgentData = {
    body: CompetitionSubmissionDto;
};

export type CompetitionControllerSubmitChessAgentResponse = (Array<TerminalDto>);

export type CompetitionControllerSubmitChessAgentError = (unknown);

export type CompetitionControllerListChessAgentsResponse = (Array<(string)>);

export type CompetitionControllerListChessAgentsError = (unknown);

export type CompetitionControllerRequestChessMoveData = {
    body: ChessMoveRequestDto;
};

export type CompetitionControllerRequestChessMoveResponse = (string);

export type CompetitionControllerRequestChessMoveError = (unknown);

export type CompetitionControllerRunChessMatchData = {
    body: ChessMatchRequestDto;
};

export type CompetitionControllerRunChessMatchResponse = (ChessMatchResultDto);

export type CompetitionControllerRunChessMatchError = (unknown);

export type CompetitionControllerFindChessMatchResultData = {
    body: MatchSearchRequestDto;
};

export type CompetitionControllerFindChessMatchResultResponse = (Array<MatchSearchResponseDto>);

export type CompetitionControllerFindChessMatchResultError = (unknown);

export type CompetitionControllerGetChessMatchResultData = {
    path: {
        id: string;
    };
};

export type CompetitionControllerGetChessMatchResultResponse = (ChessMatchResultDto);

export type CompetitionControllerGetChessMatchResultError = (unknown);

export type CompetitionControllerGetChessLeaderboardResponse = (Array<ChessLeaderboardResponseEntryDto>);

export type CompetitionControllerGetChessLeaderboardError = (unknown);

export type CompetitionControllerGetLatestChessCompetitionReportResponse = (Array<CompetitionRunSubmissionReportEntity>);

export type CompetitionControllerGetLatestChessCompetitionReportError = (unknown);