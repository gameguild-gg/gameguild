name: game-guild

networks:
  game-guild-network:
    name: game-guild-network

services:
  api:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
    container_name: game-guild-api
    image: game-guild-api
    restart: always
    ports:
      - '${API_PORT:-5000}:5000'
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=postgres
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
    depends_on:
      - postgres
    links:
      - postgres
    networks:
      - game-guild-network

  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    image: game-guild-web
    container_name: game-guild-web
    restart: always
    ports:
      - '${WEB_PORT:-3000}:3000'
    depends_on:
      - api
    networks:
      - game-guild-network

  db:
    image: postgres
    container_name: game-guild-postgres
    restart: always
    ports:
      - '${DB_PORT:-5432}:5432'
    environment:
      POSTGRES_DB: ${DB_DATABASE:-modustate}
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      TZ: ${DB_TIMEZONE:-UTC}
      PGTZ: ${DB_TIMEZONE:-UTC}
    volumes:
      # - ./scripts/database:/docker-entrypoint-initdb.d
      - postgres:/var/lib/postgresql/data
    networks:
      - game-guild-network

#  minio:
#    image: minio/minio
#    container_name: minio
#    restart: always
#    ports:
#      - "9000:9000"
#      - "9090:9090"
#    environment:
#      MINIO_ROOT_USER: minio-user
#      MINIO_ROOT_PASSWORD: minio-password
#      MINIO_UPDATE: off
#    entrypoint: >
#      /bin/sh -c '
#        isAlive() { curl -sf http://127.0.0.1:9000/minio/health/live; }    # check if Minio is alive
#        minio $0 "$@" --quiet & echo $! > /tmp/minio.pid                   # start Minio in the background
#        while ! isAlive; do sleep 0.1; done                                # wait until Minio is alive
#        mc alias set minio http://127.0.0.1:9000 minio-user minio-password # setup Minio client
#        mc mb minio/gameguild || true                                      # create a test bucket
#        mc anonymous set public minio/gameguild                            # make the test bucket public
#        mc admin accesskey create minio/ --access-key minio --secret-key minio-password # create access token
#        kill -s INT $(cat /tmp/minio.pid) && rm /tmp/minio.pid             # stop Minio
#        while isAlive; do sleep 0.1; done                                  # wait until Minio is stopped
#        exec minio $0 "$@"                                                 # start Minio in the foreground
#      '
#    command: server /data --json --console-address ":9090"
#    volumes:
#      - minio-data:/data
#    healthcheck:
#      test: [ 'CMD', 'curl', '-f', 'http://127.0.0.1:9000/minio/health/live' ]
#      interval: 10s
#      start_period: 10s
#    #      start_interval: 1s
#    security_opt: [ 'no-new-privileges:true' ]

#  adminer:
#    image: adminer
#    restart: always
#    ports:
#      - 8081:8080
#    depends_on:
#      - postgres
#    networks:
#      - game-guild-network

volumes:
  #  minio-data:
  #    driver: local
  postgres:
    name: game-guild-postgres
    driver: local
