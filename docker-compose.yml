name: game-guild

networks:
  game-guild-network:
    name: game-guild-network

services:
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: game-guild-api
    image: game-guild-api
    restart: always
    ports:
      - '${API_PORT:-5000}:5000'
    environment:
      # Database Configuration (PostgreSQL connection string format)
      - DB_CONNECTION_STRING=Host=postgres;Port=5432;Database=gameguild;Username=postgres;Password=postgres123;
      
      # Application Environment
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:5000
      
      # JWT Configuration (ASP.NET Core format with double underscores)
      - Jwt__SecretKey=game-guild-production-jwt-secret-key-must-be-at-least-32-characters-long-and-secure
      - Jwt__Issuer=GameGuild.API
      - Jwt__Audience=GameGuild.Users
      - Jwt__ExpirationMinutes=15
      - Jwt__RefreshTokenExpirationDays=7
      
      # OAuth Configuration (set these for production)
      - GITHUB_CLIENT_ID=
      - GITHUB_CLIENT_SECRET=
      - GOOGLE_CLIENT_ID=
      - GOOGLE_CLIENT_SECRET=
      
      # CORS Configuration (ASP.NET Core format with double underscores)
      - Cors__AllowedOrigins__0=http://localhost:3000
      - Cors__AllowedOrigins__1=http://localhost:5173
      - Cors__AllowedOrigins__2=https://yourdomain.com
      - Cors__AllowCredentials=true
      
      # Logging Configuration
      - LOGGING_LEVEL=Information
      
      # Additional API Configuration
      - DOCUMENTATION_ENABLED=true
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - game-guild-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    image: game-guild-web
    container_name: game-guild-web
    restart: always
    ports:
      - '${WEB_PORT:-3000}:3000'
    environment:
      # Next.js API Configuration (NEXT_PUBLIC_ vars are used by browser, others by server)
      - NEXT_PUBLIC_API_BASE_URL=http://localhost:5000
      - API_URL=http://api:5000
      - BACKEND_URL=http://api:5000
      - NEXT_PUBLIC_API_URL=http://localhost:5000
      - NEXT_PUBLIC_WEB_URL=http://localhost:3000
      - WEB_URL=http://localhost:3000
      
      # NextAuth Configuration
      - NEXTAUTH_SECRET=nextauth-production-secret-key-change-this-for-production-use
      - NEXTAUTH_URL=http://localhost:3000
      - AUTH_TRUST_HOST=true
      - NEXTAUTH_URL_INTERNAL=http://localhost:3000
      
      # Ghost CMS Configuration (optional)
      - GHOST_ADMIN_DOMAIN=gameguild.gg
      - GHOST_CONTENT_API_KEY=08d94ec90b24258a9cf39bbd0f
      
      # Google Services (set these for production)
      - GOOGLE_ANALYTICS_MEASUREMENT_ID=
      - GOOGLE_CLIENT_ID=
      - GOOGLE_CLIENT_SECRET=
      - GOOGLE_TAG_MANAGER_ID=
      
      # IPFS Configuration (optional)
      - IPFS_KEY=
      
      # Development Tools
      - REACT_EDITOR=vscode
      - GITHUB_TOKEN=
      
      # Node.js Environment
      - NODE_ENV=production
      - NODE_OPTIONS=--dns-result-order=ipv4first
    depends_on:
      api:
        condition: service_healthy
    networks:
      game-guild-network:
        aliases:
          - web
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: game-guild-postgres
    restart: always
    ports:
      - '5432:5432'
    environment:
      # PostgreSQL Configuration
      POSTGRES_DB: gameguild
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_INITDB_ARGS: --auth-host=scram-sha-256
      
      # Timezone Configuration
      TZ: UTC
      PGTZ: UTC
      
      # Performance Tuning
      POSTGRES_SHARED_PRELOAD_LIBRARIES: ""
      POSTGRES_MAX_CONNECTIONS: 100
      POSTGRES_SHARED_BUFFERS: 128MB
      POSTGRES_WORK_MEM: 4MB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
    volumes:
      # Database persistence
      - postgres_data:/var/lib/postgresql/data
      # Optional: Custom initialization scripts
      # - ./scripts/database:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d gameguild"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - game-guild-network

#  minio:
#    image: minio/minio
#    container_name: minio
#    restart: always
#    ports:
#      - "9000:9000"
#      - "9090:9090"
#    environment:
#      MINIO_ROOT_USER: minio-user
#      MINIO_ROOT_PASSWORD: minio-password
#      MINIO_UPDATE: off
#    entrypoint: >
#      /bin/sh -c '
#        isAlive() { curl -sf http://127.0.0.1:9000/minio/health/live; }    # check if Minio is alive
#        minio $0 "$@" --quiet & echo $! > /tmp/minio.pid                   # start Minio in the background
#        while ! isAlive; do sleep 0.1; done                                # wait until Minio is alive
#        mc alias set minio http://127.0.0.1:9000 minio-user minio-password # setup Minio client
#        mc mb minio/gameguild || true                                      # create a test bucket
#        mc anonymous set public minio/gameguild                            # make the test bucket public
#        mc admin accesskey create minio/ --access-key minio --secret-key minio-password # create access token
#        kill -s INT $(cat /tmp/minio.pid) && rm /tmp/minio.pid             # stop Minio
#        while isAlive; do sleep 0.1; done                                  # wait until Minio is stopped
#        exec minio $0 "$@"                                                 # start Minio in the foreground
#      '
#    command: server /data --json --console-address ":9090"
#    volumes:
#      - minio-data:/data
#    healthcheck:
#      test: [ 'CMD', 'curl', '-f', 'http://127.0.0.1:9000/minio/health/live' ]
#      interval: 10s
#      start_period: 10s
#    #      start_interval: 1s
#    security_opt: [ 'no-new-privileges:true' ]

#  adminer:
#    image: adminer
#    restart: always
#    ports:
#      - 8081:8080
#    depends_on:
#      - postgres
#    networks:
#      - game-guild-network

  # Database Administration (optional - uncomment to enable)
  # adminer:
  #   image: adminer:4.8.1
  #   container_name: game-guild-adminer
  #   restart: always
  #   ports:
  #     - '8080:8080'
  #   environment:
  #     ADMINER_DEFAULT_SERVER: postgres
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - game-guild-network

volumes:
  postgres_data:
    name: game-guild-postgres-data
    driver: local
