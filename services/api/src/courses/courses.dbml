Enum visibility {
  draft
  published
  archived
}

Enum certificate_status {
  active
  expired
  revoked
  pending
}

Enum verification_method {
  code
  blockchain
  both
}

Table users {
  id int [pk, increment]
  email varchar [unique]
  username varchar [unique]
  full_name varchar
  avatar varchar [null]
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
}

Table products {
  id int [pk, increment]
  title varchar
  description text
  thumbnail varchar [null]
  type product_type [default: 'course']
  is_bundle bool [default: false]
  bundle_items jsonb [null, note: 'Array of product IDs included in the bundle']
  metadata jsonb [note: 'Product type specific data']
  referral_commission_percentage decimal [default: 30, note: 'Default 30% commission for referrals']
  max_affiliate_discount decimal [default: 0, note: 'Maximum % discount affiliate can offer, 0 means no affiliate allowed']
  affiliate_commission_percentage decimal [default: 30, note: 'Commission % from remaining value after discount']
  visibility visibility [default: 'draft']
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]

  indexes {
    (type)
    (is_bundle)
    (visibility)
  }
}

Table courses {
  id int [pk, increment]
  slug varchar
  summary text
  body jsonb
  tenancy_domains jsonb [null] // array of allowed email domains, null if not tenancy-fenced
  late_penalty_percent_per_day float [default: 0] // Percentage penalty for late submissions (0-100)
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]

  indexes {
    (slug) [unique]  // For course URL lookups
    (created_at)  // For sorting courses by creation date
    (tenancy_domains) // For filtering courses by allowed domains
  }
}

// Certificate configuration for courses
Table course_certificate_settings {
  id int [pk, increment]
  course_id int [ref: > courses.id]
  html_template text [note: 'HTML template for certificate generation']
  css_styles text [note: 'CSS styles for certificate template']
  auto_issue bool [default: true]
  minimum_grade float [default: 70]
  completion_percentage int [default: 100]
  expiration_months int [null]
  verification_method verification_method [default: 'code']
  prerequisites jsonb [null, note: 'Required achievements/courses before certificate can be issued']
  metadata jsonb [null]
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]

  indexes {
    (course_id)
  }
}

// Issued certificates
Table certificates {
  id int [pk, increment]
  course_id int [ref: > courses.id]
  user_id int [ref: > user_wallets.id]
  course_user_id int [ref: > course_users.id]
  course_certificate_settings_id int [ref: > course_certificate_settings.id]
  certificate_number varchar [unique]
  status certificate_status [default: 'active']
  issued_at timestamp [default: `now()`]
  expires_at timestamp [null]
  revoked_at timestamp [null]
  revocation_reason text [null]
  final_grade float [null]
  completion_date timestamp
  metadata jsonb [null]
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]

  indexes {
    (course_id, user_id)
    (certificate_number)
    (issued_at)
    (status)
  }
}

// Optional blockchain anchoring for certificates
Table certificate_blockchain_anchors {
  id int [pk, increment]
  certificate_id int [ref: > certificates.id]
  blockchain_network varchar
  transaction_hash varchar
  block_number bigint
  anchored_at timestamp
  metadata jsonb [null]
  created_at timestamp [default: `now()`]

  indexes {
    (certificate_id)
    (transaction_hash)
  }
}

// Junction table for products-courses many-to-many relationship
Table product_courses {
  product_id int [ref: > products.id]
  course_id int [ref: > courses.id]
  is_primary bool [default: false, note: 'True if this is the main product for this course']
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]

  indexes {
    (product_id, course_id) [pk]
    (course_id, is_primary)
  }
}

Table course_pages {
  id int [pk, increment]
  course_id int [ref: > courses.id]
  parent_id int [ref: > course_pages.id, null]  // Self-referential for hierarchical structure
  title varchar
  summary text [null]
  order float
  body jsonb
  previewable bool [default: false] // Flag to indicate if this page can be accessed without purchasing the course
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]

  indexes {
    (course_id) // For getting all pages in a course
    (course_id, order) // For efficiently retrieving ordered pages in a course
    (parent_id) // For getting all child pages
    (parent_id, order) // For ordered pages within a parent
    (previewable) // For quickly finding preview content
    (updated_at) // For finding recently updated pages
    (parent_id, previewable) // For finding preview content under a parent
  }
}

Table assignments {
  id int [pk, increment]
  course_id int [ref: > courses.id]
  parent_id int [ref: > course_pages.id, null]  // Optional parent course page
  title varchar
  order float
  body jsonb
  due_date timestamp [null]
  available_from timestamp [null]
  available_to timestamp [null]
  text_response bool [default: false]
  url_response bool [default: false]
  file_response_extensions jsonb [null] // null: not accepted, []: any file, ["pdf","docx"]: only these extensions
  grading_method grading_method
  grading_rubric jsonb [null] // configuration for grading rubric
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]

  indexes {
    (course_id) // For getting all assignments in a course
    (course_id, order) // For ordered assignment retrieval in a course
    (parent_id) // For getting all assignments under a course page
    (parent_id, order) // For ordered assignment retrieval under a course page
    (due_date) // For finding upcoming/overdue assignments
    (available_from, available_to) // For finding currently available assignments
    (grading_method) // For finding assignments by grading method
  }
}

Enum grading_method {
  instructor
  peer
  ai
  automated_tests
}

Table quizzes {
  id int [pk, increment]
  course_id int [ref: > courses.id]
  parent_id int [ref: > course_pages.id, null]  // Optional parent course page
  title varchar
  order float
  body jsonb
  due_date timestamp [null]
  available_from timestamp [null]
  available_to timestamp [null]
  duration_minutes int [null, note: 'Time limit in minutes, null means no time limit']
  grading_method grading_method
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]

  indexes {
    (course_id) // For getting all quizzes in a course
    (course_id, order) // For ordered quiz retrieval in a course
    (parent_id) // For getting all quizzes under a course page
    (parent_id, order) // For ordered quiz retrieval under a course page
    (due_date) // For finding upcoming/overdue quizzes
    (available_from, available_to) // For finding currently available quizzes
    (grading_method) // For finding quizzes by grading method
  }
}

Table course_users {
  id int [pk, increment]
  user_product_id int [ref: > user_products.id]
  course_id int [ref: > courses.id]
  analytics jsonb [default: '{}', note: 'Tracks time spent on different parts of the course, last accessed timestamps, etc.']
  grades jsonb [default: '{}', note: 'Cache of user grades for quick access (quizzes, assignments, overall grade)']
  progress jsonb [default: '{}', note: 'Completion status of course content (modules, pages, assignments, etc.)']
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]

  indexes {
    (user_product_id, course_id) [unique] // For efficient access control lookups
    (course_id) // For finding all users in a course
    (created_at) // For finding recently enrolled users
  }
}

Table course_user_roles {
  id int [pk, increment]
  course_id int
  course_user_id int
  role course_role_type
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
}

Enum course_role_type {
  student
  instructor
  editor
  administrator
  teaching_assistant
}

Table quiz_submissions {
  id int [pk, increment]
  quiz_id int
  course_user_id int // Updated to use course_users instead of users
  submitted_at timestamp [default: `now()`]
  answers jsonb
}

Table quiz_grades {
  id int [pk, increment]
  quiz_submission_id int
  grader_course_user_id int // Identity of the grader (instructor/TA)
  grade float [null]
  graded_at timestamp [default: `now()`]
  feedback text [null]
}

Table assignment_submissions {
  id int [pk, increment]
  assignment_id int
  course_user_id int // Updated to use course_users instead of users
  submitted_at timestamp [default: `now()`]
  text_response text [null]
  url_response varchar [null]
  file_response jsonb [null] // store file metadata/links as needed
}

Table assignment_grades {
  id int [pk, increment]
  assignment_submission_id int
  grader_course_user_id int // Updated to use course_users instead of users
  grade float [null]
  graded_at timestamp [null]
  feedback text [null]
}

//------------------------------------------------------
// PAYMENT & TRANSACTION SYSTEM
//------------------------------------------------------

// Promotional code system
Table promo_codes {
  id int [pk, increment]
  code varchar [unique]
  type promo_code_type
  product_id int [ref: > products.id, null, note: 'Specific product this code applies to, null for all products']
  discount_percentage decimal [null, note: 'Percentage discount']
  affiliate_wallet_id int [ref: > user_wallets.id, null, note: 'If created by affiliate']
  affiliate_percentage decimal [null, note: 'How much of discount is paid by affiliate']
  max_uses int [null, note: 'Null for unlimited uses']
  uses_count int [default: 0, note: 'Current number of times this code has been used']
  max_uses_per_user int [default: 1]
  starts_at timestamp [default: `now()`]
  expires_at timestamp [null]
  is_active bool [default: true]
  created_by int [ref: > user_wallets.id]
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]

  indexes {
    (code)
    (type)
    (product_id)
    (affiliate_wallet_id)
    (expires_at)
    (is_active)
  }
}

// Track promo code usage
Table promo_code_uses {
  id int [pk, increment]
  promo_code_id int [ref: > promo_codes.id]
  user_wallet_id int [ref: > user_wallets.id]
  financial_transaction_id int [ref: > financial_transactions.id]
  discount_applied decimal [note: 'Actual amount discounted']
  used_at timestamp [default: `now()`]

  indexes {
    (promo_code_id)
    (user_wallet_id)
    (financial_transaction_id)
  }
}

Enum promo_code_type {
  percentage_off    // Percentage discount
  fixed_amount_off  // Fixed amount discount
  buy_one_get_one  // BOGO deals
  first_month_free  // For subscription products
}

// Product and pricing management
Table product_pricing {
  id integer [pk, increment]
  product_id integer [ref: > products.id]
  base_price decimal
  creator_share_percentage decimal [default: 70]
  tax_rate decimal
  availability_rules jsonb [null, note: 'Rules for when this pricing is available']
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]

  indexes {
    (product_id)
  }
}

// Product subscription plans table
Table product_subscription_plans {
  id integer [pk, increment]
  product_id integer [ref: > products.id]
  name varchar
  description text
  type subscription_type
  price decimal // Changed from float to decimal for precision
  base_price decimal // Original price before discounts
  billing_interval subscription_billing_interval
  billing_interval_count int [default: 1]
  trial_period_days int [null]
  features jsonb [null]
  availability_rules jsonb [null, note: 'Rules for when this subscription plan is available']
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]

  indexes {
    (product_id)
  }
}

Table user_subscriptions {
  id integer [pk, increment]
  user_wallet_id integer [ref: > user_wallets.id]
  subscription_plan_id integer [ref: > product_subscription_plans.id]
  status subscription_status
  current_period_start timestamp
  current_period_end timestamp
  cancel_at_period_end boolean [default: false]
  canceled_at timestamp [null]
  ended_at timestamp [null]
  trial_end timestamp [null]
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]

  indexes {
    (user_wallet_id)
    (subscription_plan_id)
    (status)
  }
}

// User wallets and financial methods
Table user_wallets {
  id int [pk, increment]
  user_id int [unique, ref: - users.id, note: 'One-to-one relationship with users']
  balance decimal [default: 0]
  available_balance decimal [default: 0] // Available for withdrawal
  status wallet_status [default: "active"]
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
}

// Unified payment methods table
Table user_financial_methods {
  id int [pk, increment]
  user_wallet_id int
  type payment_method_type
  name varchar [note: 'Display name for the payment method']
  is_default bool [default: false]
  status payment_method_status [default: 'active']
  provider varchar [note: 'Payment provider (stripe, crypto, balance, etc.)']
  provider_data jsonb [note: 'Provider-specific data like card details or wallet addresses']
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]

  indexes {
    (user_wallet_id)
    (type, status)
    (provider)
  }
}

// Financial transactions table with standardized fields
Table financial_transactions {
  id integer [pk, increment]
  from_wallet_id int [ref: > user_wallets.id, null, note: 'Source wallet, null if system credit or external payment']
  to_wallet_id int [ref: > user_wallets.id, null, note: 'Destination wallet, null if system debit or external payment']
  product_id int [ref: > products.id, null]
  pricing_id int [ref: > product_pricing.id, null]
  subscription_plan_id int [ref: > product_subscription_plans.id, null]
  promo_code_id int [ref: > promo_codes.id, null]
  transaction_type transaction_type
  amount decimal
  original_amount decimal [note: 'Original amount before any discounts']
  referrer_user_id int [ref: > user_wallets.id, null, note: 'User who referred this transaction']
  referral_commission_amount decimal [null, note: 'Amount paid to referrer']
  status transaction_status
  payment_provider varchar
  payment_provider_transaction_id varchar
  metadata jsonb [null]
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]

  indexes {
    (from_wallet_id)
    (to_wallet_id)
    (product_id)
    (transaction_type)
    (status)
    (payment_provider_transaction_id)
  }
}

// Note: Currency tables removed - system now uses USD only

// Update payment system enums
Enum subscription_status {
  active
  trialing
  past_due
  canceled
  incomplete
  incomplete_expired
  unpaid
}

Enum payment_method_type {
  credit_card
  debit_card
  crypto_wallet
  wallet_balance
  bank_transfer
}

Enum payment_method_status {
  active
  inactive
  expired
  removed
}

Enum transaction_status {
  pending
  processing
  completed
  failed
  refunded
  cancelled
}

Enum transaction_type {
  purchase
  refund
  withdrawal
  deposit
  transfer
  fee
  adjustment
}

Enum balance_transaction_type {
  credit
  debit
  transfer
  refund
  fee
  adjustment
}

Enum balance_transaction_status {
  pending
  completed
  failed
  reversed
}

Enum wallet_status {
  active
  frozen
  closed
}

// Product ownership and access management
Table user_products {
  id int [pk, increment]
  user_wallet_id int [ref: > user_wallets.id]
  product_id int [ref: > products.id]
  subscription_id int [ref: > user_subscriptions.id, null, note: 'If product access is through subscription']
  acquisition_type product_acquisition_type
  purchase_transaction_id int [ref: > financial_transactions.id, null]
  access_expires_at timestamp [null, note: 'Null means permanent access']
  access_started_at timestamp [default: `now()`]
  status product_access_status [default: 'active']
  metadata jsonb [note: 'Additional access control data']
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]

  indexes {
    (user_wallet_id, product_id)
    (subscription_id)
    (status)
    (access_expires_at)
  }
}

Enum product_acquisition_type {
  purchase
  subscription
  free
  gift
}

Enum product_access_status {
  active
  expired
  revoked
  suspended
}

// Course prerequisites
Table course_prerequisites {
  id int [pk, increment]
  course_id int [ref: > courses.id]
  prerequisite_course_id int [ref: > courses.id]
  required_completion_percentage int [default: 100, note: 'Required completion percentage of prerequisite course']
  required_grade_percentage int [default: 70, note: 'Required minimum grade percentage in prerequisite course']
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]

  indexes {
    (course_id)
    (prerequisite_course_id)
    (course_id, prerequisite_course_id) [unique] // Prevent duplicate prerequisites
  }
}

// RELATIONSHIPS
//------------------------------------------------------
// Course relationships
Ref: course_pages.course_id > courses.id
Ref: course_pages.parent_id > course_pages.id
Ref: assignments.course_id > courses.id
Ref: assignments.parent_id > course_pages.id
Ref: quizzes.course_id > courses.id
Ref: quizzes.parent_id > course_pages.id
Ref: course_users.course_id > courses.id
Ref: course_users.user_product_id > user_products.id
Ref: course_user_roles.course_id > courses.id
Ref: course_user_roles.course_user_id > course_users.id
Ref: course_prerequisites.course_id > courses.id
Ref: course_prerequisites.prerequisite_course_id > courses.id

// Assessment relationships
Ref: quiz_submissions.quiz_id > quizzes.id
Ref: quiz_submissions.course_user_id > course_users.id
Ref: quiz_grades.quiz_submission_id > quiz_submissions.id
Ref: quiz_grades.grader_course_user_id > course_users.id
Ref: assignment_submissions.assignment_id > assignments.id
Ref: assignment_submissions.course_user_id > course_users.id
Ref: assignment_grades.assignment_submission_id > assignment_submissions.id
Ref: assignment_grades.grader_course_user_id > course_users.id

// Product and subscription relationships
Ref: product_courses.product_id > products.id
Ref: product_courses.course_id > courses.id
Ref: product_pricing.product_id > products.id
Ref: product_subscription_plans.product_id > products.id
Ref: user_subscriptions.user_wallet_id > user_wallets.id
Ref: user_subscriptions.subscription_plan_id > product_subscription_plans.id
Ref: user_products.product_id > products.id
Ref: user_products.user_wallet_id > user_wallets.id
Ref: user_products.subscription_id > user_subscriptions.id

// Financial relationships

Ref: user_financial_methods.user_wallet_id > user_wallets.id
Ref: financial_transactions.from_wallet_id > user_wallets.id
Ref: financial_transactions.to_wallet_id > user_wallets.id
Ref: promo_codes.product_id > products.id
Ref: promo_codes.created_by > user_wallets.id
Ref: promo_code_uses.promo_code_id > promo_codes.id
Ref: promo_code_uses.user_wallet_id > user_wallets.id
Ref: promo_code_uses.financial_transaction_id > financial_transactions.id
Ref: financial_transactions.promo_code_id > promo_codes.id

// Product types
Enum product_type {
  course
  bundle
  subscription
  other
}