{
  "openapi": "3.0.0",
  "paths": {
    "/auth/magic-link": {
      "post": {
        "operationId": "AuthController_magicLink",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkDto"
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/local/sign-up": {
      "post": {
        "operationId": "AuthController_signUpWithEmailUsernamePassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocalSignUpDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocalSignInResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/google/callback/{token}": {
      "get": {
        "operationId": "AuthController_signInWithGoogle",
        "parameters": [
          {
            "name": "token",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocalSignInResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/web3/sign-in/challenge": {
      "post": {
        "operationId": "AuthController_getWeb3SignInChallenge",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EthereumSigninChallengeRequestDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EthereumSigninChallengeResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/web3/sign-in/validate": {
      "post": {
        "operationId": "AuthController_validateWeb3SignInChallenge",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EthereumSigninValidateRequestDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocalSignInResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/me": {
      "get": {
        "operationId": "AuthController_getCurrentUser",
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/auth/refresh-token": {
      "get": {
        "operationId": "AuthController_refreshToken",
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocalSignInResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/auth/userExists/{user}": {
      "get": {
        "operationId": "AuthController_userExists",
        "parameters": [
          {
            "name": "user",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/users/me": {
      "get": {
        "operationId": "UserController_me",
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/user-profile/me": {
      "patch": {
        "operationId": "UserProfileController_update",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserProfileDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileEntity"
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "UserProfileController_get",
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileEntity"
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/user-profile/profile-picture": {
      "patch": {
        "operationId": "UserProfileController_updateProfilePicture",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "profilePicture": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileEntity"
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/content/course/create": {
      "post": {
        "operationId": "ContentController_createEmptyCourse",
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseEntity"
                }
              }
            }
          }
        },
        "tags": [
          "content"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/project": {
      "get": {
        "operationId": "getManyBaseProjectControllerProjectEntity",
        "summary": "Retrieve multiple ProjectEntities",
        "parameters": [
          {
            "name": "fields",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "s",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "or",
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "sort",
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "join",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "limit",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "description": "Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cache",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get many base response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/GetManyProjectEntityResponseDto"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProjectEntity"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Project"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "createOneBaseProjectControllerProjectEntity",
        "summary": "Create a single ProjectEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Get create one base response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectEntity"
                }
              }
            }
          }
        },
        "tags": [
          "Project"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/project/{slug}": {
      "get": {
        "operationId": "getOneBaseProjectControllerProjectEntity",
        "summary": "Retrieve a single ProjectEntity",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "join",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "cache",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get one base response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectEntity"
                }
              }
            }
          }
        },
        "tags": [
          "Project"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "updateOneBaseProjectControllerProjectEntity",
        "summary": "Update a single ProjectEntity",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectEntity"
                }
              }
            }
          }
        },
        "tags": [
          "Project"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteOneBaseProjectControllerProjectEntity",
        "summary": "Delete a single ProjectEntity",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete one base response"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Project"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/project/transfer-ownership": {
      "post": {
        "operationId": "ProjectController_switchOwner",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferOwnershipRequestDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Project"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/project/add-editor": {
      "post": {
        "operationId": "ProjectController_addEditor",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditorRequestDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Project"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/project/remove-editor": {
      "post": {
        "operationId": "ProjectController_removeEditor",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditorRequestDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Project"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/project/get-owned-by-me": {
      "get": {
        "operationId": "ProjectController_ownedByMe",
        "summary": "",
        "description": "Obtains all items the current users owns.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Project"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/project/get-editable-by-me": {
      "get": {
        "operationId": "ProjectController_ICanEdit",
        "summary": "",
        "description": "Obtains all items the current users has permission to edit.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Project"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/project-version": {
      "post": {
        "operationId": "createOneBaseProjectVersionControllerProjectVersionEntity",
        "summary": "Create a single ProjectVersionEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectVersionEntity"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Get create one base response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectVersionEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "project-version"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "getManyBaseProjectVersionControllerProjectVersionEntity",
        "summary": "Retrieve multiple ProjectVersionEntities",
        "parameters": [
          {
            "name": "fields",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "s",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "or",
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "sort",
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "join",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "limit",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "description": "Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cache",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get many base response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/GetManyProjectVersionEntityResponseDto"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProjectVersionEntity"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "project-version"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/project-version/{id}": {
      "delete": {
        "operationId": "deleteOneBaseProjectVersionControllerProjectVersionEntity",
        "summary": "Delete a single ProjectVersionEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete one base response"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "project-version"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "getOneBaseProjectVersionControllerProjectVersionEntity",
        "summary": "Retrieve a single ProjectVersionEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "join",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "cache",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get one base response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectVersionEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "project-version"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/tickets": {
      "get": {
        "operationId": "getManyBaseTicketControllerTicketEntity",
        "summary": "Retrieve multiple TicketEntities",
        "parameters": [
          {
            "name": "fields",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "s",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "or",
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "sort",
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "join",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "limit",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "description": "Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cache",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get many base response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/GetManyTicketEntityResponseDto"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TicketEntity"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Ticket"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "createOneBaseTicketControllerTicketEntity",
        "summary": "Create a single TicketEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTicketDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Get create one base response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Ticket"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/tickets/{id}": {
      "get": {
        "operationId": "getOneBaseTicketControllerTicketEntity",
        "summary": "Retrieve a single TicketEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "join",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "cache",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get one base response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Ticket"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "updateOneBaseTicketControllerTicketEntity",
        "summary": "Update a single TicketEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketEntity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Ticket"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteOneBaseTicketControllerTicketEntity",
        "summary": "Delete a single TicketEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete one base response"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Ticket"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/courses/{slug}": {
      "get": {
        "operationId": "getOneBaseCoursesControllerCourseEntity",
        "summary": "Retrieve a single CourseEntity",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "join",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "cache",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get one base response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "courses"
        ]
      },
      "patch": {
        "operationId": "updateOneBaseCoursesControllerCourseEntity",
        "summary": "Update a single CourseEntity",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CourseEntity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "courses"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteOneBaseCoursesControllerCourseEntity",
        "summary": "Delete a single CourseEntity",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete one base response"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "courses"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/courses": {
      "get": {
        "operationId": "getManyBaseCoursesControllerCourseEntity",
        "summary": "Retrieve multiple CourseEntities",
        "parameters": [
          {
            "name": "fields",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "s",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "or",
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "sort",
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "join",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "limit",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "description": "Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cache",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get many base response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/GetManyCourseEntityResponseDto"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CourseEntity"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "courses"
        ]
      },
      "post": {
        "operationId": "createOneBaseCoursesControllerCourseEntity",
        "summary": "Create a single CourseEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CourseEntity"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Get create one base response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "courses"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/courses/transfer-ownership": {
      "post": {
        "operationId": "CoursesController_switchOwner",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferOwnershipRequestDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "courses"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/courses/add-editor": {
      "post": {
        "operationId": "CoursesController_addEditor",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditorRequestDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "courses"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/courses/remove-editor": {
      "post": {
        "operationId": "CoursesController_removeEditor",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditorRequestDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "courses"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/courses/get-owned-by-me": {
      "get": {
        "operationId": "CoursesController_ownedByMe",
        "summary": "",
        "description": "Obtains all items the current users owns.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "courses"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/courses/get-editable-by-me": {
      "get": {
        "operationId": "CoursesController_ICanEdit",
        "summary": "",
        "description": "Obtains all items the current users has permission to edit.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "courses"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/courses/{courseid}/quiz/{id}": {
      "get": {
        "operationId": "getOneBaseQuizControllerQuizEntity",
        "summary": "Retrieve a single QuizEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "join",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "cache",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get one base response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuizEntity"
                }
              }
            }
          }
        },
        "tags": [
          "quiz"
        ]
      },
      "patch": {
        "operationId": "updateOneBaseQuizControllerQuizEntity",
        "summary": "Update a single QuizEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuizEntity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuizEntity"
                }
              }
            }
          }
        },
        "tags": [
          "quiz"
        ]
      },
      "put": {
        "operationId": "replaceOneBaseQuizControllerQuizEntity",
        "summary": "Replace a single QuizEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuizEntity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuizEntity"
                }
              }
            }
          }
        },
        "tags": [
          "quiz"
        ]
      },
      "delete": {
        "operationId": "deleteOneBaseQuizControllerQuizEntity",
        "summary": "Delete a single QuizEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete one base response"
          }
        },
        "tags": [
          "quiz"
        ]
      }
    },
    "/courses/{courseid}/quiz": {
      "get": {
        "operationId": "getManyBaseQuizControllerQuizEntity",
        "summary": "Retrieve multiple QuizEntities",
        "parameters": [
          {
            "name": "fields",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "s",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "or",
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "sort",
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "join",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "limit",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "description": "Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cache",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get many base response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/GetManyQuizEntityResponseDto"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/QuizEntity"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "quiz"
        ]
      },
      "post": {
        "operationId": "createOneBaseQuizControllerQuizEntity",
        "summary": "Create a single QuizEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuizEntity"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Get create one base response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuizEntity"
                }
              }
            }
          }
        },
        "tags": [
          "quiz"
        ]
      }
    },
    "/courses/{courseid}/quiz/bulk": {
      "post": {
        "operationId": "createManyBaseQuizControllerQuizEntity",
        "summary": "Create multiple QuizEntities",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateManyQuizEntityDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Get create many base response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuizEntity"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "quiz"
        ]
      }
    },
    "/Competitions/Chess/submit": {
      "post": {
        "operationId": "CompetitionController_submitChessAgent",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CompetitionSubmissionDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TerminalDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "competitions"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Competitions/Chess/ListAgents": {
      "get": {
        "operationId": "CompetitionController_ListChessAgents",
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "default": {
            "description": "List of chess agents with their details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChessAgentResponseEntryDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "competitions"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Competitions/Chess/Move": {
      "post": {
        "operationId": "CompetitionController_RequestChessMove",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChessMoveRequestDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "default": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "competitions"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Competitions/Chess/RunMatch": {
      "post": {
        "operationId": "CompetitionController_RunChessMatch",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChessMatchRequestDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChessMatchResultDto"
                }
              }
            }
          }
        },
        "tags": [
          "competitions"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Competitions/Chess/FindMatches": {
      "post": {
        "operationId": "CompetitionController_FindChessMatchResult",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchSearchRequestDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchSearchResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "competitions"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Competitions/Chess/Match/{id}": {
      "get": {
        "operationId": "CompetitionController_GetChessMatchResult",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChessMatchResultDto"
                }
              }
            }
          }
        },
        "tags": [
          "competitions"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Competitions/Chess/Leaderboard": {
      "get": {
        "operationId": "CompetitionController_GetChessLeaderboard",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChessLeaderboardResponseEntryDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "competitions"
        ]
      }
    },
    "/Competitions/Chess/RunCompetition": {
      "get": {
        "operationId": "CompetitionController_RunCompetition",
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "competitions"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Competitions/Chess/LatestCompetitionReport": {
      "get": {
        "operationId": "CompetitionController_GetLatestChessCompetitionReport",
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompetitionRunSubmissionReportEntity"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "competitions"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/healthcheck/db": {
      "get": {
        "operationId": "HealthcheckController_db",
        "parameters": [],
        "responses": {
          "200": {
            "description": "DB is healthy"
          },
          "500": {
            "description": "DB is unhealthy"
          }
        }
      }
    },
    "/healthcheck/redis": {
      "get": {
        "operationId": "HealthcheckController_redis",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Redis is healthy"
          },
          "500": {
            "description": "Redis is unhealthy"
          }
        }
      }
    },
    "/healthcheck/s3": {
      "get": {
        "operationId": "HealthcheckController_s3",
        "parameters": [],
        "responses": {
          "200": {
            "description": "S3 is healthy"
          },
          "500": {
            "description": "S3 is unhealthy"
          }
        }
      }
    },
    "/job-posts": {
      "post": {
        "operationId": "createOneBaseJobPostControllerJobPostEntity",
        "summary": "Create a single JobPostEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobPostCreateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Get create one base response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobPostEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Job Posts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "getManyBaseJobPostControllerJobPostEntity",
        "summary": "Retrieve multiple JobPostEntities",
        "parameters": [
          {
            "name": "fields",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "s",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "or",
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "sort",
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "join",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "limit",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "description": "Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cache",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get many base response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/GetManyJobPostEntityResponseDto"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/JobPostEntity"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Job Posts"
        ]
      }
    },
    "/job-posts/{id}": {
      "patch": {
        "operationId": "updateOneBaseJobPostControllerJobPostEntity",
        "summary": "Update a single JobPostEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobPostEntity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobPostEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Job Posts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "getOneBaseJobPostControllerJobPostEntity",
        "summary": "Retrieve a single JobPostEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "join",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "cache",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get one base response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobPostEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Job Posts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteOneBaseJobPostControllerJobPostEntity",
        "summary": "Delete a single JobPostEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete one base response"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Job Posts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/job-posts/get-many-with-applied": {
      "get": {
        "operationId": "JobPostController_getManyWithApplied",
        "parameters": [
          {
            "name": "fields",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "s",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "or",
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "sort",
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "join",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "limit",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "description": "Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cache",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/components/schemas/Array"
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobPostWithAppliedDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Job Posts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/job-posts/get-by-slug/{slug}": {
      "get": {
        "operationId": "JobPostController_getBySlug",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/components/schemas/JobPostEntity"
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobPostEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Job Posts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/job-posts/get-by-slug-for-owner/{slug}": {
      "get": {
        "operationId": "JobPostController_getBySlugForOwner",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/components/schemas/JobPostEntity"
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobPostEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Job Posts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/job-posts/transfer-ownership": {
      "post": {
        "operationId": "JobPostController_switchOwner",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferOwnershipRequestDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Job Posts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/job-posts/add-editor": {
      "post": {
        "operationId": "JobPostController_addEditor",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditorRequestDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Job Posts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/job-posts/remove-editor": {
      "post": {
        "operationId": "JobPostController_removeEditor",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditorRequestDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Job Posts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/job-posts/get-owned-by-me": {
      "get": {
        "operationId": "JobPostController_ownedByMe",
        "summary": "",
        "description": "Obtains all items the current users owns.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Job Posts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/job-posts/get-editable-by-me": {
      "get": {
        "operationId": "JobPostController_ICanEdit",
        "summary": "",
        "description": "Obtains all items the current users has permission to edit.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Job Posts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/job-tags/{id}": {
      "get": {
        "operationId": "getOneBaseJobTagControllerJobTagEntity",
        "summary": "Retrieve a single JobTagEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "join",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "cache",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get one base response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobTagEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Job Tags"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "updateOneBaseJobTagControllerJobTagEntity",
        "summary": "Update a single JobTagEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobTagEntity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobTagEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Job Tags"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteOneBaseJobTagControllerJobTagEntity",
        "summary": "Delete a single JobTagEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete one base response"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Job Tags"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/job-tags": {
      "get": {
        "operationId": "getManyBaseJobTagControllerJobTagEntity",
        "summary": "Retrieve multiple JobTagEntities",
        "parameters": [
          {
            "name": "fields",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "s",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "or",
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "sort",
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "join",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "limit",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "description": "Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cache",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get many base response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/GetManyJobTagEntityResponseDto"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/JobTagEntity"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Job Tags"
        ]
      },
      "post": {
        "operationId": "createOneBaseJobTagControllerJobTagEntity",
        "summary": "Create a single JobTagEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobTagEntity"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Get create one base response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobTagEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Job Tags"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/job-applications": {
      "post": {
        "operationId": "createOneBaseJobApplicationControllerJobApplicationEntity",
        "summary": "Create a single JobApplicationEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobAplicationCreateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Get create one base response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Job Applications"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "getManyBaseJobApplicationControllerJobApplicationEntity",
        "summary": "Retrieve multiple JobApplicationEntities",
        "parameters": [
          {
            "name": "fields",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "s",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "or",
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "sort",
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "join",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "limit",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "description": "Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cache",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get many base response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/GetManyJobApplicationEntityResponseDto"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/JobApplicationEntity"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Job Applications"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/job-applications/{id}": {
      "patch": {
        "operationId": "updateOneBaseJobApplicationControllerJobApplicationEntity",
        "summary": "Update a single JobApplicationEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobApplicationEntity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Job Applications"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "getOneBaseJobApplicationControllerJobApplicationEntity",
        "summary": "Retrieve a single JobApplicationEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "join",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "cache",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get one base response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Job Applications"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteOneBaseJobApplicationControllerJobApplicationEntity",
        "summary": "Delete a single JobApplicationEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete one base response"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Job Applications"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/job-applications/my-applications": {
      "get": {
        "operationId": "JobApplicationController_myApplications",
        "parameters": [],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/components/schemas/Array"
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobApplicationEntity"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Job Applications"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/job-applications/my-application-by-slug/{slug}": {
      "get": {
        "operationId": "JobApplicationController_myApplicationBySlug",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/components/schemas/JobApplicationEntity"
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Job Applications"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/job-applications/advance-candidate": {
      "post": {
        "operationId": "JobApplicationController_advanceCandidate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobApplicationEntity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/components/schemas/JobApplicationEntity"
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Job Applications"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/job-applications/undo-advance-candidate": {
      "post": {
        "operationId": "JobApplicationController_moveBackCandidate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobApplicationEntity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/components/schemas/JobApplicationEntity"
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Job Applications"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/job-applications/reject-candidate": {
      "post": {
        "operationId": "JobApplicationController_rejectCandidate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobApplicationEntity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/components/schemas/JobApplicationEntity"
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Job Applications"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/job-applications/undo-reject-candidate": {
      "post": {
        "operationId": "JobApplicationController_undoRejectCandidate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobApplicationEntity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/components/schemas/JobApplicationEntity"
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Job Applications"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/job-applications/withdraw": {
      "post": {
        "operationId": "JobApplicationController_withdraw",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobApplicationEntity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/components/schemas/JobApplicationEntity"
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobApplicationEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Job Applications"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/programs": {
      "post": {
        "operationId": "ProgramController_create",
        "summary": "Create a new program",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProgramRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Program created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Program"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation errors"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "Programs"
        ]
      },
      "get": {
        "operationId": "ProgramController_findAll",
        "summary": "Get all programs with optional filtering",
        "parameters": [
          {
            "name": "tags",
            "required": false,
            "in": "query",
            "description": "Filter by tags (comma-separated)",
            "schema": {}
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in title and description",
            "schema": {}
          },
          {
            "name": "is_active",
            "required": false,
            "in": "query",
            "description": "Filter by active/inactive programs",
            "schema": {}
          },
          {
            "name": "is_public",
            "required": false,
            "in": "query",
            "description": "Filter by public/private programs",
            "schema": {}
          },
          {
            "name": "difficulty_level",
            "required": false,
            "in": "query",
            "description": "Filter by difficulty level",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Programs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Program"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Programs"
        ]
      }
    },
    "/programs/{id}": {
      "get": {
        "operationId": "ProgramController_findOne",
        "summary": "Get a program by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Program UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Program retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Program"
                }
              }
            }
          },
          "404": {
            "description": "Program not found"
          }
        },
        "tags": [
          "Programs"
        ]
      },
      "put": {
        "operationId": "ProgramController_update",
        "summary": "Update a program",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Program UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProgramRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Program updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Program"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Program not found"
          }
        },
        "tags": [
          "Programs"
        ]
      },
      "delete": {
        "operationId": "ProgramController_remove",
        "summary": "Delete (deactivate) a program",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Program UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Program deleted successfully"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Program not found"
          }
        },
        "tags": [
          "Programs"
        ]
      }
    },
    "/programs/{id}/enroll": {
      "post": {
        "operationId": "ProgramController_enroll",
        "summary": "Enroll in a program",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Program UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnrollmentRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Enrolled successfully"
          },
          "400": {
            "description": "Enrollment failed"
          },
          "404": {
            "description": "Program not found"
          }
        },
        "tags": [
          "Programs"
        ]
      },
      "delete": {
        "operationId": "ProgramController_unenroll",
        "summary": "Unenroll from a program",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Program UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unenrolled successfully"
          },
          "404": {
            "description": "Program or enrollment not found"
          }
        },
        "tags": [
          "Programs"
        ]
      }
    },
    "/programs/{id}/users/{userId}/roles": {
      "post": {
        "operationId": "ProgramController_assignRole",
        "summary": "Assign role to user in program",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Program UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignRoleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Role assigned successfully"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "tags": [
          "Programs"
        ]
      },
      "get": {
        "operationId": "ProgramController_getUserRoles",
        "summary": "Get user roles in program",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Program UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User roles retrieved successfully"
          }
        },
        "tags": [
          "Programs"
        ]
      }
    },
    "/programs/{id}/users/{userId}/roles/{role}": {
      "delete": {
        "operationId": "ProgramController_removeRole",
        "summary": "Remove role from user in program",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Program UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "required": true,
            "in": "path",
            "description": "Role name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role removed successfully"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "tags": [
          "Programs"
        ]
      }
    },
    "/programs/{id}/stats": {
      "get": {
        "operationId": "ProgramController_getStats",
        "summary": "Get program statistics",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Program UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Program statistics retrieved successfully"
          }
        },
        "tags": [
          "Programs"
        ]
      }
    },
    "/programs/{id}/products/{productId}": {
      "post": {
        "operationId": "ProgramController_linkToProduct",
        "summary": "Link program to product",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Program UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "description": "Product UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Program linked to product successfully"
          },
          "400": {
            "description": "Link already exists"
          }
        },
        "tags": [
          "Programs"
        ]
      },
      "delete": {
        "operationId": "ProgramController_unlinkFromProduct",
        "summary": "Unlink program from product",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Program UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "description": "Product UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Program unlinked from product successfully"
          },
          "404": {
            "description": "Link not found"
          }
        },
        "tags": [
          "Programs"
        ]
      }
    },
    "/programs/search/{query}": {
      "get": {
        "operationId": "ProgramController_search",
        "summary": "Search programs",
        "parameters": [
          {
            "name": "query",
            "required": true,
            "in": "path",
            "description": "Search query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tags",
            "required": false,
            "in": "query",
            "schema": {}
          },
          {
            "name": "is_public",
            "required": false,
            "in": "query",
            "schema": {}
          },
          {
            "name": "difficulty_level",
            "required": false,
            "in": "query",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Search results retrieved successfully"
          }
        },
        "tags": [
          "Programs"
        ]
      }
    },
    "/programs/recommendations/for-user": {
      "get": {
        "operationId": "ProgramController_getRecommendations",
        "summary": "Get recommended programs for user",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of recommendations",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recommendations retrieved successfully"
          }
        },
        "tags": [
          "Programs"
        ]
      }
    },
    "/programs/{id}/access-check": {
      "get": {
        "operationId": "ProgramController_checkAccess",
        "summary": "Check user access to program",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Program UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Access check completed"
          }
        },
        "tags": [
          "Programs"
        ]
      }
    },
    "/certificates/templates": {
      "post": {
        "operationId": "CertificateController_createTemplate",
        "summary": "Create a new certificate template",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCertificateTemplateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Certificate template created successfully"
          }
        },
        "tags": [
          "certificates"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "CertificateController_getTemplates",
        "summary": "Get all certificate templates",
        "parameters": [
          {
            "name": "programId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of certificate templates"
          }
        },
        "tags": [
          "certificates"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/certificates/issue": {
      "post": {
        "operationId": "CertificateController_issueCertificate",
        "summary": "Issue a certificate to a user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueCertificateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Certificate issued successfully"
          }
        },
        "tags": [
          "certificates"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/certificates/verify/{certificateId}": {
      "get": {
        "operationId": "CertificateController_verifyCertificate",
        "summary": "Verify a certificate by ID",
        "parameters": [
          {
            "name": "certificateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Certificate verification result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateVerificationResult"
                }
              }
            }
          }
        },
        "tags": [
          "certificates"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/certificates/user/{userId}": {
      "get": {
        "operationId": "CertificateController_getUserCertificates",
        "summary": "Get certificates for a specific user",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user certificates"
          }
        },
        "tags": [
          "certificates"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "gameguild.gg",
    "description": "",
    "version": "1.0.0",
    "contact": {}
  },
  "tags": [],
  "servers": [
    {
      "url": "http://localhost:8080"
    },
    {
      "url": "https://api.gameguild.gg"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "EmailDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ]
      },
      "ErrorMessage": {
        "type": "object",
        "properties": {
          "target": {
            "type": "object"
          },
          "property": {
            "type": "string"
          },
          "constraints": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "target",
          "property",
          "constraints"
        ]
      },
      "ApiErrorResponseDto": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number"
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "msg": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "message": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          },
          "error": {
            "type": "object"
          },
          "stack": {
            "type": "object"
          },
          "raw": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "timestamp",
          "path",
          "msg",
          "name",
          "message",
          "error",
          "stack",
          "raw"
        ]
      },
      "OkDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "LocalSignUpDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "username",
          "email",
          "password"
        ]
      },
      "ImageEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "source": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "originalFilename": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "mimetype": {
            "type": "string"
          },
          "sizeBytes": {
            "type": "number"
          },
          "hash": {
            "type": "string"
          },
          "width": {
            "type": "integer"
          },
          "height": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "source",
          "path",
          "originalFilename",
          "filename",
          "mimetype",
          "sizeBytes",
          "hash",
          "width",
          "height",
          "description"
        ]
      },
      "UserProfileEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "bio": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "givenName": {
            "type": "string"
          },
          "familyName": {
            "type": "string"
          },
          "picture": {
            "$ref": "#/components/schemas/ImageEntity"
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "user",
          "bio",
          "name",
          "givenName",
          "familyName",
          "picture"
        ]
      },
      "CompetitionSubmissionEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "createdAt",
          "updatedAt"
        ]
      },
      "UserEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "emailVerified": {
            "type": "boolean"
          },
          "passwordHash": {
            "type": "string"
          },
          "passwordSalt": {
            "type": "string"
          },
          "facebookId": {
            "type": "string"
          },
          "googleId": {
            "type": "string"
          },
          "githubId": {
            "type": "string"
          },
          "appleId": {
            "type": "string"
          },
          "linkedinId": {
            "type": "string"
          },
          "twitterId": {
            "type": "string"
          },
          "walletAddress": {
            "type": "string"
          },
          "profile": {
            "$ref": "#/components/schemas/UserProfileEntity"
          },
          "competitionSubmissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompetitionSubmissionEntity"
            }
          },
          "elo": {
            "type": "number"
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "username",
          "email",
          "emailVerified",
          "passwordHash",
          "passwordSalt",
          "facebookId",
          "googleId",
          "githubId",
          "appleId",
          "linkedinId",
          "twitterId",
          "walletAddress",
          "profile",
          "competitionSubmissions",
          "elo"
        ]
      },
      "LocalSignInResponseDto": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/UserEntity"
          }
        },
        "required": [
          "accessToken",
          "refreshToken",
          "user"
        ]
      },
      "EthereumSigninChallengeRequestDto": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          }
        },
        "required": [
          "address"
        ]
      },
      "EthereumSigninChallengeResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "EthereumSigninValidateRequestDto": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          }
        },
        "required": [
          "address",
          "signature"
        ]
      },
      "UpdateUserProfileDto": {
        "type": "object",
        "properties": {
          "bio": {
            "type": "string"
          },
          "givenName": {
            "type": "string"
          },
          "familyName": {
            "type": "string"
          }
        }
      },
      "GetManyCourseEntityResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseEntity"
            }
          },
          "count": {
            "type": "number"
          },
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pageCount": {
            "type": "number"
          }
        },
        "required": [
          "data",
          "count",
          "total",
          "page",
          "pageCount"
        ]
      },
      "FileDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "content": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "format": "binary",
                "description": "Binary content represented as base64 string"
              }
            ],
            "description": "File content as string or binary data (base64 encoded)"
          }
        },
        "required": [
          "name",
          "content"
        ]
      },
      "EmbeddablecedCodeActivityTest": {
        "type": "object",
        "properties": {
          "in": {
            "type": "string"
          },
          "out": {
            "type": "string"
          }
        },
        "required": [
          "in",
          "out"
        ]
      },
      "CodeAssignmentDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "markdown": {
            "type": "string"
          },
          "lexical": {
            "type": "object"
          },
          "language": {
            "type": "string",
            "enum": [
              "c",
              "cpp",
              "python",
              "javascript",
              "rust",
              "c#",
              "lua"
            ]
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileDto"
            }
          },
          "tests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmbeddablecedCodeActivityTest"
            }
          }
        },
        "required": [
          "title",
          "markdown",
          "lexical",
          "language",
          "files",
          "tests"
        ]
      },
      "LectureEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "owner": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "editors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEntity"
            }
          },
          "slug": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "body": {
            "type": "string",
            "description": "The body of the content for simple content types"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "DRAFT",
              "PUBLISHED",
              "FUTURE",
              "PENDING",
              "PRIVATE",
              "TRASH"
            ]
          },
          "thumbnail": {
            "$ref": "#/components/schemas/ImageEntity"
          },
          "order": {
            "type": "number"
          },
          "json": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CodeAssignmentDto"
              }
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/CodeAssignmentDto"
              }
            ]
          },
          "renderer": {
            "type": "string",
            "enum": [
              "markdown",
              "youtube",
              "lexical",
              "reveal",
              "html",
              "code",
              "link",
              "pdf",
              "image",
              "video",
              "audio"
            ],
            "default": "markdown",
            "description": "Depending of the renderer, the data may be stored in the field body or json, or both."
          },
          "course": {
            "$ref": "#/components/schemas/CourseEntity"
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "slug",
          "title",
          "order",
          "renderer",
          "course"
        ]
      },
      "CourseEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "owner": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "editors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEntity"
            }
          },
          "slug": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "body": {
            "type": "string",
            "description": "The body of the content for simple content types"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "DRAFT",
              "PUBLISHED",
              "FUTURE",
              "PENDING",
              "PRIVATE",
              "TRASH"
            ]
          },
          "thumbnail": {
            "$ref": "#/components/schemas/ImageEntity"
          },
          "price": {
            "type": "number"
          },
          "subscriptionAccess": {
            "type": "boolean"
          },
          "lectures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LectureEntity"
            }
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "slug",
          "title",
          "price",
          "subscriptionAccess",
          "lectures"
        ]
      },
      "CreateProjectDto": {
        "type": "object",
        "properties": {
          "slug": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "DRAFT",
              "PUBLISHED",
              "FUTURE",
              "PENDING",
              "PRIVATE",
              "TRASH"
            ]
          }
        },
        "required": [
          "slug",
          "title",
          "summary",
          "body",
          "visibility"
        ]
      },
      "GetManyProjectEntityResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectEntity"
            }
          },
          "count": {
            "type": "number"
          },
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pageCount": {
            "type": "number"
          }
        },
        "required": [
          "data",
          "count",
          "total",
          "page",
          "pageCount"
        ]
      },
      "ProjectTestFeedbackQuestion": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "SHORT_ANSWER",
              "PARAGRAPH",
              "CHECKBOX",
              "DROPDOWN",
              "LINEAR_SCALE"
            ]
          },
          "description": {
            "type": "string"
          },
          "isRequired": {
            "type": "boolean"
          }
        },
        "required": [
          "type",
          "description",
          "isRequired"
        ]
      },
      "ProjectTestFeedbackQuestionCheckbox": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "SHORT_ANSWER",
              "PARAGRAPH",
              "CHECKBOX",
              "DROPDOWN",
              "LINEAR_SCALE"
            ]
          },
          "description": {
            "type": "string"
          },
          "isRequired": {
            "type": "boolean"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "type",
          "description",
          "isRequired",
          "options"
        ]
      },
      "ProjectTestFeedbackQuestionDropdown": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "SHORT_ANSWER",
              "PARAGRAPH",
              "CHECKBOX",
              "DROPDOWN",
              "LINEAR_SCALE"
            ]
          },
          "description": {
            "type": "string"
          },
          "isRequired": {
            "type": "boolean"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "type",
          "description",
          "isRequired",
          "options"
        ]
      },
      "ProjectTestFeedbackQuestionLinearScale": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "SHORT_ANSWER",
              "PARAGRAPH",
              "CHECKBOX",
              "DROPDOWN",
              "LINEAR_SCALE"
            ]
          },
          "description": {
            "type": "string"
          },
          "isRequired": {
            "type": "boolean"
          },
          "minimum": {
            "type": "number"
          },
          "maximum": {
            "type": "number"
          },
          "steps": {
            "type": "number"
          }
        },
        "required": [
          "type",
          "description",
          "isRequired",
          "minimum",
          "maximum",
          "steps"
        ]
      },
      "ProjectTestFeedbackQuestionShortAnswer": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "SHORT_ANSWER",
              "PARAGRAPH",
              "CHECKBOX",
              "DROPDOWN",
              "LINEAR_SCALE"
            ]
          },
          "description": {
            "type": "string"
          },
          "isRequired": {
            "type": "boolean"
          },
          "minimumCharacters": {
            "type": "number"
          },
          "maximumCharacters": {
            "type": "number"
          }
        },
        "required": [
          "type",
          "description",
          "isRequired",
          "minimumCharacters",
          "maximumCharacters"
        ]
      },
      "ProjectTestFeedbackQuestionParagraph": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "SHORT_ANSWER",
              "PARAGRAPH",
              "CHECKBOX",
              "DROPDOWN",
              "LINEAR_SCALE"
            ]
          },
          "description": {
            "type": "string"
          },
          "isRequired": {
            "type": "boolean"
          },
          "minimumCharacters": {
            "type": "number"
          },
          "maximumCharacters": {
            "type": "number"
          },
          "minimumLines": {
            "type": "number"
          },
          "maximumLines": {
            "type": "number"
          }
        },
        "required": [
          "type",
          "description",
          "isRequired",
          "minimumCharacters",
          "maximumCharacters",
          "minimumLines",
          "maximumLines"
        ]
      },
      "GetManyProjectVersionEntityResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectVersionEntity"
            }
          },
          "count": {
            "type": "number"
          },
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pageCount": {
            "type": "number"
          }
        },
        "required": [
          "data",
          "count",
          "total",
          "page",
          "pageCount"
        ]
      },
      "ProjectFeedbackResponseEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "version": {
            "$ref": "#/components/schemas/ProjectVersionEntity"
          },
          "user": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "responses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "version",
          "user",
          "responses"
        ]
      },
      "ProjectVersionEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "version": {
            "type": "string"
          },
          "archive_url": {
            "type": "string"
          },
          "notes_url": {
            "type": "string"
          },
          "feedback_form": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ProjectTestFeedbackQuestion"
                },
                {
                  "$ref": "#/components/schemas/ProjectTestFeedbackQuestionCheckbox"
                },
                {
                  "$ref": "#/components/schemas/ProjectTestFeedbackQuestionDropdown"
                },
                {
                  "$ref": "#/components/schemas/ProjectTestFeedbackQuestionLinearScale"
                },
                {
                  "$ref": "#/components/schemas/ProjectTestFeedbackQuestionShortAnswer"
                },
                {
                  "$ref": "#/components/schemas/ProjectTestFeedbackQuestionParagraph"
                }
              ]
            }
          },
          "feedback_deadline": {
            "format": "date-time",
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/ProjectEntity"
          },
          "responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectFeedbackResponseEntity"
            }
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "version",
          "archive_url",
          "notes_url",
          "feedback_form",
          "feedback_deadline",
          "project",
          "responses"
        ]
      },
      "GetManyTicketEntityResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketEntity"
            }
          },
          "count": {
            "type": "number"
          },
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pageCount": {
            "type": "number"
          }
        },
        "required": [
          "data",
          "count",
          "total",
          "page",
          "pageCount"
        ]
      },
      "TicketEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "owner": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "editors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEntity"
            }
          },
          "title": {
            "type": "string",
            "description": "Title of the ticket"
          },
          "description": {
            "type": "string",
            "description": "Description of the ticket"
          },
          "projectId": {
            "type": "string",
            "description": "Description of the ticket"
          },
          "status": {
            "type": "string",
            "enum": [
              "OPEN",
              "IN_PROGRESS",
              "RESOLVED",
              "CLOSED"
            ],
            "description": "Status of the ticket"
          },
          "priority": {
            "type": "string",
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ],
            "description": "Priority of the ticket"
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "title",
          "description",
          "projectId",
          "status",
          "priority"
        ]
      },
      "ProjectEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "owner": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "editors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEntity"
            }
          },
          "slug": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "body": {
            "type": "string",
            "description": "The body of the content for simple content types"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "DRAFT",
              "PUBLISHED",
              "FUTURE",
              "PENDING",
              "PRIVATE",
              "TRASH"
            ]
          },
          "thumbnail": {
            "$ref": "#/components/schemas/ImageEntity"
          },
          "versions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectVersionEntity"
            }
          },
          "tickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketEntity"
            }
          },
          "banner": {
            "$ref": "#/components/schemas/ImageEntity"
          },
          "screenshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageEntity"
            }
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "slug",
          "title"
        ]
      },
      "IdDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "id"
        ]
      },
      "TransferOwnershipRequestDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "newUser": {
            "$ref": "#/components/schemas/IdDto"
          }
        },
        "required": [
          "id",
          "newUser"
        ]
      },
      "EditorRequestDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "editor": {
            "$ref": "#/components/schemas/IdDto"
          }
        },
        "required": [
          "id",
          "editor"
        ]
      },
      "CreateTicketDto": {
        "type": "object",
        "properties": {}
      },
      "FormShortAnswerDto": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string"
          },
          "order": {
            "type": "number"
          },
          "points": {
            "type": "number"
          },
          "limit": {
            "type": "integer"
          },
          "answer": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "MULTIPLE_CHOICE",
              "TRUE_FALSE",
              "MULTIPLE_TRUE_FALSE",
              "SHORT_ANSWER",
              "LONG_ANSWER",
              "FILL_IN_THE_BLANK",
              "FILL_IN_THE_BLANK_DROPDOWN",
              "FILL_IN_MULTIPLE_BLANKS_DROPDOWN",
              "FILL_IN_MULTIPLE_BLANK_TEXT",
              "MATCHING",
              "NUMERICAL",
              "FORMULA",
              "ESSAY",
              "FILE_UPLOAD",
              "TEXT_NO_QUESTION",
              "ORDERING",
              "CODE"
            ],
            "default": "SHORT_ANSWER"
          }
        },
        "required": [
          "question",
          "order",
          "points",
          "limit",
          "answer",
          "type"
        ]
      },
      "FormLongAnswerDto": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string"
          },
          "order": {
            "type": "number"
          },
          "points": {
            "type": "number"
          },
          "minLimit": {
            "type": "integer"
          },
          "maxLimit": {
            "type": "integer"
          },
          "answer": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "MULTIPLE_CHOICE",
              "TRUE_FALSE",
              "MULTIPLE_TRUE_FALSE",
              "SHORT_ANSWER",
              "LONG_ANSWER",
              "FILL_IN_THE_BLANK",
              "FILL_IN_THE_BLANK_DROPDOWN",
              "FILL_IN_MULTIPLE_BLANKS_DROPDOWN",
              "FILL_IN_MULTIPLE_BLANK_TEXT",
              "MATCHING",
              "NUMERICAL",
              "FORMULA",
              "ESSAY",
              "FILE_UPLOAD",
              "TEXT_NO_QUESTION",
              "ORDERING",
              "CODE"
            ],
            "default": "LONG_ANSWER"
          }
        },
        "required": [
          "question",
          "order",
          "points",
          "minLimit",
          "maxLimit",
          "answer",
          "type"
        ]
      },
      "GetManyQuizEntityResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuizEntity"
            }
          },
          "count": {
            "type": "number"
          },
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pageCount": {
            "type": "number"
          }
        },
        "required": [
          "data",
          "count",
          "total",
          "page",
          "pageCount"
        ]
      },
      "QuizEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "owner": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "editors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEntity"
            }
          },
          "slug": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "body": {
            "type": "string",
            "description": "The body of the content for simple content types"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "DRAFT",
              "PUBLISHED",
              "FUTURE",
              "PENDING",
              "PRIVATE",
              "TRASH"
            ]
          },
          "thumbnail": {
            "$ref": "#/components/schemas/ImageEntity"
          },
          "questions": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FormShortAnswerDto"
                },
                {
                  "$ref": "#/components/schemas/FormLongAnswerDto"
                }
              ]
            }
          },
          "gradingInstructions": {
            "type": "string"
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "slug",
          "title",
          "questions",
          "gradingInstructions"
        ]
      },
      "CreateManyQuizEntityDto": {
        "type": "object",
        "properties": {
          "bulk": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuizEntity"
            }
          }
        },
        "required": [
          "bulk"
        ]
      },
      "CompetitionSubmissionDto": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "description": "The zip file containing the chess bot code"
          }
        },
        "required": [
          "file"
        ]
      },
      "TerminalDto": {
        "type": "object",
        "properties": {}
      },
      "ChessAgentResponseEntryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the user"
          },
          "username": {
            "type": "string",
            "description": "The username of the user who owns the chess agent"
          },
          "elo": {
            "type": "number",
            "description": "The ELO rating of the chess agent"
          }
        },
        "required": [
          "id",
          "username",
          "elo"
        ]
      },
      "ChessMoveRequestDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "fen": {
            "type": "string"
          }
        },
        "required": [
          "username",
          "fen"
        ]
      },
      "ChessMatchRequestDto": {
        "type": "object",
        "properties": {
          "player1username": {
            "type": "string"
          },
          "player2username": {
            "type": "string"
          }
        },
        "required": [
          "player1username",
          "player2username"
        ]
      },
      "ChessMatchResultDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "players": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "moves": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "winner": {
            "type": "string"
          },
          "draw": {
            "type": "boolean"
          },
          "result": {
            "type": "string",
            "enum": [
              "GAME_OVER",
              "DRAW",
              "NONE"
            ]
          },
          "reason": {
            "type": "string",
            "enum": [
              "CHECKMATE",
              "STALEMATE",
              "INSUFFICIENT_MATERIAL",
              "FIFTY_MOVE_RULE",
              "THREEFOLD_REPETITION",
              "INVALID_MOVE",
              "NONE"
            ]
          },
          "cpuTime": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "finalFen": {
            "type": "string"
          },
          "eloChange": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "elo": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "players",
          "moves",
          "winner",
          "draw",
          "result",
          "reason",
          "cpuTime",
          "finalFen",
          "eloChange",
          "elo",
          "createdAt"
        ]
      },
      "MatchSearchRequestDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "pageSize": {
            "type": "number",
            "default": 100
          },
          "pageId": {
            "type": "number",
            "default": 0
          }
        },
        "required": [
          "username",
          "pageSize",
          "pageId"
        ]
      },
      "MatchSearchResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "winner": {
            "type": "string"
          },
          "lastState": {
            "type": "string"
          },
          "players": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "points": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "cpuTime": {
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "winner",
          "lastState",
          "players",
          "points",
          "cpuTime"
        ]
      },
      "ChessLeaderboardResponseEntryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "elo": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "username",
          "elo"
        ]
      },
      "CompetitionMatchEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "run": {
            "$ref": "#/components/schemas/CompetitionRunEntity"
          },
          "p1submission": {
            "$ref": "#/components/schemas/CompetitionSubmissionEntity"
          },
          "p2submission": {
            "$ref": "#/components/schemas/CompetitionSubmissionEntity"
          },
          "winner": {
            "type": "string",
            "enum": [
              "Player1",
              "Player2"
            ]
          },
          "p1Points": {
            "type": "number"
          },
          "p2Points": {
            "type": "number"
          },
          "p1cpuTime": {
            "type": "number"
          },
          "p2cpuTime": {
            "type": "number"
          },
          "p1Turns": {
            "type": "number"
          },
          "p2Turns": {
            "type": "number"
          },
          "logs": {
            "type": "string"
          },
          "lastState": {
            "type": "string"
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "run",
          "p1submission",
          "p2submission",
          "winner",
          "p1Points",
          "p2Points",
          "p1cpuTime",
          "p2cpuTime",
          "p1Turns",
          "p2Turns",
          "logs",
          "lastState"
        ]
      },
      "CompetitionRunSubmissionReportEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "winsAsP1": {
            "type": "number"
          },
          "winsAsP2": {
            "type": "number"
          },
          "totalWins": {
            "type": "number"
          },
          "pointsAsP1": {
            "type": "number"
          },
          "pointsAsP2": {
            "type": "number"
          },
          "totalPoints": {
            "type": "number"
          },
          "run": {
            "$ref": "#/components/schemas/CompetitionRunEntity"
          },
          "submission": {
            "$ref": "#/components/schemas/CompetitionSubmissionEntity"
          },
          "user": {
            "$ref": "#/components/schemas/UserEntity"
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "winsAsP1",
          "winsAsP2",
          "totalWins",
          "pointsAsP1",
          "pointsAsP2",
          "totalPoints",
          "run",
          "submission",
          "user"
        ]
      },
      "CompetitionRunEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "type": "string",
            "enum": [
              "NOT_STARTED",
              "RUNNING",
              "FINISHED",
              "FAILED"
            ]
          },
          "gameType": {
            "type": "string"
          },
          "matches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompetitionMatchEntity"
            }
          },
          "reports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompetitionRunSubmissionReportEntity"
            }
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "state",
          "gameType",
          "matches",
          "reports"
        ]
      },
      "GetManyJobPostEntityResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobPostEntity"
            }
          },
          "count": {
            "type": "number"
          },
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pageCount": {
            "type": "number"
          }
        },
        "required": [
          "data",
          "count",
          "total",
          "page",
          "pageCount"
        ]
      },
      "GetManyJobTagEntityResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobTagEntity"
            }
          },
          "count": {
            "type": "number"
          },
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pageCount": {
            "type": "number"
          }
        },
        "required": [
          "data",
          "count",
          "total",
          "page",
          "pageCount"
        ]
      },
      "JobTagEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "name"
        ]
      },
      "JobPostEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "owner": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "editors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEntity"
            }
          },
          "slug": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "body": {
            "type": "string",
            "description": "The body of the content for simple content types"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "DRAFT",
              "PUBLISHED",
              "FUTURE",
              "PENDING",
              "PRIVATE",
              "TRASH"
            ]
          },
          "thumbnail": {
            "$ref": "#/components/schemas/ImageEntity"
          },
          "location": {
            "type": "string"
          },
          "job_type": {
            "type": "string",
            "enum": [
              "CONTINUOUS",
              "TASK"
            ]
          },
          "job_tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobTagEntity"
            }
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "slug",
          "title",
          "location",
          "job_type",
          "job_tags"
        ]
      },
      "JobPostCreateDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "owner": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "editors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEntity"
            }
          },
          "slug": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "body": {
            "type": "string",
            "description": "The body of the content for simple content types"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "DRAFT",
              "PUBLISHED",
              "FUTURE",
              "PENDING",
              "PRIVATE",
              "TRASH"
            ]
          },
          "thumbnail": {
            "$ref": "#/components/schemas/ImageEntity"
          },
          "location": {
            "type": "string"
          },
          "job_type": {
            "type": "string",
            "enum": [
              "CONTINUOUS",
              "TASK"
            ]
          },
          "job_tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobTagEntity"
            }
          },
          "job_tag_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "slug",
          "title",
          "location",
          "job_type",
          "job_tags",
          "job_tag_ids"
        ]
      },
      "JobPostWithAppliedDto": {
        "type": "object",
        "properties": {
          "location": {
            "type": "string",
            "nullable": false,
            "default": "Remote"
          },
          "job_type": {
            "type": "string",
            "enum": [
              "CONTINUOUS",
              "TASK"
            ],
            "default": "TASK",
            "nullable": false
          },
          "job_tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobTagEntity"
            }
          },
          "applied": {
            "type": "boolean",
            "default": false
          }
        },
        "required": [
          "location",
          "job_type",
          "job_tags",
          "applied"
        ]
      },
      "JobAplicationCreateDto": {
        "type": "object",
        "properties": {
          "job": {
            "$ref": "#/components/schemas/JobPostEntity"
          }
        },
        "required": [
          "job"
        ]
      },
      "GetManyJobApplicationEntityResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobApplicationEntity"
            }
          },
          "count": {
            "type": "number"
          },
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pageCount": {
            "type": "number"
          }
        },
        "required": [
          "data",
          "count",
          "total",
          "page",
          "pageCount"
        ]
      },
      "JobApplicationEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "applicant": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "job": {
            "$ref": "#/components/schemas/JobPostEntity"
          },
          "progress": {
            "type": "integer",
            "nullable": false,
            "default": 0
          },
          "rejected": {
            "type": "boolean",
            "nullable": false,
            "default": false
          },
          "withdrawn": {
            "type": "boolean",
            "nullable": false,
            "default": false
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "applicant",
          "job",
          "progress",
          "rejected",
          "withdrawn"
        ]
      },
      "CreateProgramRequestDto": {
        "type": "object",
        "properties": {}
      },
      "ProductProgram": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "orderIndex": {
            "type": "number",
            "description": "Position/order in the product/program sequence"
          },
          "isPrimary": {
            "type": "boolean",
            "description": "Whether this is the primary product for this program",
            "default": false
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Soft delete timestamp - when the relationship was deleted, null if active"
          },
          "product": {
            "description": "The product associated with this program",
            "allOf": [
              {
                "$ref": "#/components/schemas/Product"
              }
            ]
          },
          "program": {
            "description": "The program associated with this product",
            "allOf": [
              {
                "$ref": "#/components/schemas/Program"
              }
            ]
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "orderIndex",
          "isPrimary",
          "product",
          "program"
        ]
      },
      "ProductSubscriptionPlan": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "description": "Display name of the subscription plan"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the subscription plan benefits"
          },
          "type": {
            "type": "string",
            "description": "Type of subscription (monthly, quarterly, annual, etc.)"
          },
          "price": {
            "type": "number",
            "description": "Current price of the subscription, stored as decimal for precision"
          },
          "basePrice": {
            "type": "number",
            "description": "Original price before any discounts, used for comparison"
          },
          "billingInterval": {
            "type": "string",
            "description": "Time unit for billing (day, week, month, year)"
          },
          "billingIntervalCount": {
            "type": "number",
            "description": "Number of intervals between billings, e.g. 3 for every 3 months",
            "default": 1
          },
          "trialPeriodDays": {
            "type": "number",
            "description": "Number of days in free trial period, null for no trial"
          },
          "features": {
            "type": "object",
            "description": "Array of features included in this subscription plan"
          },
          "availabilityRules": {
            "type": "object",
            "description": "Rules for when this subscription plan is available (region, user type, etc.)"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Soft delete timestamp - when the plan was deleted, null if active"
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "name",
          "type",
          "price",
          "basePrice",
          "billingInterval",
          "billingIntervalCount"
        ]
      },
      "PromoCode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "code": {
            "type": "string",
            "description": "The code users enter to apply the discount"
          },
          "type": {
            "type": "string",
            "description": "What kind of discount this code provides"
          },
          "discountPercentage": {
            "type": "number",
            "description": "Percentage discount when type is percentage_off"
          },
          "affiliatePercentage": {
            "type": "number",
            "description": "How much of discount is paid by affiliate"
          },
          "maxUses": {
            "type": "number",
            "description": "Null for unlimited uses"
          },
          "usesCount": {
            "type": "number",
            "description": "Current number of times this code has been used",
            "default": 0
          },
          "maxUsesPerUser": {
            "type": "number",
            "description": "How many times one user can use this code",
            "default": 1
          },
          "startsAt": {
            "format": "date-time",
            "type": "string",
            "description": "When this code becomes valid"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "When this code expires, null for no expiration"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether this code can currently be used",
            "default": true
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Soft delete timestamp - when the code was deleted, null if active"
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "code",
          "type",
          "usesCount",
          "maxUsesPerUser",
          "startsAt",
          "isActive"
        ]
      },
      "FinancialTransaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "fromUser": {
            "description": "Source user, null if system credit or external payment",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserEntity"
              }
            ]
          },
          "toUser": {
            "description": "Destination user, null if system debit or external payment",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserEntity"
              }
            ]
          },
          "product": {
            "description": "Product being purchased, if applicable",
            "allOf": [
              {
                "$ref": "#/components/schemas/Product"
              }
            ]
          },
          "pricing": {
            "description": "Specific pricing used for this transaction",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductPricing"
              }
            ]
          },
          "subscriptionPlan": {
            "description": "Subscription plan for subscription transactions",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductSubscriptionPlan"
              }
            ]
          },
          "promoCode": {
            "description": "Promo code applied to this transaction",
            "allOf": [
              {
                "$ref": "#/components/schemas/PromoCode"
              }
            ]
          },
          "transactionType": {
            "type": "string",
            "enum": [
              "purchase",
              "refund",
              "withdrawal",
              "deposit",
              "transfer",
              "fee",
              "adjustment"
            ],
            "description": "Type of financial transaction (purchase, refund, etc.)"
          },
          "amount": {
            "type": "number",
            "description": "Actual amount of the transaction after discounts"
          },
          "originalAmount": {
            "type": "number",
            "description": "Original amount before any discounts or adjustments"
          },
          "referrerUser": {
            "description": "User who referred this transaction for commission",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserEntity"
              }
            ]
          },
          "referralCommissionAmount": {
            "type": "number",
            "description": "Amount paid to referrer as commission"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "processing",
              "completed",
              "failed",
              "refunded",
              "cancelled"
            ],
            "description": "Current status of this transaction (pending, completed, etc.)"
          },
          "paymentProvider": {
            "type": "string",
            "description": "Payment processor used (stripe, paypal, crypto, etc.)"
          },
          "paymentProviderTransactionId": {
            "type": "string",
            "description": "External transaction ID from the payment provider for reconciliation"
          },
          "metadata": {
            "type": "object",
            "description": "Additional transaction-specific data such as payment details, items, etc."
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Soft delete timestamp - when the transaction was deleted, null if active"
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "transactionType",
          "amount",
          "originalAmount",
          "status",
          "paymentProvider",
          "paymentProviderTransactionId"
        ]
      },
      "ProductPricing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "basePrice": {
            "type": "number",
            "description": "Standard price of the product before any discounts"
          },
          "creatorSharePercentage": {
            "type": "number",
            "description": "Percentage of revenue that goes to the content creator",
            "default": 70
          },
          "taxRate": {
            "type": "number",
            "description": "Applicable tax rate for this product"
          },
          "availabilityRules": {
            "type": "object",
            "description": "Rules for when this pricing is available (e.g., time-limited offers, regional pricing)"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Soft delete timestamp - when the pricing was deleted, null if active"
          },
          "product": {
            "description": "The product this pricing applies to",
            "allOf": [
              {
                "$ref": "#/components/schemas/Product"
              }
            ]
          },
          "transactions": {
            "description": "Financial transactions associated with this pricing",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FinancialTransaction"
            }
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "basePrice",
          "creatorSharePercentage",
          "taxRate",
          "product",
          "transactions"
        ]
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string",
            "description": "Product title/name displayed to users"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the product"
          },
          "thumbnail": {
            "type": "string",
            "description": "URL or path to product thumbnail image"
          },
          "type": {
            "type": "string",
            "enum": [
              "program",
              "learning_pathway",
              "bundle",
              "subscription",
              "workshop",
              "mentorship",
              "ebook",
              "resource_pack",
              "community",
              "certification",
              "other"
            ],
            "description": "Type of product (program, bundle, subscription, etc.)"
          },
          "isBundle": {
            "type": "boolean",
            "description": "Whether this product is a bundle of other products"
          },
          "bundleItems": {
            "type": "object",
            "description": "Array of product IDs included in the bundle"
          },
          "metadata": {
            "type": "object",
            "description": "Flexible storage for product type-specific configuration"
          },
          "referralCommissionPercentage": {
            "type": "number",
            "description": "Default 30% commission for referrals"
          },
          "maxAffiliateDiscount": {
            "type": "number",
            "description": "Maximum % discount affiliate can offer, 0 means no affiliate allowed"
          },
          "affiliateCommissionPercentage": {
            "type": "number",
            "description": "Commission % from remaining value after discount"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "draft",
              "published",
              "archived"
            ],
            "description": "Product visibility status (draft, published, archived)"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Soft delete timestamp - when the product was deleted, null if active"
          },
          "productPrograms": {
            "description": "Program relationships for this product",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductProgram"
            }
          },
          "pricing": {
            "description": "Pricing options for this product",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductPricing"
            }
          },
          "subscriptionPlans": {
            "description": "Subscription plans for this product",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductSubscriptionPlan"
            }
          },
          "userProducts": {
            "description": "Users who have access to this product",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserProduct"
            }
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "title",
          "description",
          "type",
          "isBundle",
          "metadata",
          "referralCommissionPercentage",
          "maxAffiliateDiscount",
          "affiliateCommissionPercentage",
          "visibility",
          "productPrograms",
          "pricing",
          "subscriptionPlans",
          "userProducts"
        ]
      },
      "UserSubscription": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Current status of the subscription (active, canceled, etc.)"
          },
          "currentPeriodStart": {
            "format": "date-time",
            "type": "string",
            "description": "Start date of the current billing period"
          },
          "currentPeriodEnd": {
            "format": "date-time",
            "type": "string",
            "description": "End date of the current billing period"
          },
          "cancelAtPeriodEnd": {
            "type": "boolean",
            "description": "Whether subscription will cancel at the end of current period",
            "default": false
          },
          "canceledAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the subscription was canceled, null if not canceled"
          },
          "endedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the subscription ended, null if still active"
          },
          "trialEnd": {
            "format": "date-time",
            "type": "string",
            "description": "When the trial period ends, null if no trial or trial ended"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Soft delete timestamp - when the subscription was deleted, null if active"
          },
          "user": {
            "description": "User who owns this subscription",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserEntity"
              }
            ]
          },
          "subscriptionPlan": {
            "description": "The subscription plan this user is enrolled in",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductSubscriptionPlan"
              }
            ]
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "status",
          "currentPeriodStart",
          "currentPeriodEnd",
          "cancelAtPeriodEnd",
          "user",
          "subscriptionPlan"
        ]
      },
      "UserProduct": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "description": "User who has access to this product",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserEntity"
              }
            ]
          },
          "product": {
            "description": "Product the user has access to",
            "allOf": [
              {
                "$ref": "#/components/schemas/Product"
              }
            ]
          },
          "subscription": {
            "description": "If product access is through subscription",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSubscription"
              }
            ]
          },
          "acquisitionType": {
            "type": "string",
            "description": "How the product was acquired (purchased, subscription, gift, etc.)"
          },
          "purchaseTransaction": {
            "description": "Reference to the transaction if purchased",
            "allOf": [
              {
                "$ref": "#/components/schemas/FinancialTransaction"
              }
            ]
          },
          "accessExpiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "Null means permanent access, otherwise when access ends"
          },
          "accessStartedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the user first gained access"
          },
          "status": {
            "type": "string",
            "description": "Current status of user access to this product"
          },
          "metadata": {
            "type": "object",
            "description": "Flexible storage for product-specific access settings, usage limitations, custom permissions, etc."
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Soft delete timestamp - when the access record was deleted, null if active"
          },
          "programUsers": {
            "description": "Program user entries associated with this product access",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProgramUser"
            }
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "user",
          "product",
          "acquisitionType",
          "accessStartedAt",
          "status",
          "metadata",
          "programUsers"
        ]
      },
      "ActivityGrade": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "grade": {
            "type": "number",
            "nullable": true
          },
          "gradedAt": {
            "format": "date-time",
            "type": "string",
            "nullable": true
          },
          "feedback": {
            "type": "string",
            "nullable": true,
            "description": "Feedback for the activity grade"
          },
          "rubricAssessment": {
            "type": "object",
            "nullable": true,
            "description": "Rubric assessment data in JSON format"
          },
          "metadata": {
            "type": "object",
            "nullable": true,
            "description": "Additional metadata in JSON format"
          },
          "contentInteraction": {
            "description": "The content interaction being graded",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContentInteraction"
              }
            ]
          },
          "graderProgramUser": {
            "nullable": true,
            "description": "The program user who provided the grade",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProgramUser"
              }
            ]
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "grade",
          "gradedAt",
          "feedback",
          "rubricAssessment",
          "metadata",
          "contentInteraction",
          "graderProgramUser"
        ]
      },
      "ContentInteraction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "not_started",
              "in_progress",
              "completed",
              "skipped"
            ],
            "description": "Current completion status"
          },
          "startedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the user first accessed this content"
          },
          "completedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the user completed this content"
          },
          "timeSpentSeconds": {
            "type": "number",
            "description": "Total time spent on this content"
          },
          "lastAccessedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the user last accessed this content"
          },
          "submittedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the submission was received, null if no submission yet"
          },
          "answers": {
            "type": "object",
            "description": "Structured data containing quiz answers with question IDs and selected responses"
          },
          "textResponse": {
            "type": "string",
            "description": "Plain text submission for text-based assignments"
          },
          "urlResponse": {
            "type": "string",
            "description": "URL reference for external content submissions"
          },
          "fileResponse": {
            "type": "object",
            "description": "Metadata for uploaded files including paths, types, sizes, etc."
          },
          "metadata": {
            "type": "object",
            "description": "Additional data based on content type"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Soft delete timestamp - when the record was deleted, null if active"
          },
          "programUser": {
            "description": "Reference to the program enrollment",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProgramUser"
              }
            ]
          },
          "content": {
            "description": "Reference to the program content item being interacted with",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProgramContent"
              }
            ]
          },
          "grades": {
            "description": "Grades associated with this interaction",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityGrade"
            }
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "status",
          "timeSpentSeconds",
          "programUser",
          "content",
          "grades"
        ]
      },
      "ProgramUserRole": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "program": {
            "description": "Reference to the program this role applies to",
            "allOf": [
              {
                "$ref": "#/components/schemas/Program"
              }
            ]
          },
          "programUser": {
            "description": "Reference to the user whose role is being defined",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProgramUser"
              }
            ]
          },
          "role": {
            "type": "string",
            "enum": [
              "student",
              "instructor",
              "editor",
              "administrator",
              "teaching_assistant"
            ],
            "description": "Type of role assigned to the user in this program"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Soft delete timestamp - when the role was deleted, null if active"
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "program",
          "programUser",
          "role"
        ]
      },
      "ProgramUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "userProduct": {
            "description": "Reference to the purchased product that grants access to this program",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserProduct"
              }
            ]
          },
          "program": {
            "description": "Reference to the program the user is enrolled in",
            "allOf": [
              {
                "$ref": "#/components/schemas/Program"
              }
            ]
          },
          "analytics": {
            "type": "object",
            "description": "Tracks time spent on different parts of the program, last accessed timestamps, etc."
          },
          "grades": {
            "type": "object",
            "description": "Cache of user grades for quick access (quizzes, assignments, overall grade)"
          },
          "progress": {
            "type": "object",
            "description": "Completion status of program content (pages, activities, etc.)"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Soft delete timestamp - when enrollment was deleted, null if active"
          },
          "contentInteractions": {
            "description": "User interactions with program content",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentInteraction"
            }
          },
          "roles": {
            "description": "Roles assigned to this user in the program",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProgramUserRole"
            }
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "userProduct",
          "program",
          "analytics",
          "grades",
          "progress",
          "contentInteractions",
          "roles"
        ]
      },
      "Program": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "slug": {
            "type": "string",
            "description": "URL-friendly identifier for the program, used in program links"
          },
          "summary": {
            "type": "string",
            "description": "Brief description of the program for listings and previews"
          },
          "body": {
            "type": "object",
            "description": "Main program content in JSON format, includes description, objectives, etc."
          },
          "tenancyDomains": {
            "description": "Array of allowed email domains, null if not tenancy-fenced",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cachedEnrollmentCount": {
            "type": "number",
            "description": "Denormalized count of current enrolled students for quick access"
          },
          "cachedCompletionCount": {
            "type": "number",
            "description": "Denormalized count of students who completed the program"
          },
          "cachedStudentsCompletionRate": {
            "type": "number",
            "description": "Precomputed percentage of enrolled students who completed the program"
          },
          "cachedRating": {
            "type": "number",
            "description": "Precomputed average rating of the program"
          },
          "metadata": {
            "type": "object",
            "description": "Program type specific data, late penalty etc"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Soft delete timestamp - when the program was deleted, null if active"
          },
          "contents": {
            "description": "Content items belonging to this program",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProgramContent"
            }
          },
          "programUsers": {
            "description": "Users enrolled in this program",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProgramUser"
            }
          },
          "programUserRoles": {
            "description": "User roles within this program",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProgramUserRole"
            }
          },
          "productPrograms": {
            "description": "Product relationships for this program",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductProgram"
            }
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "slug",
          "summary",
          "body",
          "cachedEnrollmentCount",
          "cachedCompletionCount",
          "cachedStudentsCompletionRate",
          "cachedRating",
          "contents",
          "programUsers",
          "programUserRoles",
          "productPrograms"
        ]
      },
      "ProgramContent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "program": {
            "description": "Reference to the program this content belongs to",
            "allOf": [
              {
                "$ref": "#/components/schemas/Program"
              }
            ]
          },
          "parent": {
            "description": "Self-referential for hierarchical structure, null if top-level content",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProgramContent"
              }
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "page",
              "assignment",
              "questionnaire",
              "discussion",
              "code",
              "challenge",
              "reflection",
              "survey"
            ],
            "description": "Type of content (page, quiz, assignment, discussion, etc.)"
          },
          "title": {
            "type": "string",
            "description": "Title/name of the content shown in navigation and headers"
          },
          "summary": {
            "type": "string",
            "description": "Brief description of the content, shown in previews"
          },
          "order": {
            "type": "number",
            "description": "Position value for sorting content, allows for flexible ordering"
          },
          "body": {
            "type": "object",
            "description": "Main content in structured JSON format including text, questions, instructions, etc."
          },
          "previewable": {
            "type": "boolean",
            "description": "Flag to indicate if this content can be accessed without purchasing the program"
          },
          "dueDate": {
            "format": "date-time",
            "type": "string",
            "description": "Deadline for completion, null if no deadline"
          },
          "availableFrom": {
            "format": "date-time",
            "type": "string",
            "description": "When this content becomes available to users, null if always available"
          },
          "availableTo": {
            "format": "date-time",
            "type": "string",
            "description": "When this content becomes unavailable, null if never expires"
          },
          "gradingMethod": {
            "type": "string",
            "enum": [
              "instructor",
              "peer",
              "ai",
              "automated_tests"
            ],
            "description": "Method used to grade this content (null for pages)"
          },
          "durationMinutes": {
            "type": "number",
            "description": "Time limit in minutes for timed activities, null means no time limit"
          },
          "textResponse": {
            "type": "boolean",
            "description": "Whether text response is accepted for submission"
          },
          "urlResponse": {
            "type": "boolean",
            "description": "Whether URL submission is accepted"
          },
          "fileResponseExtensions": {
            "description": "Allowed file extensions for uploads: null = not accepted, [] = any file, [\"pdf\",\"docx\"] = only these extensions",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "gradingRubric": {
            "type": "object",
            "description": "Detailed rubric configuration for consistent grading, including criteria and point values"
          },
          "metadata": {
            "type": "object",
            "description": "Flexible storage for content-specific settings based on type"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Soft delete timestamp - when the content was deleted, null if active"
          },
          "interactions": {
            "description": "User interactions with this content",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentInteraction"
            }
          },
          "children": {
            "description": "Child content items in hierarchical structure",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProgramContent"
            }
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "program",
          "type",
          "title",
          "order",
          "body",
          "previewable",
          "textResponse",
          "urlResponse",
          "interactions",
          "children"
        ]
      },
      "UpdateProgramRequestDto": {
        "type": "object",
        "properties": {}
      },
      "EnrollmentRequestDto": {
        "type": "object",
        "properties": {}
      },
      "AssignRoleDto": {
        "type": "object",
        "properties": {}
      },
      "CreateCertificateTemplateDto": {
        "type": "object",
        "properties": {
          "programId": {
            "type": "string",
            "description": "Program ID this certificate is associated with"
          },
          "productId": {
            "type": "string",
            "description": "Product ID this certificate is associated with"
          },
          "certificateType": {
            "type": "string",
            "enum": [
              "program_completion",
              "product_bundle_completion",
              "learning_pathway",
              "skill_mastery",
              "event_participation",
              "assessment_passed",
              "project_completion",
              "specialization",
              "professional",
              "achievement",
              "instructor",
              "time_investment",
              "peer_recognition"
            ],
            "description": "Type of certificate"
          },
          "name": {
            "type": "string",
            "description": "Display name for this certificate"
          },
          "description": {
            "type": "string",
            "description": "Description of what this certificate represents"
          },
          "htmlTemplate": {
            "type": "string",
            "description": "HTML template for certificate generation"
          },
          "cssStyles": {
            "type": "string",
            "description": "CSS styles for certificate template"
          },
          "autoIssue": {
            "type": "boolean",
            "description": "Whether certificates are automatically issued",
            "default": true
          },
          "minimumGrade": {
            "type": "number",
            "description": "Minimum grade percentage required (0-100)",
            "default": 70
          },
          "completionPercentage": {
            "type": "number",
            "description": "Completion percentage required (0-100)",
            "default": 100
          },
          "requiresFeedback": {
            "type": "boolean",
            "description": "Whether feedback is required",
            "default": false
          },
          "requiresRating": {
            "type": "boolean",
            "description": "Whether rating is required",
            "default": false
          },
          "minimumRating": {
            "type": "number",
            "description": "Minimum rating required if rating is mandatory"
          },
          "feedbackFormTemplate": {
            "type": "object",
            "description": "Feedback form template"
          },
          "expirationMonths": {
            "type": "number",
            "description": "Certificate expiration in months"
          },
          "certificateVerificationMethod": {
            "type": "string",
            "enum": [
              "code",
              "blockchain",
              "both"
            ],
            "description": "Verification method"
          },
          "prerequisites": {
            "type": "object",
            "description": "Prerequisites"
          },
          "badgeImage": {
            "type": "string",
            "description": "Badge image URL"
          },
          "signatureImage": {
            "type": "string",
            "description": "Signature image URL"
          },
          "credentialTitle": {
            "type": "string",
            "description": "Credential title"
          },
          "issuerName": {
            "type": "string",
            "description": "Issuer name"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata"
          }
        },
        "required": [
          "certificateType",
          "name",
          "description",
          "htmlTemplate",
          "cssStyles"
        ]
      },
      "IssueCertificateDto": {
        "type": "object",
        "properties": {
          "certificateId": {
            "type": "string",
            "description": "ID of the certificate template to use"
          },
          "programId": {
            "type": "string",
            "description": "Program ID for program-specific certificates"
          },
          "productId": {
            "type": "string",
            "description": "Product ID for product-specific certificates"
          },
          "userId": {
            "type": "string",
            "description": "ID of the user to issue certificate to"
          },
          "programUserId": {
            "type": "string",
            "description": "Program user ID if certificate is program-specific"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "expired",
              "revoked",
              "pending"
            ],
            "description": "Initial status of the certificate"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "Certificate expiration date"
          },
          "metadata": {
            "type": "object",
            "description": "Custom metadata for the certificate instance"
          }
        },
        "required": [
          "certificateId",
          "userId"
        ]
      },
      "TagRelationship": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "description": "Type of relationship (prerequisite, related, parent, etc.)"
          },
          "metadata": {
            "type": "object",
            "description": "Additional relationship-specific configuration"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Soft delete timestamp - when the relationship was deleted, null if active"
          },
          "sourceTag": {
            "description": "The source tag in the relationship",
            "allOf": [
              {
                "$ref": "#/components/schemas/Tag"
              }
            ]
          },
          "targetTag": {
            "description": "The target tag in the relationship",
            "allOf": [
              {
                "$ref": "#/components/schemas/Tag"
              }
            ]
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "type",
          "sourceTag",
          "targetTag"
        ]
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "description": "Display name of the tag"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of what this tag represents"
          },
          "type": {
            "type": "string",
            "enum": [
              "skill",
              "topic",
              "technology",
              "difficulty",
              "category",
              "industry",
              "certification"
            ],
            "description": "Category type of the tag (skill, topic, technology, etc.)"
          },
          "category": {
            "type": "string",
            "description": "Optional sub-category for organizational purposes"
          },
          "metadata": {
            "type": "object",
            "description": "Additional tag-specific metadata and configuration"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Soft delete timestamp"
          },
          "sourceRelationships": {
            "description": "Outgoing tag relationships where this tag is the source",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagRelationship"
            }
          },
          "targetRelationships": {
            "description": "Incoming tag relationships where this tag is the target",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagRelationship"
            }
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "name",
          "type"
        ]
      },
      "TagProficiency": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "tag": {
            "description": "Tag this proficiency level applies to",
            "allOf": [
              {
                "$ref": "#/components/schemas/Tag"
              }
            ]
          },
          "proficiencyLevel": {
            "type": "string",
            "enum": [
              "awareness",
              "novice",
              "beginner",
              "intermediate",
              "advanced",
              "expert",
              "master"
            ],
            "description": "The proficiency level (novice, intermediate, expert, etc.)"
          },
          "proficiencyLevelValue": {
            "type": "number",
            "description": "Numeric value representing the proficiency level, to speedup sorting and filtering"
          },
          "description": {
            "type": "string",
            "description": "Description of what this proficiency level means for this specific tag/skill"
          },
          "prerequisites": {
            "type": "object",
            "description": "Other tag proficiencies required before achieving this level"
          },
          "metadata": {
            "type": "object",
            "description": "Additional proficiency-specific configuration"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Soft delete timestamp"
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "tag",
          "proficiencyLevel",
          "proficiencyLevelValue"
        ]
      },
      "CertificateTag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "description": "Type of relationship (requirement, recommendation, provides)"
          },
          "metadata": {
            "type": "object",
            "description": "Additional tag-specific data like specific competencies, context, etc."
          },
          "certificate": {
            "description": "The certificate associated with this tag relationship",
            "allOf": [
              {
                "$ref": "#/components/schemas/Certificate"
              }
            ]
          },
          "tagProficiency": {
            "description": "The tag proficiency level associated with this certificate",
            "allOf": [
              {
                "$ref": "#/components/schemas/TagProficiency"
              }
            ]
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "type",
          "certificate",
          "tagProficiency"
        ]
      },
      "Certificate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "program": {
            "description": "Reference to specific program (null for multi-program certificates)",
            "allOf": [
              {
                "$ref": "#/components/schemas/Program"
              }
            ]
          },
          "product": {
            "description": "Reference to specific product/bundle (null for cross-product certificates)",
            "allOf": [
              {
                "$ref": "#/components/schemas/Product"
              }
            ]
          },
          "certificateType": {
            "type": "string",
            "enum": [
              "program_completion",
              "product_bundle_completion",
              "learning_pathway",
              "skill_mastery",
              "event_participation",
              "assessment_passed",
              "project_completion",
              "specialization",
              "professional",
              "achievement",
              "instructor",
              "time_investment",
              "peer_recognition"
            ],
            "description": "What this certificate type proves when earned"
          },
          "name": {
            "type": "string",
            "description": "Display name for this certificate type"
          },
          "description": {
            "type": "string",
            "description": "Description of what this certificate represents"
          },
          "htmlTemplate": {
            "type": "string",
            "description": "HTML template for certificate generation with variable placeholders like {{name}}, {{date}}, {{program}}"
          },
          "cssStyles": {
            "type": "string",
            "description": "CSS styles for certificate template to control appearance, fonts, colors, etc."
          },
          "autoIssue": {
            "type": "boolean",
            "description": "Whether certificates are automatically issued upon completion or require manual approval"
          },
          "minimumGrade": {
            "type": "number",
            "description": "Minimum grade percentage required to earn a certificate (0-100)"
          },
          "completionPercentage": {
            "type": "number",
            "description": "Percentage of required content that must be completed (0-100)"
          },
          "requiresFeedback": {
            "type": "boolean",
            "description": "Whether certificate requires submission of feedback form"
          },
          "requiresRating": {
            "type": "boolean",
            "description": "Whether certificate requires program rating submission"
          },
          "minimumRating": {
            "type": "number",
            "description": "Minimum rating required if rating is mandatory (1-5 scale), null means any rating accepted"
          },
          "feedbackFormTemplate": {
            "type": "object",
            "description": "JSON template defining feedback form structure when requires_feedback is true"
          },
          "expirationMonths": {
            "type": "number",
            "description": "Number of months until certificate expires, null for no expiration"
          },
          "certificateVerificationMethod": {
            "type": "string",
            "enum": [
              "code",
              "blockchain",
              "both"
            ],
            "description": "Method used to verify certificate authenticity"
          },
          "prerequisites": {
            "type": "object",
            "description": "Required achievements/programs before certificate can be issued"
          },
          "badgeImage": {
            "type": "string",
            "description": "URL or path to digital badge image for social sharing and profiles"
          },
          "signatureImage": {
            "type": "string",
            "description": "URL or path to authorizing signature image"
          },
          "credentialTitle": {
            "type": "string",
            "description": "Professional title/credential granted by this certificate"
          },
          "issuerName": {
            "type": "string",
            "description": "Name of institution or entity issuing the certificate"
          },
          "metadata": {
            "type": "object",
            "description": "Additional configuration: custom fields, internationalization, visibility, etc."
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether this certificate template is currently active"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Soft delete timestamp"
          },
          "userCertificates": {
            "description": "User certificates issued from this template",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserCertificate"
            }
          },
          "certificateTags": {
            "description": "Tag relationships associated with this certificate",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CertificateTag"
            }
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "certificateType",
          "name",
          "description",
          "htmlTemplate",
          "cssStyles",
          "autoIssue",
          "minimumGrade",
          "completionPercentage",
          "requiresFeedback",
          "requiresRating",
          "certificateVerificationMethod",
          "isActive",
          "userCertificates",
          "certificateTags"
        ]
      },
      "UserCertificate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "program": {
            "description": "Reference to the program for single program certificates (null for multi-program certs)",
            "allOf": [
              {
                "$ref": "#/components/schemas/Program"
              }
            ]
          },
          "product": {
            "description": "Reference to the product/bundle for product certificates (null for program-only certs)",
            "allOf": [
              {
                "$ref": "#/components/schemas/Product"
              }
            ]
          },
          "user": {
            "description": "User who earned the certificate",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserEntity"
              }
            ]
          },
          "programUser": {
            "description": "Program enrollment record if certificate is program-specific",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProgramUser"
              }
            ]
          },
          "certificate": {
            "description": "Reference to the certificate template/configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/Certificate"
              }
            ]
          },
          "certificateNumber": {
            "type": "string",
            "description": "Unique certificate number for verification"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "expired",
              "revoked",
              "pending"
            ],
            "description": "Current status of the certificate"
          },
          "issuedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the certificate was issued"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the certificate expires, null for no expiration"
          },
          "revokedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the certificate was revoked, null if never revoked"
          },
          "revocationReason": {
            "type": "string",
            "description": "Reason for revocation if applicable"
          },
          "certificateUrl": {
            "type": "string",
            "description": "URL where the certificate can be viewed or downloaded"
          },
          "metadata": {
            "type": "object",
            "description": "Additional data specific to the certificate instance"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Soft delete timestamp"
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "user",
          "certificate",
          "certificateNumber",
          "status",
          "issuedAt"
        ]
      },
      "VerificationDetails": {
        "type": "object",
        "properties": {
          "issuedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when certificate was issued"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "Certificate expiration date"
          },
          "status": {
            "type": "string",
            "description": "Certificate status"
          },
          "certificateNumber": {
            "type": "string",
            "description": "Certificate number for verification"
          },
          "programTitle": {
            "type": "string",
            "description": "Program title if applicable"
          },
          "productTitle": {
            "type": "string",
            "description": "Product title if applicable"
          },
          "blockchainVerified": {
            "type": "boolean",
            "description": "Whether blockchain verification was successful"
          },
          "hashVerified": {
            "type": "boolean",
            "description": "Whether hash verification was successful"
          },
          "issuerName": {
            "type": "string",
            "description": "Issuer name"
          }
        },
        "required": [
          "issuedAt",
          "status",
          "certificateNumber",
          "blockchainVerified",
          "hashVerified"
        ]
      },
      "CertificateVerificationResult": {
        "type": "object",
        "properties": {
          "isValid": {
            "type": "boolean",
            "description": "Whether the certificate is valid"
          },
          "certificate": {
            "description": "Certificate details if valid",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserCertificate"
              }
            ]
          },
          "verificationDetails": {
            "description": "Verification details",
            "allOf": [
              {
                "$ref": "#/components/schemas/VerificationDetails"
              }
            ]
          },
          "errors": {
            "description": "Validation errors if any",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "isValid",
          "verificationDetails"
        ]
      }
    }
  }
}