"use client";

import React, {useCallback, useEffect} from "react";
import {BrowserProvider} from "ethers";
import {signIn} from "@/auth";


type Action =
  | { type: "CONNECT_TO_PROVIDER_INITIAL" }
  | { type: "CONNECT_TO_PROVIDER_SUCCESS", payload: { provider: BrowserProvider, accountAddress: string } }
  | { type: "CONNECT_TO_PROVIDER_FAILURE", payload: { error: string } }
  | { type: "FETCH_INITIAL" }
  | { type: "FETCH_SUCCESS", payload: {} }
  | { type: "FETCH_FAILURE", payload: { error: string } };

type Web3ContextData = { state: State; dispatch: Dispatch } | undefined;

type Dispatch = (action: Action) => void;

type Props = { children: React.ReactNode };

type State = {
  provider: BrowserProvider | undefined;
  accountAddress: string | undefined;
};

const Web3Context = React.createContext<Web3ContextData>(undefined);

const InitialState: State = {
  provider: undefined,
  accountAddress: undefined
};

function web3Reducer(state: State, action: Action) {
  switch (action.type) {
    case "CONNECT_TO_PROVIDER_INITIAL": {
      return {
        ...state
      };
    }
    case "CONNECT_TO_PROVIDER_SUCCESS": {
      return {
        ...state,
        provider: action.payload.provider,
        accountAddress: action.payload.accountAddress
      };
    }
    case "CONNECT_TO_PROVIDER_FAILURE": {
      return {
        ...state,
        error: action.payload.error
      };
    }
    default: {
      // throw new Error(`Unhandled action type: ${action.type}`);
      return state;
    }
  }
}

export function Web3Provider({children}: Readonly<Props>) {
  const [state, dispatch] = React.useReducer(web3Reducer, InitialState);

  React.useEffect(() => {
  }, []);

  const value = {state, dispatch};

  return (
    <Web3Context.Provider value={value}>
      {children}
    </Web3Context.Provider>
  );
}

export function useWeb3() {
  const context = React.useContext(Web3Context);

  if (context === undefined) {
    throw new Error("useWeb3 must be used within a Web3Provider");
  }

  return context;
}

export function useConnectToWallet() {
  const {dispatch} = useWeb3();

  const connectToWallet = async () => {
    dispatch({type: "CONNECT_TO_PROVIDER_INITIAL"});

    try {
      if (window.ethereum) {
        const ethereum = window.ethereum;

        await ethereum.request({method: "eth_requestAccounts"});

        const provider = new BrowserProvider(window.ethereum);

        const signer = await provider.getSigner();
        const accountAddress = await signer.getAddress();

        dispatch({type: "CONNECT_TO_PROVIDER_SUCCESS", payload: {provider, accountAddress}});
      } else {
        dispatch({type: "CONNECT_TO_PROVIDER_FAILURE", payload: {error: "MetaMask is not detected."}});
      }
    } catch (error) {
      dispatch({type: "CONNECT_TO_PROVIDER_FAILURE", payload: {error: (error as Error).message}});
    }
  };

  return [connectToWallet];
}

export function useSignInWithWeb3() {
  const {state, dispatch} = useWeb3();
  const [connectToWallet] = useConnectToWallet();

  const signInWithWeb3 = useCallback(async () => {
    if (!state.provider) {
      await connectToWallet();
    }
  }, [state.provider, connectToWallet]);

  useEffect(() => {
    const tryToSignIn = async () => {
      if (state.provider && state.accountAddress) {

        // TODO: this message should be generated by the server and sent to the client.
        // const challengeResponse = await fetch('api/(auth)/web3/sign-in');
        // const message = new SiweMessage({
        //   domain: window.location.host,
        //   address: address,
        //   statement: "Sign in with Ethereum to the app.",
        //   uri: window.location.origin,
        //   version: "1",
        //   chainId: chain?.id,
        //   nonce: await getCsrfToken(),
        // })

        // export interface VerifyParams {
        //   /** Signature of the message signed by the wallet */
        //   signature: string;
        //
        //   /** RFC 4501 dns authority that is requesting the signing. */
        //   domain?: string;
        //
        //   /** Randomized token used to prevent replay attacks, at least 8 alphanumeric characters. */
        //   nonce?: string;
        //
        //   /**ISO 8601 datetime string of the current time. */
        //   time?: string;
        // }

        // const { message } = await challengeResponse.json();
        // const challenge = fetchWeb3SignInChallenge();
        const challenge = `${window.location.host} wants you to sign in with your Ethereum account:\n${state.accountAddress}\n\nI accept the MetaMask Terms of Service: https://community.metamask.io/tos\n\nURI: https://${window.location.host}\nVersion: 1\nChain ID: 1\nNonce: 32891757\nIssued At: 2021-09-30T16:25:24.000Z`;

        const message = `0x${Buffer.from(challenge, 'utf8').toString('hex')}`;

        // Eip1193Provider.
        const signature = await state.provider.send(
          "personal_sign",
          [message, state.accountAddress]
        );

        await signIn('web-3', {message, signature});
        // TODO: send the signature to the server to verify the user's identity.
        // It should be done using the auth.js (next-auth) library.
        //   //       // TODO: Verify the signature on the server.
        // const validationResponse = await fetch('api/(auth)/web3/sign-in', {
        //   method: 'POST',
        //   headers: {
        //     'Content-Type': 'application/json',
        //   },
        //   body: JSON.stringify({
        //     accountAddress: accountAddress,
        //     message: message,
        //     signature: signature,
        //   }),
        // });
      }
    };

    tryToSignIn();

  }, [state, dispatch]);

  return [signInWithWeb3];
}
