"use client";

import React, {useCallback, useEffect} from "react";
import {BrowserProvider} from "ethers";
import {signIn} from "@/auth";
import {getCsrfToken} from "next-auth/react";


type Action =
  | { type: "CONNECT_TO_PROVIDER_INITIAL" }
  | { type: "CONNECT_TO_PROVIDER_SUCCESS", payload: { provider: BrowserProvider, accountAddress: string } }
  | { type: "CONNECT_TO_PROVIDER_FAILURE", payload: { error: string } }
  | { type: "FETCH_INITIAL" }
  | { type: "FETCH_SUCCESS", payload: {} }
  | { type: "FETCH_FAILURE", payload: { error: string } };

type Web3ContextData = { state: State; dispatch: Dispatch } | undefined;

type Dispatch = (action: Action) => void;

type Props = { children: React.ReactNode };

type State = {
  provider: BrowserProvider | undefined;
  accountAddress: string | undefined;
};

const Web3Context = React.createContext<Web3ContextData>(undefined);

const InitialState: State = {
  provider: undefined,
  accountAddress: undefined
};

function web3Reducer(state: State, action: Action) {
  switch (action.type) {
    case "CONNECT_TO_PROVIDER_INITIAL": {
      return {
        ...state
      };
    }
    case "CONNECT_TO_PROVIDER_SUCCESS": {
      return {
        ...state,
        provider: action.payload.provider,
        accountAddress: action.payload.accountAddress
      };
    }
    case "CONNECT_TO_PROVIDER_FAILURE": {
      return {
        ...state,
        error: action.payload.error
      };
    }
    default: {
      // throw new Error(`Unhandled action type: ${action.type}`);
      return state;
    }
  }
}

export function Web3Provider({children}: Readonly<Props>) {
  const [state, dispatch] = React.useReducer(web3Reducer, InitialState);

  React.useEffect(() => {
  }, []);

  const value = {state, dispatch};

  return (
    <Web3Context.Provider value={value}>
      {children}
    </Web3Context.Provider>
  );
}

export function useWeb3() {
  const context = React.useContext(Web3Context);

  if (context === undefined) {
    throw new Error("useWeb3 must be used within a Web3Provider");
  }

  return context;
}

export function useConnectToWallet() {
  const {dispatch} = useWeb3();

  const connectToWallet = async () => {
    dispatch({type: "CONNECT_TO_PROVIDER_INITIAL"});

    try {
      if (window.ethereum) {
        const ethereum = window.ethereum;

        await ethereum.request({method: "eth_requestAccounts"});

        const provider = new BrowserProvider(window.ethereum);

        const signer = await provider.getSigner();
        const accountAddress = await signer.getAddress();

        dispatch({type: "CONNECT_TO_PROVIDER_SUCCESS", payload: {provider, accountAddress}});
      } else {
        dispatch({type: "CONNECT_TO_PROVIDER_FAILURE", payload: {error: "MetaMask is not detected."}});
      }
    } catch (error) {
      dispatch({type: "CONNECT_TO_PROVIDER_FAILURE", payload: {error: (error as Error).message}});
    }
  };

  return [connectToWallet];
}

export function useSignInWithWeb3() {
  const {state, dispatch} = useWeb3();
  const [connectToWallet] = useConnectToWallet();

  const signInWithWeb3 = useCallback(async () => {
    if (!state.provider) {
      await connectToWallet();
    }
  }, [state.provider, connectToWallet]);

  useEffect(() => {
    const tryToSignIn = async () => {
      if (state.provider && state.accountAddress) {

        // TODO: validate the chain id.
        const chain = await state.provider.getNetwork();

        // TODO: this message should be generated by the server and sent to the client.
        const response = await fetch(
          `${process.env.NEXT_JS_BACKEND_URL}/auth/web3/sign-in/challenge`,
          {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              // TODO: this should be the correct domain.
              domain: window.location.host,
              address: state.accountAddress,
              uri: window.location.origin,
              version: "1",
              chainId: chain?.chainId,
              nonce: await getCsrfToken(),
            }),
          }
        );

        const { message } = await response.json();

        // Eip1193Provider.
        const signature = await state.provider.send(
          "personal_sign",
          [message, state.accountAddress]
        );

        await signIn('web-3', {message, signature});
      }
    };

    tryToSignIn();

  }, [state, dispatch]);

  return [signInWithWeb3];
}
