import {useWeb3} from "@/components/web3/use-web3";
import {useConnectToWallet} from "@/components/web3/use-connect-to-wallet";
import {useCallback, useEffect} from "react";
import {getCsrfToken} from "next-auth/react";
import {signIn} from "@/auth";


export function useSignInWithWeb3() {
  const {state, dispatch} = useWeb3();
  const [connectToWallet] = useConnectToWallet();

  const signInWithWeb3 = useCallback(async () => {
    if (!state.provider) {
      await connectToWallet();
    }
  }, [state.provider, connectToWallet]);

  useEffect(() => {
    const tryToSignIn = async () => {
      if (state.provider && state.accountAddress) {

        // TODO: validate the chain id.
        const chain = await state.provider.getNetwork();

        // TODO: this message should be generated by the server and sent to the client.
        const response = await fetch(
          `${process.env.NEXT_JS_BACKEND_URL}/auth/web3/sign-in/challenge`,
          {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              // TODO: this should be the correct domain.
              domain: window.location.host,
              address: state.accountAddress,
              uri: window.location.origin,
              version: "1",
              chainId: chain?.chainId,
              nonce: await getCsrfToken(),
            }),
          }
        );

        const {message} = await response.json();

        // Eip1193Provider.
        const signature = await state.provider.send(
          "personal_sign",
          [message, state.accountAddress]
        );

        await signIn('web-3', {message, signature});
      }
    };

    tryToSignIn();

  }, [state, dispatch]);

  return [signInWithWeb3];
}