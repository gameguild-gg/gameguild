"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/auth/[...nextauth]/route";
exports.ids = ["app/api/auth/[...nextauth]/route"];
exports.modules = {

/***/ "../../client/components/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/client/components/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/action-async-storage.external.js");

/***/ }),

/***/ "../../client/components/request-async-storage.external":
/*!********************************************************************************!*\
  !*** external "next/dist/client/components/request-async-storage.external.js" ***!
  \********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/request-async-storage.external.js");

/***/ }),

/***/ "../../client/components/static-generation-async-storage.external":
/*!******************************************************************************************!*\
  !*** external "next/dist/client/components/static-generation-async-storage.external.js" ***!
  \******************************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/static-generation-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "node:buffer":
/*!******************************!*\
  !*** external "node:buffer" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:buffer");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:crypto");

/***/ }),

/***/ "node:util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:util");

/***/ }),

/***/ "(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute&page=%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute.ts&appDir=%2Fhome%2Fmiguel%2FProjects%2FExternos%2Fwebsite%2Fservices%2Fweb%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fmiguel%2FProjects%2FExternos%2Fwebsite%2Fservices%2Fweb&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ../../node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute&page=%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute.ts&appDir=%2Fhome%2Fmiguel%2FProjects%2FExternos%2Fwebsite%2Fservices%2Fweb%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fmiguel%2FProjects%2FExternos%2Fwebsite%2Fservices%2Fweb&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/../../node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/../../node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/../../node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _home_miguel_Projects_Externos_website_services_web_src_app_api_auth_nextauth_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/auth/[...nextauth]/route.ts */ \"(rsc)/./src/app/api/auth/[...nextauth]/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/auth/[...nextauth]/route\",\n        pathname: \"/api/auth/[...nextauth]\",\n        filename: \"route\",\n        bundlePath: \"app/api/auth/[...nextauth]/route\"\n    },\n    resolvedPagePath: \"/home/miguel/Projects/Externos/website/services/web/src/app/api/auth/[...nextauth]/route.ts\",\n    nextConfigOutput,\n    userland: _home_miguel_Projects_Externos_website_services_web_src_app_api_auth_nextauth_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/auth/[...nextauth]/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1hcHAtbG9hZGVyLmpzP25hbWU9YXBwJTJGYXBpJTJGYXV0aCUyRiU1Qi4uLm5leHRhdXRoJTVEJTJGcm91dGUmcGFnZT0lMkZhcGklMkZhdXRoJTJGJTVCLi4ubmV4dGF1dGglNUQlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZhdXRoJTJGJTVCLi4ubmV4dGF1dGglNUQlMkZyb3V0ZS50cyZhcHBEaXI9JTJGaG9tZSUyRm1pZ3VlbCUyRlByb2plY3RzJTJGRXh0ZXJub3MlMkZ3ZWJzaXRlJTJGc2VydmljZXMlMkZ3ZWIlMkZzcmMlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRmhvbWUlMkZtaWd1ZWwlMkZQcm9qZWN0cyUyRkV4dGVybm9zJTJGd2Vic2l0ZSUyRnNlcnZpY2VzJTJGd2ViJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUMyQztBQUN4SDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL0BnYW1lZGV2LWd1aWxkL3dlYi8/M2E1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvaG9tZS9taWd1ZWwvUHJvamVjdHMvRXh0ZXJub3Mvd2Vic2l0ZS9zZXJ2aWNlcy93ZWIvc3JjL2FwcC9hcGkvYXV0aC9bLi4ubmV4dGF1dGhdL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9hdXRoL1suLi5uZXh0YXV0aF0vcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9hdXRoL1suLi5uZXh0YXV0aF1cIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2F1dGgvWy4uLm5leHRhdXRoXS9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9ob21lL21pZ3VlbC9Qcm9qZWN0cy9FeHRlcm5vcy93ZWJzaXRlL3NlcnZpY2VzL3dlYi9zcmMvYXBwL2FwaS9hdXRoL1suLi5uZXh0YXV0aF0vcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2F1dGgvWy4uLm5leHRhdXRoXS9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute&page=%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute.ts&appDir=%2Fhome%2Fmiguel%2FProjects%2FExternos%2Fwebsite%2Fservices%2Fweb%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fmiguel%2FProjects%2FExternos%2Fwebsite%2Fservices%2Fweb&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/../../packages/apiclient/dist/api.js":
/*!********************************************!*\
  !*** ../../packages/apiclient/dist/api.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* eslint-disable */ // tslint:disable\n/**\n * gameguild.gg\n *\n *\n * OpenAPI spec version: 1.0.0\n * Contact:\n *\n * NOTE: This class is auto generated by OpenAPI Generator+.\n * https://github.com/karlvr/openapi-generator-plus\n * Do not edit the class manually.\n */ var __extends = (void 0) && (void 0).__extends || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (void 0) && (void 0).__generator || function(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(g && (g = 0, op[0] && (_ = 0)), _)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n};\nvar __spreadArray = (void 0) && (void 0).__spreadArray || function(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.UsersApiFp = exports.UsersApiFetchParamCreator = exports.TicketApi = exports.TicketApiFactory = exports.TicketApiFp = exports.TicketApiFetchParamCreator = exports.QuizApi = exports.QuizApiFactory = exports.QuizApiFp = exports.QuizApiFetchParamCreator = exports.ProjectVersionApi = exports.ProjectVersionApiFactory = exports.ProjectVersionApiFp = exports.ProjectVersionApiFetchParamCreator = exports.ProjectApi = exports.ProjectApiFactory = exports.ProjectApiFp = exports.ProjectApiFetchParamCreator = exports.JobTagsApi = exports.JobTagsApiFactory = exports.JobTagsApiFp = exports.JobTagsApiFetchParamCreator = exports.JobPostsApi = exports.JobPostsApiFactory = exports.JobPostsApiFp = exports.JobPostsApiFetchParamCreator = exports.JobApplicationsApi = exports.JobApplicationsApiFactory = exports.JobApplicationsApiFp = exports.JobApplicationsApiFetchParamCreator = exports.HealthcheckApi = exports.HealthcheckApiFactory = exports.HealthcheckApiFp = exports.HealthcheckApiFetchParamCreator = exports.CoursesApi = exports.CoursesApiFactory = exports.CoursesApiFp = exports.CoursesApiFetchParamCreator = exports.ContentApi = exports.ContentApiFactory = exports.ContentApiFp = exports.ContentApiFetchParamCreator = exports.CompetitionsApi = exports.CompetitionsApiFactory = exports.CompetitionsApiFp = exports.CompetitionsApiFetchParamCreator = exports.AuthApi = exports.AuthApiFactory = exports.AuthApiFp = exports.AuthApiFetchParamCreator = void 0;\nexports.UsersApi = exports.UsersApiFactory = void 0;\nvar runtime_1 = __webpack_require__(/*! ./runtime */ \"(rsc)/../../packages/apiclient/dist/runtime.js\");\n/**\n * AuthApi - fetch parameter creator\n * @export\n */ var AuthApiFetchParamCreator = function(configuration) {\n    return {\n        /**\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ authControllerGetCurrentUser: function(options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/auth/me\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {Api.EthereumSigninChallengeRequestDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ authControllerGetWeb3SignInChallenge: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling authControllerGetWeb3SignInChallenge.\");\n            }\n            var localVarPath = \"/auth/web3/sign-in/challenge\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {Api.EmailDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ authControllerMagicLink: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling authControllerMagicLink.\");\n            }\n            var localVarPath = \"/auth/magic-link\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ authControllerRefreshToken: function(options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/auth/refresh-token\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {string} token\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ authControllerSignInWithGoogle: function(token, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'token' is not null or undefined\n            if (token === null || token === undefined) {\n                throw new runtime_1.RequiredError(\"token\", \"Required parameter token was null or undefined when calling authControllerSignInWithGoogle.\");\n            }\n            var localVarPath = \"/auth/google/callback/{token}\".replace(\"{token}\", encodeURIComponent(String(token)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {Api.LocalSignUpDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ authControllerSignUpWithEmailUsernamePassword: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling authControllerSignUpWithEmailUsernamePassword.\");\n            }\n            var localVarPath = \"/auth/local/sign-up\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {string} user\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ authControllerUserExists: function(user, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'user' is not null or undefined\n            if (user === null || user === undefined) {\n                throw new runtime_1.RequiredError(\"user\", \"Required parameter user was null or undefined when calling authControllerUserExists.\");\n            }\n            var localVarPath = \"/auth/userExists/{user}\".replace(\"{user}\", encodeURIComponent(String(user)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {Api.EthereumSigninValidateRequestDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ authControllerValidateWeb3SignInChallenge: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling authControllerValidateWeb3SignInChallenge.\");\n            }\n            var localVarPath = \"/auth/web3/sign-in/validate\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.AuthApiFetchParamCreator = AuthApiFetchParamCreator;\n/**\n * AuthApi - functional programming interface\n * @export\n */ var AuthApiFp = function(configuration) {\n    return {\n        /**\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ authControllerGetCurrentUser: function(options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.AuthApiFetchParamCreator)(configuration).authControllerGetCurrentUser(options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {Api.EthereumSigninChallengeRequestDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ authControllerGetWeb3SignInChallenge: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.AuthApiFetchParamCreator)(configuration).authControllerGetWeb3SignInChallenge(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_e) {\n                        switch(_e.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _e.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _e.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _e.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _e.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _e.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {Api.EmailDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ authControllerMagicLink: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.AuthApiFetchParamCreator)(configuration).authControllerMagicLink(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_e) {\n                        switch(_e.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _e.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _e.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _e.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _e.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _e.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ authControllerRefreshToken: function(options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.AuthApiFetchParamCreator)(configuration).authControllerRefreshToken(options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {string} token\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ authControllerSignInWithGoogle: function(token, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.AuthApiFetchParamCreator)(configuration).authControllerSignInWithGoogle(token, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_e) {\n                        switch(_e.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _e.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _e.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _e.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _e.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _e.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {Api.LocalSignUpDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ authControllerSignUpWithEmailUsernamePassword: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.AuthApiFetchParamCreator)(configuration).authControllerSignUpWithEmailUsernamePassword(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_e) {\n                        switch(_e.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _e.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _e.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _e.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _e.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _e.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {string} user\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ authControllerUserExists: function(user, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.AuthApiFetchParamCreator)(configuration).authControllerUserExists(user, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_e) {\n                        switch(_e.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _e.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _e.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _e.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _e.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _e.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {Api.EthereumSigninValidateRequestDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ authControllerValidateWeb3SignInChallenge: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.AuthApiFetchParamCreator)(configuration).authControllerValidateWeb3SignInChallenge(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_e) {\n                        switch(_e.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _e.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _e.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _e.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _e.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _e.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        }\n    };\n};\nexports.AuthApiFp = AuthApiFp;\n/**\n * AuthApi - factory interface\n * @export\n */ var AuthApiFactory = function(configuration, basePath, fetch) {\n    return new AuthApi(configuration, basePath, fetch);\n};\nexports.AuthApiFactory = AuthApiFactory;\n/**\n * AuthApi - object-oriented interface\n * @export\n * @class AuthApi\n * @extends {BaseAPI}\n */ var AuthApi = /** @class */ function(_super) {\n    __extends(AuthApi, _super);\n    function AuthApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ AuthApi.prototype.authControllerGetCurrentUser = function(options) {\n        return (0, exports.AuthApiFp)(this.configuration).authControllerGetCurrentUser(options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {Api.EthereumSigninChallengeRequestDto} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ AuthApi.prototype.authControllerGetWeb3SignInChallenge = function(request, options) {\n        return (0, exports.AuthApiFp)(this.configuration).authControllerGetWeb3SignInChallenge(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {Api.EmailDto} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ AuthApi.prototype.authControllerMagicLink = function(request, options) {\n        return (0, exports.AuthApiFp)(this.configuration).authControllerMagicLink(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ AuthApi.prototype.authControllerRefreshToken = function(options) {\n        return (0, exports.AuthApiFp)(this.configuration).authControllerRefreshToken(options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {string} token\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ AuthApi.prototype.authControllerSignInWithGoogle = function(token, options) {\n        return (0, exports.AuthApiFp)(this.configuration).authControllerSignInWithGoogle(token, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {Api.LocalSignUpDto} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ AuthApi.prototype.authControllerSignUpWithEmailUsernamePassword = function(request, options) {\n        return (0, exports.AuthApiFp)(this.configuration).authControllerSignUpWithEmailUsernamePassword(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {string} user\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ AuthApi.prototype.authControllerUserExists = function(user, options) {\n        return (0, exports.AuthApiFp)(this.configuration).authControllerUserExists(user, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {Api.EthereumSigninValidateRequestDto} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ AuthApi.prototype.authControllerValidateWeb3SignInChallenge = function(request, options) {\n        return (0, exports.AuthApiFp)(this.configuration).authControllerValidateWeb3SignInChallenge(request, options)(this.fetch, this.basePath);\n    };\n    return AuthApi;\n}(runtime_1.BaseAPI);\nexports.AuthApi = AuthApi;\n/**\n * CompetitionsApi - fetch parameter creator\n * @export\n */ var CompetitionsApiFetchParamCreator = function(configuration) {\n    return {\n        /**\n         * @param {Api.MatchSearchRequestDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ competitionControllerFindChessMatchResult: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling competitionControllerFindChessMatchResult.\");\n            }\n            var localVarPath = \"/Competitions/Chess/FindMatches\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ competitionControllerGetChessLeaderboard: function(options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/Competitions/Chess/Leaderboard\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {string} id\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ competitionControllerGetChessMatchResult: function(id, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new runtime_1.RequiredError(\"id\", \"Required parameter id was null or undefined when calling competitionControllerGetChessMatchResult.\");\n            }\n            var localVarPath = \"/Competitions/Chess/Match/{id}\".replace(\"{id}\", encodeURIComponent(String(id)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ competitionControllerGetLatestChessCompetitionReport: function(options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/Competitions/Chess/LatestCompetitionReport\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ competitionControllerListChessAgents: function(options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/Competitions/Chess/ListAgents\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {Api.ChessMoveRequestDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ competitionControllerRequestChessMove: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling competitionControllerRequestChessMove.\");\n            }\n            var localVarPath = \"/Competitions/Chess/Move\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {Api.ChessMatchRequestDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ competitionControllerRunChessMatch: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling competitionControllerRunChessMatch.\");\n            }\n            var localVarPath = \"/Competitions/Chess/RunMatch\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ competitionControllerRunCompetition: function(options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/Competitions/Chess/RunCompetition\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {Api.CompetitionSubmissionDto.MultipartFormData} [request]\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ competitionControllerSubmitChessAgent: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/Competitions/Chess/submit\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"multipart/form-data\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                var localVarFormData = new FormData();\n                if (request.file !== undefined) {\n                    localVarFormData.append(\"file\", request.file.value);\n                }\n                localVarRequestOptions.body = localVarFormData;\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.CompetitionsApiFetchParamCreator = CompetitionsApiFetchParamCreator;\n/**\n * CompetitionsApi - functional programming interface\n * @export\n */ var CompetitionsApiFp = function(configuration) {\n    return {\n        /**\n         * @param {Api.MatchSearchRequestDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ competitionControllerFindChessMatchResult: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.CompetitionsApiFetchParamCreator)(configuration).competitionControllerFindChessMatchResult(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ competitionControllerGetChessLeaderboard: function(options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.CompetitionsApiFetchParamCreator)(configuration).competitionControllerGetChessLeaderboard(options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {string} id\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ competitionControllerGetChessMatchResult: function(id, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.CompetitionsApiFetchParamCreator)(configuration).competitionControllerGetChessMatchResult(id, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ competitionControllerGetLatestChessCompetitionReport: function(options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.CompetitionsApiFetchParamCreator)(configuration).competitionControllerGetLatestChessCompetitionReport(options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ competitionControllerListChessAgents: function(options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.CompetitionsApiFetchParamCreator)(configuration).competitionControllerListChessAgents(options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {Api.ChessMoveRequestDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ competitionControllerRequestChessMove: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.CompetitionsApiFetchParamCreator)(configuration).competitionControllerRequestChessMove(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {Api.ChessMatchRequestDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ competitionControllerRunChessMatch: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.CompetitionsApiFetchParamCreator)(configuration).competitionControllerRunChessMatch(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ competitionControllerRunCompetition: function(options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.CompetitionsApiFetchParamCreator)(configuration).competitionControllerRunCompetition(options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_h) {\n                        switch(_h.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _h.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _h.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _h.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _h.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _h.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _h.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _h.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _h.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {Api.CompetitionSubmissionDto.MultipartFormData} [request]\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ competitionControllerSubmitChessAgent: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.CompetitionsApiFetchParamCreator)(configuration).competitionControllerSubmitChessAgent(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        }\n    };\n};\nexports.CompetitionsApiFp = CompetitionsApiFp;\n/**\n * CompetitionsApi - factory interface\n * @export\n */ var CompetitionsApiFactory = function(configuration, basePath, fetch) {\n    return new CompetitionsApi(configuration, basePath, fetch);\n};\nexports.CompetitionsApiFactory = CompetitionsApiFactory;\n/**\n * CompetitionsApi - object-oriented interface\n * @export\n * @class CompetitionsApi\n * @extends {BaseAPI}\n */ var CompetitionsApi = /** @class */ function(_super) {\n    __extends(CompetitionsApi, _super);\n    function CompetitionsApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {Api.MatchSearchRequestDto} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ CompetitionsApi.prototype.competitionControllerFindChessMatchResult = function(request, options) {\n        return (0, exports.CompetitionsApiFp)(this.configuration).competitionControllerFindChessMatchResult(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ CompetitionsApi.prototype.competitionControllerGetChessLeaderboard = function(options) {\n        return (0, exports.CompetitionsApiFp)(this.configuration).competitionControllerGetChessLeaderboard(options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {string} id\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ CompetitionsApi.prototype.competitionControllerGetChessMatchResult = function(id, options) {\n        return (0, exports.CompetitionsApiFp)(this.configuration).competitionControllerGetChessMatchResult(id, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ CompetitionsApi.prototype.competitionControllerGetLatestChessCompetitionReport = function(options) {\n        return (0, exports.CompetitionsApiFp)(this.configuration).competitionControllerGetLatestChessCompetitionReport(options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ CompetitionsApi.prototype.competitionControllerListChessAgents = function(options) {\n        return (0, exports.CompetitionsApiFp)(this.configuration).competitionControllerListChessAgents(options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {Api.ChessMoveRequestDto} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ CompetitionsApi.prototype.competitionControllerRequestChessMove = function(request, options) {\n        return (0, exports.CompetitionsApiFp)(this.configuration).competitionControllerRequestChessMove(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {Api.ChessMatchRequestDto} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ CompetitionsApi.prototype.competitionControllerRunChessMatch = function(request, options) {\n        return (0, exports.CompetitionsApiFp)(this.configuration).competitionControllerRunChessMatch(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ CompetitionsApi.prototype.competitionControllerRunCompetition = function(options) {\n        return (0, exports.CompetitionsApiFp)(this.configuration).competitionControllerRunCompetition(options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {Api.CompetitionSubmissionDto.MultipartFormData} [request]\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ CompetitionsApi.prototype.competitionControllerSubmitChessAgent = function(request, options) {\n        return (0, exports.CompetitionsApiFp)(this.configuration).competitionControllerSubmitChessAgent(request, options)(this.fetch, this.basePath);\n    };\n    return CompetitionsApi;\n}(runtime_1.BaseAPI);\nexports.CompetitionsApi = CompetitionsApi;\n/**\n * ContentApi - fetch parameter creator\n * @export\n */ var ContentApiFetchParamCreator = function(configuration) {\n    return {\n        /**\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ contentControllerCreateEmptyCourse: function(options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/content/course/create\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.ContentApiFetchParamCreator = ContentApiFetchParamCreator;\n/**\n * ContentApi - functional programming interface\n * @export\n */ var ContentApiFp = function(configuration) {\n    return {\n        /**\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ contentControllerCreateEmptyCourse: function(options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.ContentApiFetchParamCreator)(configuration).contentControllerCreateEmptyCourse(options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        }\n    };\n};\nexports.ContentApiFp = ContentApiFp;\n/**\n * ContentApi - factory interface\n * @export\n */ var ContentApiFactory = function(configuration, basePath, fetch) {\n    return new ContentApi(configuration, basePath, fetch);\n};\nexports.ContentApiFactory = ContentApiFactory;\n/**\n * ContentApi - object-oriented interface\n * @export\n * @class ContentApi\n * @extends {BaseAPI}\n */ var ContentApi = /** @class */ function(_super) {\n    __extends(ContentApi, _super);\n    function ContentApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ ContentApi.prototype.contentControllerCreateEmptyCourse = function(options) {\n        return (0, exports.ContentApiFp)(this.configuration).contentControllerCreateEmptyCourse(options)(this.fetch, this.basePath);\n    };\n    return ContentApi;\n}(runtime_1.BaseAPI);\nexports.ContentApi = ContentApi;\n/**\n * CoursesApi - fetch parameter creator\n * @export\n */ var CoursesApiFetchParamCreator = function(configuration) {\n    return {\n        /**\n         * @param {Api.EditorRequestDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ coursesControllerAddEditor: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling coursesControllerAddEditor.\");\n            }\n            var localVarPath = \"/courses/add-editor\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * <p>Obtains all items the current users has permission to edit.</p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ coursesControllerICanEdit: function(options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/courses/get-editable-by-me\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * <p>Obtains all items the current users owns.</p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ coursesControllerOwnedByMe: function(options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/courses/get-owned-by-me\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {Api.EditorRequestDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ coursesControllerRemoveEditor: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling coursesControllerRemoveEditor.\");\n            }\n            var localVarPath = \"/courses/remove-editor\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {Api.TransferOwnershipRequestDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ coursesControllerSwitchOwner: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling coursesControllerSwitchOwner.\");\n            }\n            var localVarPath = \"/courses/transfer-ownership\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Create a single CourseEntity\n         * @param {Api.CourseEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createOneBaseCoursesControllerCourseEntity: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling createOneBaseCoursesControllerCourseEntity.\");\n            }\n            var localVarPath = \"/courses\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Delete a single CourseEntity\n         * @param {string} slug\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ deleteOneBaseCoursesControllerCourseEntity: function(slug, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'slug' is not null or undefined\n            if (slug === null || slug === undefined) {\n                throw new runtime_1.RequiredError(\"slug\", \"Required parameter slug was null or undefined when calling deleteOneBaseCoursesControllerCourseEntity.\");\n            }\n            var localVarPath = \"/courses/{slug}\".replace(\"{slug}\", encodeURIComponent(String(slug)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"DELETE\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Retrieve multiple CourseEntities\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string} [s] <p>Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [filter] <p>Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [or] <p>Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [sort] <p>Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [limit] <p>Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a></p>\n         * @param {number} [offset] <p>Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a></p>\n         * @param {number} [page] <p>Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getManyBaseCoursesControllerCourseEntity: function(__params, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/courses\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            if (__params.fields !== undefined) {\n                /* array form */ localVarQueryParameter.append(\"fields\", __params.fields.map(function(localVarArrayMapElement) {\n                    return escape(String(localVarArrayMapElement));\n                }).join(\",\"));\n            }\n            if (__params.s !== undefined) {\n                localVarQueryParameter.append(\"s\", String(__params.s));\n            }\n            if (__params.filter !== undefined) {\n                /* array form exploded */ for(var _i = 0, _a = __params.filter; _i < _a.length; _i++){\n                    var localVarArrayElement = _a[_i];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"filter\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.or !== undefined) {\n                /* array form exploded */ for(var _b = 0, _c = __params.or; _b < _c.length; _b++){\n                    var localVarArrayElement = _c[_b];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"or\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.sort !== undefined) {\n                /* array form exploded */ for(var _d = 0, _e = __params.sort; _d < _e.length; _d++){\n                    var localVarArrayElement = _e[_d];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"sort\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.join !== undefined) {\n                /* array form exploded */ for(var _f = 0, _g = __params.join; _f < _g.length; _f++){\n                    var localVarArrayElement = _g[_f];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"join\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.limit !== undefined) {\n                localVarQueryParameter.append(\"limit\", String(__params.limit));\n            }\n            if (__params.offset !== undefined) {\n                localVarQueryParameter.append(\"offset\", String(__params.offset));\n            }\n            if (__params.page !== undefined) {\n                localVarQueryParameter.append(\"page\", String(__params.page));\n            }\n            if (__params.cache !== undefined) {\n                localVarQueryParameter.append(\"cache\", String(__params.cache));\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Retrieve a single CourseEntity\n         * @param {string} slug\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getOneBaseCoursesControllerCourseEntity: function(__params, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'slug' is not null or undefined\n            if (__params.slug === null || __params.slug === undefined) {\n                throw new runtime_1.RequiredError(\"slug\", \"Required parameter slug was null or undefined when calling getOneBaseCoursesControllerCourseEntity.\");\n            }\n            var localVarPath = \"/courses/{slug}\".replace(\"{slug}\", encodeURIComponent(String(__params.slug)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            if (__params.fields !== undefined) {\n                /* array form */ localVarQueryParameter.append(\"fields\", __params.fields.map(function(localVarArrayMapElement) {\n                    return escape(String(localVarArrayMapElement));\n                }).join(\",\"));\n            }\n            if (__params.join !== undefined) {\n                /* array form exploded */ for(var _i = 0, _a = __params.join; _i < _a.length; _i++){\n                    var localVarArrayElement = _a[_i];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"join\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.cache !== undefined) {\n                localVarQueryParameter.append(\"cache\", String(__params.cache));\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Update a single CourseEntity\n         * @param {string} slug\n         * @param {Api.CourseEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ updateOneBaseCoursesControllerCourseEntity: function(slug, request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'slug' is not null or undefined\n            if (slug === null || slug === undefined) {\n                throw new runtime_1.RequiredError(\"slug\", \"Required parameter slug was null or undefined when calling updateOneBaseCoursesControllerCourseEntity.\");\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling updateOneBaseCoursesControllerCourseEntity.\");\n            }\n            var localVarPath = \"/courses/{slug}\".replace(\"{slug}\", encodeURIComponent(String(slug)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"PATCH\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.CoursesApiFetchParamCreator = CoursesApiFetchParamCreator;\n/**\n * CoursesApi - functional programming interface\n * @export\n */ var CoursesApiFp = function(configuration) {\n    return {\n        /**\n         * @param {Api.EditorRequestDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ coursesControllerAddEditor: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.CoursesApiFetchParamCreator)(configuration).coursesControllerAddEditor(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_h) {\n                        switch(_h.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _h.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _h.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _h.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _h.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _h.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _h.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _h.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _h.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * <p>Obtains all items the current users has permission to edit.</p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ coursesControllerICanEdit: function(options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.CoursesApiFetchParamCreator)(configuration).coursesControllerICanEdit(options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_h) {\n                        switch(_h.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _h.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (response.status === 200) {\n                                    return [\n                                        2 /*return*/ ,\n                                        {\n                                            status: response.status\n                                        }\n                                    ];\n                                }\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _h.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _h.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _h.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _h.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _h.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _h.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _h.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * <p>Obtains all items the current users owns.</p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ coursesControllerOwnedByMe: function(options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.CoursesApiFetchParamCreator)(configuration).coursesControllerOwnedByMe(options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_h) {\n                        switch(_h.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _h.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (response.status === 200) {\n                                    return [\n                                        2 /*return*/ ,\n                                        {\n                                            status: response.status\n                                        }\n                                    ];\n                                }\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _h.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _h.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _h.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _h.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _h.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _h.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _h.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {Api.EditorRequestDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ coursesControllerRemoveEditor: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.CoursesApiFetchParamCreator)(configuration).coursesControllerRemoveEditor(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_h) {\n                        switch(_h.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _h.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _h.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _h.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _h.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _h.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _h.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _h.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _h.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {Api.TransferOwnershipRequestDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ coursesControllerSwitchOwner: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.CoursesApiFetchParamCreator)(configuration).coursesControllerSwitchOwner(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_h) {\n                        switch(_h.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _h.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _h.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _h.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _h.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _h.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _h.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _h.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _h.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Create a single CourseEntity\n         * @param {Api.CourseEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createOneBaseCoursesControllerCourseEntity: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.CoursesApiFetchParamCreator)(configuration).createOneBaseCoursesControllerCourseEntity(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 201)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Delete a single CourseEntity\n         * @param {string} slug\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ deleteOneBaseCoursesControllerCourseEntity: function(slug, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.CoursesApiFetchParamCreator)(configuration).deleteOneBaseCoursesControllerCourseEntity(slug, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_h) {\n                        switch(_h.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _h.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (response.status === 200) {\n                                    return [\n                                        2 /*return*/ ,\n                                        {\n                                            status: response.status\n                                        }\n                                    ];\n                                }\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _h.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _h.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _h.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _h.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _h.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _h.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _h.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Retrieve multiple CourseEntities\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string} [s] <p>Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [filter] <p>Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [or] <p>Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [sort] <p>Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [limit] <p>Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a></p>\n         * @param {number} [offset] <p>Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a></p>\n         * @param {number} [page] <p>Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getManyBaseCoursesControllerCourseEntity: function(__params, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.CoursesApiFetchParamCreator)(configuration).getManyBaseCoursesControllerCourseEntity(__params, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_e) {\n                        switch(_e.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _e.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _e.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _e.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _e.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _e.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Retrieve a single CourseEntity\n         * @param {string} slug\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getOneBaseCoursesControllerCourseEntity: function(__params, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.CoursesApiFetchParamCreator)(configuration).getOneBaseCoursesControllerCourseEntity(__params, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_e) {\n                        switch(_e.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _e.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _e.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _e.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _e.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _e.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Update a single CourseEntity\n         * @param {string} slug\n         * @param {Api.CourseEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ updateOneBaseCoursesControllerCourseEntity: function(slug, request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.CoursesApiFetchParamCreator)(configuration).updateOneBaseCoursesControllerCourseEntity(slug, request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        }\n    };\n};\nexports.CoursesApiFp = CoursesApiFp;\n/**\n * CoursesApi - factory interface\n * @export\n */ var CoursesApiFactory = function(configuration, basePath, fetch) {\n    return new CoursesApi(configuration, basePath, fetch);\n};\nexports.CoursesApiFactory = CoursesApiFactory;\n/**\n * CoursesApi - object-oriented interface\n * @export\n * @class CoursesApi\n * @extends {BaseAPI}\n */ var CoursesApi = /** @class */ function(_super) {\n    __extends(CoursesApi, _super);\n    function CoursesApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {Api.EditorRequestDto} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ CoursesApi.prototype.coursesControllerAddEditor = function(request, options) {\n        return (0, exports.CoursesApiFp)(this.configuration).coursesControllerAddEditor(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * <p>Obtains all items the current users has permission to edit.</p>\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ CoursesApi.prototype.coursesControllerICanEdit = function(options) {\n        return (0, exports.CoursesApiFp)(this.configuration).coursesControllerICanEdit(options)(this.fetch, this.basePath);\n    };\n    /**\n     * <p>Obtains all items the current users owns.</p>\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ CoursesApi.prototype.coursesControllerOwnedByMe = function(options) {\n        return (0, exports.CoursesApiFp)(this.configuration).coursesControllerOwnedByMe(options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {Api.EditorRequestDto} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ CoursesApi.prototype.coursesControllerRemoveEditor = function(request, options) {\n        return (0, exports.CoursesApiFp)(this.configuration).coursesControllerRemoveEditor(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {Api.TransferOwnershipRequestDto} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ CoursesApi.prototype.coursesControllerSwitchOwner = function(request, options) {\n        return (0, exports.CoursesApiFp)(this.configuration).coursesControllerSwitchOwner(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Create a single CourseEntity\n     * @param {Api.CourseEntity} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ CoursesApi.prototype.createOneBaseCoursesControllerCourseEntity = function(request, options) {\n        return (0, exports.CoursesApiFp)(this.configuration).createOneBaseCoursesControllerCourseEntity(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Delete a single CourseEntity\n     * @param {string} slug\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ CoursesApi.prototype.deleteOneBaseCoursesControllerCourseEntity = function(slug, options) {\n        return (0, exports.CoursesApiFp)(this.configuration).deleteOneBaseCoursesControllerCourseEntity(slug, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Retrieve multiple CourseEntities\n     * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n     * @param {string} [s] <p>Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [filter] <p>Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [or] <p>Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [sort] <p>Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n     * @param {number} [limit] <p>Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a></p>\n     * @param {number} [offset] <p>Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a></p>\n     * @param {number} [page] <p>Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a></p>\n     * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ CoursesApi.prototype.getManyBaseCoursesControllerCourseEntity = function(__params, options) {\n        return (0, exports.CoursesApiFp)(this.configuration).getManyBaseCoursesControllerCourseEntity(__params, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Retrieve a single CourseEntity\n     * @param {string} slug\n     * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n     * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ CoursesApi.prototype.getOneBaseCoursesControllerCourseEntity = function(__params, options) {\n        return (0, exports.CoursesApiFp)(this.configuration).getOneBaseCoursesControllerCourseEntity(__params, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Update a single CourseEntity\n     * @param {string} slug\n     * @param {Api.CourseEntity} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ CoursesApi.prototype.updateOneBaseCoursesControllerCourseEntity = function(slug, request, options) {\n        return (0, exports.CoursesApiFp)(this.configuration).updateOneBaseCoursesControllerCourseEntity(slug, request, options)(this.fetch, this.basePath);\n    };\n    return CoursesApi;\n}(runtime_1.BaseAPI);\nexports.CoursesApi = CoursesApi;\n/**\n * HealthcheckApi - fetch parameter creator\n * @export\n */ var HealthcheckApiFetchParamCreator = function(configuration) {\n    return {\n        /**\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ healthcheckControllerDb: function(options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/healthcheck/db\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ healthcheckControllerGitstats: function(options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/healthcheck/gitstats\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ healthcheckControllerRedis: function(options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/healthcheck/redis\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ healthcheckControllerS3: function(options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/healthcheck/s3\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.HealthcheckApiFetchParamCreator = HealthcheckApiFetchParamCreator;\n/**\n * HealthcheckApi - functional programming interface\n * @export\n */ var HealthcheckApiFp = function(configuration) {\n    return {\n        /**\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ healthcheckControllerDb: function(options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.HealthcheckApiFetchParamCreator)(configuration).healthcheckControllerDb(options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_a) {\n                        switch(_a.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _a.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (response.status === 200) {\n                                    return [\n                                        2 /*return*/ ,\n                                        {\n                                            status: response.status\n                                        }\n                                    ];\n                                }\n                                if (response.status === 500) {\n                                    return [\n                                        2 /*return*/ ,\n                                        {\n                                            status: response.status\n                                        }\n                                    ];\n                                }\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ healthcheckControllerGitstats: function(options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.HealthcheckApiFetchParamCreator)(configuration).healthcheckControllerGitstats(options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_b) {\n                        switch(_b.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _b.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _b.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ healthcheckControllerRedis: function(options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.HealthcheckApiFetchParamCreator)(configuration).healthcheckControllerRedis(options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_a) {\n                        switch(_a.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _a.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (response.status === 200) {\n                                    return [\n                                        2 /*return*/ ,\n                                        {\n                                            status: response.status\n                                        }\n                                    ];\n                                }\n                                if (response.status === 500) {\n                                    return [\n                                        2 /*return*/ ,\n                                        {\n                                            status: response.status\n                                        }\n                                    ];\n                                }\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ healthcheckControllerS3: function(options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.HealthcheckApiFetchParamCreator)(configuration).healthcheckControllerS3(options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_a) {\n                        switch(_a.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _a.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (response.status === 200) {\n                                    return [\n                                        2 /*return*/ ,\n                                        {\n                                            status: response.status\n                                        }\n                                    ];\n                                }\n                                if (response.status === 500) {\n                                    return [\n                                        2 /*return*/ ,\n                                        {\n                                            status: response.status\n                                        }\n                                    ];\n                                }\n                                throw response;\n                        }\n                    });\n                });\n            };\n        }\n    };\n};\nexports.HealthcheckApiFp = HealthcheckApiFp;\n/**\n * HealthcheckApi - factory interface\n * @export\n */ var HealthcheckApiFactory = function(configuration, basePath, fetch) {\n    return new HealthcheckApi(configuration, basePath, fetch);\n};\nexports.HealthcheckApiFactory = HealthcheckApiFactory;\n/**\n * HealthcheckApi - object-oriented interface\n * @export\n * @class HealthcheckApi\n * @extends {BaseAPI}\n */ var HealthcheckApi = /** @class */ function(_super) {\n    __extends(HealthcheckApi, _super);\n    function HealthcheckApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ HealthcheckApi.prototype.healthcheckControllerDb = function(options) {\n        return (0, exports.HealthcheckApiFp)(this.configuration).healthcheckControllerDb(options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ HealthcheckApi.prototype.healthcheckControllerGitstats = function(options) {\n        return (0, exports.HealthcheckApiFp)(this.configuration).healthcheckControllerGitstats(options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ HealthcheckApi.prototype.healthcheckControllerRedis = function(options) {\n        return (0, exports.HealthcheckApiFp)(this.configuration).healthcheckControllerRedis(options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ HealthcheckApi.prototype.healthcheckControllerS3 = function(options) {\n        return (0, exports.HealthcheckApiFp)(this.configuration).healthcheckControllerS3(options)(this.fetch, this.basePath);\n    };\n    return HealthcheckApi;\n}(runtime_1.BaseAPI);\nexports.HealthcheckApi = HealthcheckApi;\n/**\n * JobApplicationsApi - fetch parameter creator\n * @export\n */ var JobApplicationsApiFetchParamCreator = function(configuration) {\n    return {\n        /**\n         * @summary Create a single JobApplicationEntity\n         * @param {Api.JobAplicationCreateDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createOneBaseJobApplicationControllerJobApplicationEntity: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling createOneBaseJobApplicationControllerJobApplicationEntity.\");\n            }\n            var localVarPath = \"/job-applications\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Delete a single JobApplicationEntity\n         * @param {string} id\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ deleteOneBaseJobApplicationControllerJobApplicationEntity: function(id, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new runtime_1.RequiredError(\"id\", \"Required parameter id was null or undefined when calling deleteOneBaseJobApplicationControllerJobApplicationEntity.\");\n            }\n            var localVarPath = \"/job-applications/{id}\".replace(\"{id}\", encodeURIComponent(String(id)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"DELETE\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Retrieve multiple JobApplicationEntities\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string} [s] <p>Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [filter] <p>Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [or] <p>Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [sort] <p>Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [limit] <p>Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a></p>\n         * @param {number} [offset] <p>Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a></p>\n         * @param {number} [page] <p>Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getManyBaseJobApplicationControllerJobApplicationEntity: function(__params, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/job-applications\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            if (__params.fields !== undefined) {\n                /* array form */ localVarQueryParameter.append(\"fields\", __params.fields.map(function(localVarArrayMapElement) {\n                    return escape(String(localVarArrayMapElement));\n                }).join(\",\"));\n            }\n            if (__params.s !== undefined) {\n                localVarQueryParameter.append(\"s\", String(__params.s));\n            }\n            if (__params.filter !== undefined) {\n                /* array form exploded */ for(var _i = 0, _a = __params.filter; _i < _a.length; _i++){\n                    var localVarArrayElement = _a[_i];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"filter\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.or !== undefined) {\n                /* array form exploded */ for(var _b = 0, _c = __params.or; _b < _c.length; _b++){\n                    var localVarArrayElement = _c[_b];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"or\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.sort !== undefined) {\n                /* array form exploded */ for(var _d = 0, _e = __params.sort; _d < _e.length; _d++){\n                    var localVarArrayElement = _e[_d];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"sort\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.join !== undefined) {\n                /* array form exploded */ for(var _f = 0, _g = __params.join; _f < _g.length; _f++){\n                    var localVarArrayElement = _g[_f];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"join\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.limit !== undefined) {\n                localVarQueryParameter.append(\"limit\", String(__params.limit));\n            }\n            if (__params.offset !== undefined) {\n                localVarQueryParameter.append(\"offset\", String(__params.offset));\n            }\n            if (__params.page !== undefined) {\n                localVarQueryParameter.append(\"page\", String(__params.page));\n            }\n            if (__params.cache !== undefined) {\n                localVarQueryParameter.append(\"cache\", String(__params.cache));\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Retrieve a single JobApplicationEntity\n         * @param {string} id\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getOneBaseJobApplicationControllerJobApplicationEntity: function(__params, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'id' is not null or undefined\n            if (__params.id === null || __params.id === undefined) {\n                throw new runtime_1.RequiredError(\"id\", \"Required parameter id was null or undefined when calling getOneBaseJobApplicationControllerJobApplicationEntity.\");\n            }\n            var localVarPath = \"/job-applications/{id}\".replace(\"{id}\", encodeURIComponent(String(__params.id)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            if (__params.fields !== undefined) {\n                /* array form */ localVarQueryParameter.append(\"fields\", __params.fields.map(function(localVarArrayMapElement) {\n                    return escape(String(localVarArrayMapElement));\n                }).join(\",\"));\n            }\n            if (__params.join !== undefined) {\n                /* array form exploded */ for(var _i = 0, _a = __params.join; _i < _a.length; _i++){\n                    var localVarArrayElement = _a[_i];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"join\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.cache !== undefined) {\n                localVarQueryParameter.append(\"cache\", String(__params.cache));\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {Api.JobApplicationEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobApplicationControllerAdvanceCandidate: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling jobApplicationControllerAdvanceCandidate.\");\n            }\n            var localVarPath = \"/job-applications/advance-candidate\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {Api.JobApplicationEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobApplicationControllerMoveBackCandidate: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling jobApplicationControllerMoveBackCandidate.\");\n            }\n            var localVarPath = \"/job-applications/undo-advance-candidate\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {string} slug\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobApplicationControllerMyApplicationBySlug: function(slug, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'slug' is not null or undefined\n            if (slug === null || slug === undefined) {\n                throw new runtime_1.RequiredError(\"slug\", \"Required parameter slug was null or undefined when calling jobApplicationControllerMyApplicationBySlug.\");\n            }\n            var localVarPath = \"/job-applications/my-application-by-slug/{slug}\".replace(\"{slug}\", encodeURIComponent(String(slug)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobApplicationControllerMyApplications: function(options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/job-applications/my-applications\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {Api.JobApplicationEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobApplicationControllerRejectCandidate: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling jobApplicationControllerRejectCandidate.\");\n            }\n            var localVarPath = \"/job-applications/reject-candidate\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {Api.JobApplicationEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobApplicationControllerUndoRejectCandidate: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling jobApplicationControllerUndoRejectCandidate.\");\n            }\n            var localVarPath = \"/job-applications/undo-reject-candidate\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {Api.JobApplicationEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobApplicationControllerWithdraw: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling jobApplicationControllerWithdraw.\");\n            }\n            var localVarPath = \"/job-applications/withdraw\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Update a single JobApplicationEntity\n         * @param {string} id\n         * @param {Api.JobApplicationEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ updateOneBaseJobApplicationControllerJobApplicationEntity: function(id, request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new runtime_1.RequiredError(\"id\", \"Required parameter id was null or undefined when calling updateOneBaseJobApplicationControllerJobApplicationEntity.\");\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling updateOneBaseJobApplicationControllerJobApplicationEntity.\");\n            }\n            var localVarPath = \"/job-applications/{id}\".replace(\"{id}\", encodeURIComponent(String(id)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"PATCH\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.JobApplicationsApiFetchParamCreator = JobApplicationsApiFetchParamCreator;\n/**\n * JobApplicationsApi - functional programming interface\n * @export\n */ var JobApplicationsApiFp = function(configuration) {\n    return {\n        /**\n         * @summary Create a single JobApplicationEntity\n         * @param {Api.JobAplicationCreateDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createOneBaseJobApplicationControllerJobApplicationEntity: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobApplicationsApiFetchParamCreator)(configuration).createOneBaseJobApplicationControllerJobApplicationEntity(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 201)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Delete a single JobApplicationEntity\n         * @param {string} id\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ deleteOneBaseJobApplicationControllerJobApplicationEntity: function(id, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobApplicationsApiFetchParamCreator)(configuration).deleteOneBaseJobApplicationControllerJobApplicationEntity(id, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_h) {\n                        switch(_h.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _h.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (response.status === 200) {\n                                    return [\n                                        2 /*return*/ ,\n                                        {\n                                            status: response.status\n                                        }\n                                    ];\n                                }\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _h.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _h.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _h.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _h.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _h.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _h.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _h.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Retrieve multiple JobApplicationEntities\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string} [s] <p>Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [filter] <p>Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [or] <p>Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [sort] <p>Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [limit] <p>Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a></p>\n         * @param {number} [offset] <p>Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a></p>\n         * @param {number} [page] <p>Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getManyBaseJobApplicationControllerJobApplicationEntity: function(__params, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobApplicationsApiFetchParamCreator)(configuration).getManyBaseJobApplicationControllerJobApplicationEntity(__params, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Retrieve a single JobApplicationEntity\n         * @param {string} id\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getOneBaseJobApplicationControllerJobApplicationEntity: function(__params, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobApplicationsApiFetchParamCreator)(configuration).getOneBaseJobApplicationControllerJobApplicationEntity(__params, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {Api.JobApplicationEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobApplicationControllerAdvanceCandidate: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobApplicationsApiFetchParamCreator)(configuration).jobApplicationControllerAdvanceCandidate(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {Api.JobApplicationEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobApplicationControllerMoveBackCandidate: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobApplicationsApiFetchParamCreator)(configuration).jobApplicationControllerMoveBackCandidate(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {string} slug\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobApplicationControllerMyApplicationBySlug: function(slug, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobApplicationsApiFetchParamCreator)(configuration).jobApplicationControllerMyApplicationBySlug(slug, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobApplicationControllerMyApplications: function(options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobApplicationsApiFetchParamCreator)(configuration).jobApplicationControllerMyApplications(options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {Api.JobApplicationEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobApplicationControllerRejectCandidate: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobApplicationsApiFetchParamCreator)(configuration).jobApplicationControllerRejectCandidate(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {Api.JobApplicationEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobApplicationControllerUndoRejectCandidate: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobApplicationsApiFetchParamCreator)(configuration).jobApplicationControllerUndoRejectCandidate(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {Api.JobApplicationEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobApplicationControllerWithdraw: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobApplicationsApiFetchParamCreator)(configuration).jobApplicationControllerWithdraw(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Update a single JobApplicationEntity\n         * @param {string} id\n         * @param {Api.JobApplicationEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ updateOneBaseJobApplicationControllerJobApplicationEntity: function(id, request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobApplicationsApiFetchParamCreator)(configuration).updateOneBaseJobApplicationControllerJobApplicationEntity(id, request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        }\n    };\n};\nexports.JobApplicationsApiFp = JobApplicationsApiFp;\n/**\n * JobApplicationsApi - factory interface\n * @export\n */ var JobApplicationsApiFactory = function(configuration, basePath, fetch) {\n    return new JobApplicationsApi(configuration, basePath, fetch);\n};\nexports.JobApplicationsApiFactory = JobApplicationsApiFactory;\n/**\n * JobApplicationsApi - object-oriented interface\n * @export\n * @class JobApplicationsApi\n * @extends {BaseAPI}\n */ var JobApplicationsApi = /** @class */ function(_super) {\n    __extends(JobApplicationsApi, _super);\n    function JobApplicationsApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @summary Create a single JobApplicationEntity\n     * @param {Api.JobAplicationCreateDto} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobApplicationsApi.prototype.createOneBaseJobApplicationControllerJobApplicationEntity = function(request, options) {\n        return (0, exports.JobApplicationsApiFp)(this.configuration).createOneBaseJobApplicationControllerJobApplicationEntity(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Delete a single JobApplicationEntity\n     * @param {string} id\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobApplicationsApi.prototype.deleteOneBaseJobApplicationControllerJobApplicationEntity = function(id, options) {\n        return (0, exports.JobApplicationsApiFp)(this.configuration).deleteOneBaseJobApplicationControllerJobApplicationEntity(id, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Retrieve multiple JobApplicationEntities\n     * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n     * @param {string} [s] <p>Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [filter] <p>Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [or] <p>Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [sort] <p>Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n     * @param {number} [limit] <p>Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a></p>\n     * @param {number} [offset] <p>Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a></p>\n     * @param {number} [page] <p>Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a></p>\n     * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobApplicationsApi.prototype.getManyBaseJobApplicationControllerJobApplicationEntity = function(__params, options) {\n        return (0, exports.JobApplicationsApiFp)(this.configuration).getManyBaseJobApplicationControllerJobApplicationEntity(__params, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Retrieve a single JobApplicationEntity\n     * @param {string} id\n     * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n     * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobApplicationsApi.prototype.getOneBaseJobApplicationControllerJobApplicationEntity = function(__params, options) {\n        return (0, exports.JobApplicationsApiFp)(this.configuration).getOneBaseJobApplicationControllerJobApplicationEntity(__params, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {Api.JobApplicationEntity} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobApplicationsApi.prototype.jobApplicationControllerAdvanceCandidate = function(request, options) {\n        return (0, exports.JobApplicationsApiFp)(this.configuration).jobApplicationControllerAdvanceCandidate(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {Api.JobApplicationEntity} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobApplicationsApi.prototype.jobApplicationControllerMoveBackCandidate = function(request, options) {\n        return (0, exports.JobApplicationsApiFp)(this.configuration).jobApplicationControllerMoveBackCandidate(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {string} slug\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobApplicationsApi.prototype.jobApplicationControllerMyApplicationBySlug = function(slug, options) {\n        return (0, exports.JobApplicationsApiFp)(this.configuration).jobApplicationControllerMyApplicationBySlug(slug, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobApplicationsApi.prototype.jobApplicationControllerMyApplications = function(options) {\n        return (0, exports.JobApplicationsApiFp)(this.configuration).jobApplicationControllerMyApplications(options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {Api.JobApplicationEntity} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobApplicationsApi.prototype.jobApplicationControllerRejectCandidate = function(request, options) {\n        return (0, exports.JobApplicationsApiFp)(this.configuration).jobApplicationControllerRejectCandidate(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {Api.JobApplicationEntity} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobApplicationsApi.prototype.jobApplicationControllerUndoRejectCandidate = function(request, options) {\n        return (0, exports.JobApplicationsApiFp)(this.configuration).jobApplicationControllerUndoRejectCandidate(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {Api.JobApplicationEntity} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobApplicationsApi.prototype.jobApplicationControllerWithdraw = function(request, options) {\n        return (0, exports.JobApplicationsApiFp)(this.configuration).jobApplicationControllerWithdraw(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Update a single JobApplicationEntity\n     * @param {string} id\n     * @param {Api.JobApplicationEntity} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobApplicationsApi.prototype.updateOneBaseJobApplicationControllerJobApplicationEntity = function(id, request, options) {\n        return (0, exports.JobApplicationsApiFp)(this.configuration).updateOneBaseJobApplicationControllerJobApplicationEntity(id, request, options)(this.fetch, this.basePath);\n    };\n    return JobApplicationsApi;\n}(runtime_1.BaseAPI);\nexports.JobApplicationsApi = JobApplicationsApi;\n/**\n * JobPostsApi - fetch parameter creator\n * @export\n */ var JobPostsApiFetchParamCreator = function(configuration) {\n    return {\n        /**\n         * @summary Create a single JobPostEntity\n         * @param {Api.JobPostCreateDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createOneBaseJobPostControllerJobPostEntity: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling createOneBaseJobPostControllerJobPostEntity.\");\n            }\n            var localVarPath = \"/job-posts\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Delete a single JobPostEntity\n         * @param {string} id\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ deleteOneBaseJobPostControllerJobPostEntity: function(id, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new runtime_1.RequiredError(\"id\", \"Required parameter id was null or undefined when calling deleteOneBaseJobPostControllerJobPostEntity.\");\n            }\n            var localVarPath = \"/job-posts/{id}\".replace(\"{id}\", encodeURIComponent(String(id)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"DELETE\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Retrieve multiple JobPostEntities\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string} [s] <p>Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [filter] <p>Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [or] <p>Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [sort] <p>Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [limit] <p>Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a></p>\n         * @param {number} [offset] <p>Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a></p>\n         * @param {number} [page] <p>Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getManyBaseJobPostControllerJobPostEntity: function(__params, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/job-posts\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            if (__params.fields !== undefined) {\n                /* array form */ localVarQueryParameter.append(\"fields\", __params.fields.map(function(localVarArrayMapElement) {\n                    return escape(String(localVarArrayMapElement));\n                }).join(\",\"));\n            }\n            if (__params.s !== undefined) {\n                localVarQueryParameter.append(\"s\", String(__params.s));\n            }\n            if (__params.filter !== undefined) {\n                /* array form exploded */ for(var _i = 0, _a = __params.filter; _i < _a.length; _i++){\n                    var localVarArrayElement = _a[_i];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"filter\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.or !== undefined) {\n                /* array form exploded */ for(var _b = 0, _c = __params.or; _b < _c.length; _b++){\n                    var localVarArrayElement = _c[_b];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"or\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.sort !== undefined) {\n                /* array form exploded */ for(var _d = 0, _e = __params.sort; _d < _e.length; _d++){\n                    var localVarArrayElement = _e[_d];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"sort\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.join !== undefined) {\n                /* array form exploded */ for(var _f = 0, _g = __params.join; _f < _g.length; _f++){\n                    var localVarArrayElement = _g[_f];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"join\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.limit !== undefined) {\n                localVarQueryParameter.append(\"limit\", String(__params.limit));\n            }\n            if (__params.offset !== undefined) {\n                localVarQueryParameter.append(\"offset\", String(__params.offset));\n            }\n            if (__params.page !== undefined) {\n                localVarQueryParameter.append(\"page\", String(__params.page));\n            }\n            if (__params.cache !== undefined) {\n                localVarQueryParameter.append(\"cache\", String(__params.cache));\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Retrieve a single JobPostEntity\n         * @param {string} id\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getOneBaseJobPostControllerJobPostEntity: function(__params, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'id' is not null or undefined\n            if (__params.id === null || __params.id === undefined) {\n                throw new runtime_1.RequiredError(\"id\", \"Required parameter id was null or undefined when calling getOneBaseJobPostControllerJobPostEntity.\");\n            }\n            var localVarPath = \"/job-posts/{id}\".replace(\"{id}\", encodeURIComponent(String(__params.id)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            if (__params.fields !== undefined) {\n                /* array form */ localVarQueryParameter.append(\"fields\", __params.fields.map(function(localVarArrayMapElement) {\n                    return escape(String(localVarArrayMapElement));\n                }).join(\",\"));\n            }\n            if (__params.join !== undefined) {\n                /* array form exploded */ for(var _i = 0, _a = __params.join; _i < _a.length; _i++){\n                    var localVarArrayElement = _a[_i];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"join\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.cache !== undefined) {\n                localVarQueryParameter.append(\"cache\", String(__params.cache));\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {Api.EditorRequestDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobPostControllerAddEditor: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling jobPostControllerAddEditor.\");\n            }\n            var localVarPath = \"/job-posts/add-editor\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {string} slug\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobPostControllerGetBySlug: function(slug, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'slug' is not null or undefined\n            if (slug === null || slug === undefined) {\n                throw new runtime_1.RequiredError(\"slug\", \"Required parameter slug was null or undefined when calling jobPostControllerGetBySlug.\");\n            }\n            var localVarPath = \"/job-posts/get-by-slug/{slug}\".replace(\"{slug}\", encodeURIComponent(String(slug)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {string} slug\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobPostControllerGetBySlugForOwner: function(slug, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'slug' is not null or undefined\n            if (slug === null || slug === undefined) {\n                throw new runtime_1.RequiredError(\"slug\", \"Required parameter slug was null or undefined when calling jobPostControllerGetBySlugForOwner.\");\n            }\n            var localVarPath = \"/job-posts/get-by-slug-for-owner/{slug}\".replace(\"{slug}\", encodeURIComponent(String(slug)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string} [s] <p>Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [filter] <p>Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [or] <p>Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [sort] <p>Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [limit] <p>Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a></p>\n         * @param {number} [offset] <p>Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a></p>\n         * @param {number} [page] <p>Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobPostControllerGetManyWithApplied: function(__params, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/job-posts/get-many-with-applied\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            if (__params.fields !== undefined) {\n                /* array form */ localVarQueryParameter.append(\"fields\", __params.fields.map(function(localVarArrayMapElement) {\n                    return escape(String(localVarArrayMapElement));\n                }).join(\",\"));\n            }\n            if (__params.s !== undefined) {\n                localVarQueryParameter.append(\"s\", String(__params.s));\n            }\n            if (__params.filter !== undefined) {\n                /* array form exploded */ for(var _i = 0, _a = __params.filter; _i < _a.length; _i++){\n                    var localVarArrayElement = _a[_i];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"filter\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.or !== undefined) {\n                /* array form exploded */ for(var _b = 0, _c = __params.or; _b < _c.length; _b++){\n                    var localVarArrayElement = _c[_b];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"or\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.sort !== undefined) {\n                /* array form exploded */ for(var _d = 0, _e = __params.sort; _d < _e.length; _d++){\n                    var localVarArrayElement = _e[_d];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"sort\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.join !== undefined) {\n                /* array form exploded */ for(var _f = 0, _g = __params.join; _f < _g.length; _f++){\n                    var localVarArrayElement = _g[_f];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"join\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.limit !== undefined) {\n                localVarQueryParameter.append(\"limit\", String(__params.limit));\n            }\n            if (__params.offset !== undefined) {\n                localVarQueryParameter.append(\"offset\", String(__params.offset));\n            }\n            if (__params.page !== undefined) {\n                localVarQueryParameter.append(\"page\", String(__params.page));\n            }\n            if (__params.cache !== undefined) {\n                localVarQueryParameter.append(\"cache\", String(__params.cache));\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * <p>Obtains all items the current users has permission to edit.</p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobPostControllerICanEdit: function(options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/job-posts/get-editable-by-me\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * <p>Obtains all items the current users owns.</p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobPostControllerOwnedByMe: function(options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/job-posts/get-owned-by-me\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {Api.EditorRequestDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobPostControllerRemoveEditor: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling jobPostControllerRemoveEditor.\");\n            }\n            var localVarPath = \"/job-posts/remove-editor\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {Api.TransferOwnershipRequestDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobPostControllerSwitchOwner: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling jobPostControllerSwitchOwner.\");\n            }\n            var localVarPath = \"/job-posts/transfer-ownership\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Update a single JobPostEntity\n         * @param {string} id\n         * @param {Api.JobPostEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ updateOneBaseJobPostControllerJobPostEntity: function(id, request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new runtime_1.RequiredError(\"id\", \"Required parameter id was null or undefined when calling updateOneBaseJobPostControllerJobPostEntity.\");\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling updateOneBaseJobPostControllerJobPostEntity.\");\n            }\n            var localVarPath = \"/job-posts/{id}\".replace(\"{id}\", encodeURIComponent(String(id)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"PATCH\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.JobPostsApiFetchParamCreator = JobPostsApiFetchParamCreator;\n/**\n * JobPostsApi - functional programming interface\n * @export\n */ var JobPostsApiFp = function(configuration) {\n    return {\n        /**\n         * @summary Create a single JobPostEntity\n         * @param {Api.JobPostCreateDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createOneBaseJobPostControllerJobPostEntity: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobPostsApiFetchParamCreator)(configuration).createOneBaseJobPostControllerJobPostEntity(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 201)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Delete a single JobPostEntity\n         * @param {string} id\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ deleteOneBaseJobPostControllerJobPostEntity: function(id, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobPostsApiFetchParamCreator)(configuration).deleteOneBaseJobPostControllerJobPostEntity(id, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_h) {\n                        switch(_h.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _h.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (response.status === 200) {\n                                    return [\n                                        2 /*return*/ ,\n                                        {\n                                            status: response.status\n                                        }\n                                    ];\n                                }\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _h.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _h.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _h.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _h.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _h.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _h.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _h.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Retrieve multiple JobPostEntities\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string} [s] <p>Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [filter] <p>Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [or] <p>Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [sort] <p>Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [limit] <p>Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a></p>\n         * @param {number} [offset] <p>Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a></p>\n         * @param {number} [page] <p>Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getManyBaseJobPostControllerJobPostEntity: function(__params, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobPostsApiFetchParamCreator)(configuration).getManyBaseJobPostControllerJobPostEntity(__params, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_b) {\n                        switch(_b.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _b.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _b.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Retrieve a single JobPostEntity\n         * @param {string} id\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getOneBaseJobPostControllerJobPostEntity: function(__params, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobPostsApiFetchParamCreator)(configuration).getOneBaseJobPostControllerJobPostEntity(__params, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {Api.EditorRequestDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobPostControllerAddEditor: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobPostsApiFetchParamCreator)(configuration).jobPostControllerAddEditor(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_h) {\n                        switch(_h.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _h.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _h.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _h.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _h.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _h.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _h.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _h.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _h.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {string} slug\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobPostControllerGetBySlug: function(slug, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobPostsApiFetchParamCreator)(configuration).jobPostControllerGetBySlug(slug, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {string} slug\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobPostControllerGetBySlugForOwner: function(slug, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobPostsApiFetchParamCreator)(configuration).jobPostControllerGetBySlugForOwner(slug, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string} [s] <p>Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [filter] <p>Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [or] <p>Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [sort] <p>Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [limit] <p>Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a></p>\n         * @param {number} [offset] <p>Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a></p>\n         * @param {number} [page] <p>Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobPostControllerGetManyWithApplied: function(__params, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobPostsApiFetchParamCreator)(configuration).jobPostControllerGetManyWithApplied(__params, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * <p>Obtains all items the current users has permission to edit.</p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobPostControllerICanEdit: function(options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobPostsApiFetchParamCreator)(configuration).jobPostControllerICanEdit(options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_h) {\n                        switch(_h.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _h.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (response.status === 200) {\n                                    return [\n                                        2 /*return*/ ,\n                                        {\n                                            status: response.status\n                                        }\n                                    ];\n                                }\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _h.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _h.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _h.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _h.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _h.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _h.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _h.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * <p>Obtains all items the current users owns.</p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobPostControllerOwnedByMe: function(options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobPostsApiFetchParamCreator)(configuration).jobPostControllerOwnedByMe(options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_h) {\n                        switch(_h.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _h.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (response.status === 200) {\n                                    return [\n                                        2 /*return*/ ,\n                                        {\n                                            status: response.status\n                                        }\n                                    ];\n                                }\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _h.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _h.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _h.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _h.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _h.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _h.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _h.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {Api.EditorRequestDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobPostControllerRemoveEditor: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobPostsApiFetchParamCreator)(configuration).jobPostControllerRemoveEditor(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_h) {\n                        switch(_h.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _h.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _h.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _h.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _h.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _h.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _h.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _h.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _h.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {Api.TransferOwnershipRequestDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ jobPostControllerSwitchOwner: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobPostsApiFetchParamCreator)(configuration).jobPostControllerSwitchOwner(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_h) {\n                        switch(_h.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _h.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _h.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _h.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _h.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _h.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _h.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _h.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _h.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Update a single JobPostEntity\n         * @param {string} id\n         * @param {Api.JobPostEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ updateOneBaseJobPostControllerJobPostEntity: function(id, request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobPostsApiFetchParamCreator)(configuration).updateOneBaseJobPostControllerJobPostEntity(id, request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        }\n    };\n};\nexports.JobPostsApiFp = JobPostsApiFp;\n/**\n * JobPostsApi - factory interface\n * @export\n */ var JobPostsApiFactory = function(configuration, basePath, fetch) {\n    return new JobPostsApi(configuration, basePath, fetch);\n};\nexports.JobPostsApiFactory = JobPostsApiFactory;\n/**\n * JobPostsApi - object-oriented interface\n * @export\n * @class JobPostsApi\n * @extends {BaseAPI}\n */ var JobPostsApi = /** @class */ function(_super) {\n    __extends(JobPostsApi, _super);\n    function JobPostsApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @summary Create a single JobPostEntity\n     * @param {Api.JobPostCreateDto} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobPostsApi.prototype.createOneBaseJobPostControllerJobPostEntity = function(request, options) {\n        return (0, exports.JobPostsApiFp)(this.configuration).createOneBaseJobPostControllerJobPostEntity(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Delete a single JobPostEntity\n     * @param {string} id\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobPostsApi.prototype.deleteOneBaseJobPostControllerJobPostEntity = function(id, options) {\n        return (0, exports.JobPostsApiFp)(this.configuration).deleteOneBaseJobPostControllerJobPostEntity(id, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Retrieve multiple JobPostEntities\n     * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n     * @param {string} [s] <p>Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [filter] <p>Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [or] <p>Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [sort] <p>Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n     * @param {number} [limit] <p>Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a></p>\n     * @param {number} [offset] <p>Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a></p>\n     * @param {number} [page] <p>Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a></p>\n     * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobPostsApi.prototype.getManyBaseJobPostControllerJobPostEntity = function(__params, options) {\n        return (0, exports.JobPostsApiFp)(this.configuration).getManyBaseJobPostControllerJobPostEntity(__params, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Retrieve a single JobPostEntity\n     * @param {string} id\n     * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n     * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobPostsApi.prototype.getOneBaseJobPostControllerJobPostEntity = function(__params, options) {\n        return (0, exports.JobPostsApiFp)(this.configuration).getOneBaseJobPostControllerJobPostEntity(__params, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {Api.EditorRequestDto} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobPostsApi.prototype.jobPostControllerAddEditor = function(request, options) {\n        return (0, exports.JobPostsApiFp)(this.configuration).jobPostControllerAddEditor(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {string} slug\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobPostsApi.prototype.jobPostControllerGetBySlug = function(slug, options) {\n        return (0, exports.JobPostsApiFp)(this.configuration).jobPostControllerGetBySlug(slug, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {string} slug\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobPostsApi.prototype.jobPostControllerGetBySlugForOwner = function(slug, options) {\n        return (0, exports.JobPostsApiFp)(this.configuration).jobPostControllerGetBySlugForOwner(slug, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n     * @param {string} [s] <p>Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [filter] <p>Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [or] <p>Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [sort] <p>Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n     * @param {number} [limit] <p>Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a></p>\n     * @param {number} [offset] <p>Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a></p>\n     * @param {number} [page] <p>Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a></p>\n     * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobPostsApi.prototype.jobPostControllerGetManyWithApplied = function(__params, options) {\n        return (0, exports.JobPostsApiFp)(this.configuration).jobPostControllerGetManyWithApplied(__params, options)(this.fetch, this.basePath);\n    };\n    /**\n     * <p>Obtains all items the current users has permission to edit.</p>\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobPostsApi.prototype.jobPostControllerICanEdit = function(options) {\n        return (0, exports.JobPostsApiFp)(this.configuration).jobPostControllerICanEdit(options)(this.fetch, this.basePath);\n    };\n    /**\n     * <p>Obtains all items the current users owns.</p>\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobPostsApi.prototype.jobPostControllerOwnedByMe = function(options) {\n        return (0, exports.JobPostsApiFp)(this.configuration).jobPostControllerOwnedByMe(options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {Api.EditorRequestDto} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobPostsApi.prototype.jobPostControllerRemoveEditor = function(request, options) {\n        return (0, exports.JobPostsApiFp)(this.configuration).jobPostControllerRemoveEditor(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {Api.TransferOwnershipRequestDto} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobPostsApi.prototype.jobPostControllerSwitchOwner = function(request, options) {\n        return (0, exports.JobPostsApiFp)(this.configuration).jobPostControllerSwitchOwner(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Update a single JobPostEntity\n     * @param {string} id\n     * @param {Api.JobPostEntity} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobPostsApi.prototype.updateOneBaseJobPostControllerJobPostEntity = function(id, request, options) {\n        return (0, exports.JobPostsApiFp)(this.configuration).updateOneBaseJobPostControllerJobPostEntity(id, request, options)(this.fetch, this.basePath);\n    };\n    return JobPostsApi;\n}(runtime_1.BaseAPI);\nexports.JobPostsApi = JobPostsApi;\n/**\n * JobTagsApi - fetch parameter creator\n * @export\n */ var JobTagsApiFetchParamCreator = function(configuration) {\n    return {\n        /**\n         * @summary Create a single JobTagEntity\n         * @param {Api.JobTagEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createOneBaseJobTagControllerJobTagEntity: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling createOneBaseJobTagControllerJobTagEntity.\");\n            }\n            var localVarPath = \"/job-tags\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Delete a single JobTagEntity\n         * @param {string} id\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ deleteOneBaseJobTagControllerJobTagEntity: function(id, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new runtime_1.RequiredError(\"id\", \"Required parameter id was null or undefined when calling deleteOneBaseJobTagControllerJobTagEntity.\");\n            }\n            var localVarPath = \"/job-tags/{id}\".replace(\"{id}\", encodeURIComponent(String(id)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"DELETE\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Retrieve multiple JobTagEntities\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string} [s] <p>Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [filter] <p>Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [or] <p>Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [sort] <p>Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [limit] <p>Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a></p>\n         * @param {number} [offset] <p>Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a></p>\n         * @param {number} [page] <p>Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getManyBaseJobTagControllerJobTagEntity: function(__params, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/job-tags\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            if (__params.fields !== undefined) {\n                /* array form */ localVarQueryParameter.append(\"fields\", __params.fields.map(function(localVarArrayMapElement) {\n                    return escape(String(localVarArrayMapElement));\n                }).join(\",\"));\n            }\n            if (__params.s !== undefined) {\n                localVarQueryParameter.append(\"s\", String(__params.s));\n            }\n            if (__params.filter !== undefined) {\n                /* array form exploded */ for(var _i = 0, _a = __params.filter; _i < _a.length; _i++){\n                    var localVarArrayElement = _a[_i];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"filter\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.or !== undefined) {\n                /* array form exploded */ for(var _b = 0, _c = __params.or; _b < _c.length; _b++){\n                    var localVarArrayElement = _c[_b];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"or\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.sort !== undefined) {\n                /* array form exploded */ for(var _d = 0, _e = __params.sort; _d < _e.length; _d++){\n                    var localVarArrayElement = _e[_d];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"sort\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.join !== undefined) {\n                /* array form exploded */ for(var _f = 0, _g = __params.join; _f < _g.length; _f++){\n                    var localVarArrayElement = _g[_f];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"join\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.limit !== undefined) {\n                localVarQueryParameter.append(\"limit\", String(__params.limit));\n            }\n            if (__params.offset !== undefined) {\n                localVarQueryParameter.append(\"offset\", String(__params.offset));\n            }\n            if (__params.page !== undefined) {\n                localVarQueryParameter.append(\"page\", String(__params.page));\n            }\n            if (__params.cache !== undefined) {\n                localVarQueryParameter.append(\"cache\", String(__params.cache));\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Retrieve a single JobTagEntity\n         * @param {string} id\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getOneBaseJobTagControllerJobTagEntity: function(__params, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'id' is not null or undefined\n            if (__params.id === null || __params.id === undefined) {\n                throw new runtime_1.RequiredError(\"id\", \"Required parameter id was null or undefined when calling getOneBaseJobTagControllerJobTagEntity.\");\n            }\n            var localVarPath = \"/job-tags/{id}\".replace(\"{id}\", encodeURIComponent(String(__params.id)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            if (__params.fields !== undefined) {\n                /* array form */ localVarQueryParameter.append(\"fields\", __params.fields.map(function(localVarArrayMapElement) {\n                    return escape(String(localVarArrayMapElement));\n                }).join(\",\"));\n            }\n            if (__params.join !== undefined) {\n                /* array form exploded */ for(var _i = 0, _a = __params.join; _i < _a.length; _i++){\n                    var localVarArrayElement = _a[_i];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"join\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.cache !== undefined) {\n                localVarQueryParameter.append(\"cache\", String(__params.cache));\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Update a single JobTagEntity\n         * @param {string} id\n         * @param {Api.JobTagEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ updateOneBaseJobTagControllerJobTagEntity: function(id, request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new runtime_1.RequiredError(\"id\", \"Required parameter id was null or undefined when calling updateOneBaseJobTagControllerJobTagEntity.\");\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling updateOneBaseJobTagControllerJobTagEntity.\");\n            }\n            var localVarPath = \"/job-tags/{id}\".replace(\"{id}\", encodeURIComponent(String(id)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"PATCH\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.JobTagsApiFetchParamCreator = JobTagsApiFetchParamCreator;\n/**\n * JobTagsApi - functional programming interface\n * @export\n */ var JobTagsApiFp = function(configuration) {\n    return {\n        /**\n         * @summary Create a single JobTagEntity\n         * @param {Api.JobTagEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createOneBaseJobTagControllerJobTagEntity: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobTagsApiFetchParamCreator)(configuration).createOneBaseJobTagControllerJobTagEntity(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 201)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Delete a single JobTagEntity\n         * @param {string} id\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ deleteOneBaseJobTagControllerJobTagEntity: function(id, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobTagsApiFetchParamCreator)(configuration).deleteOneBaseJobTagControllerJobTagEntity(id, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_h) {\n                        switch(_h.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _h.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (response.status === 200) {\n                                    return [\n                                        2 /*return*/ ,\n                                        {\n                                            status: response.status\n                                        }\n                                    ];\n                                }\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _h.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _h.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _h.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _h.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _h.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _h.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _h.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Retrieve multiple JobTagEntities\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string} [s] <p>Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [filter] <p>Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [or] <p>Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [sort] <p>Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [limit] <p>Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a></p>\n         * @param {number} [offset] <p>Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a></p>\n         * @param {number} [page] <p>Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getManyBaseJobTagControllerJobTagEntity: function(__params, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobTagsApiFetchParamCreator)(configuration).getManyBaseJobTagControllerJobTagEntity(__params, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_b) {\n                        switch(_b.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _b.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _b.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Retrieve a single JobTagEntity\n         * @param {string} id\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getOneBaseJobTagControllerJobTagEntity: function(__params, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobTagsApiFetchParamCreator)(configuration).getOneBaseJobTagControllerJobTagEntity(__params, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Update a single JobTagEntity\n         * @param {string} id\n         * @param {Api.JobTagEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ updateOneBaseJobTagControllerJobTagEntity: function(id, request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.JobTagsApiFetchParamCreator)(configuration).updateOneBaseJobTagControllerJobTagEntity(id, request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        }\n    };\n};\nexports.JobTagsApiFp = JobTagsApiFp;\n/**\n * JobTagsApi - factory interface\n * @export\n */ var JobTagsApiFactory = function(configuration, basePath, fetch) {\n    return new JobTagsApi(configuration, basePath, fetch);\n};\nexports.JobTagsApiFactory = JobTagsApiFactory;\n/**\n * JobTagsApi - object-oriented interface\n * @export\n * @class JobTagsApi\n * @extends {BaseAPI}\n */ var JobTagsApi = /** @class */ function(_super) {\n    __extends(JobTagsApi, _super);\n    function JobTagsApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @summary Create a single JobTagEntity\n     * @param {Api.JobTagEntity} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobTagsApi.prototype.createOneBaseJobTagControllerJobTagEntity = function(request, options) {\n        return (0, exports.JobTagsApiFp)(this.configuration).createOneBaseJobTagControllerJobTagEntity(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Delete a single JobTagEntity\n     * @param {string} id\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobTagsApi.prototype.deleteOneBaseJobTagControllerJobTagEntity = function(id, options) {\n        return (0, exports.JobTagsApiFp)(this.configuration).deleteOneBaseJobTagControllerJobTagEntity(id, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Retrieve multiple JobTagEntities\n     * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n     * @param {string} [s] <p>Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [filter] <p>Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [or] <p>Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [sort] <p>Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n     * @param {number} [limit] <p>Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a></p>\n     * @param {number} [offset] <p>Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a></p>\n     * @param {number} [page] <p>Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a></p>\n     * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobTagsApi.prototype.getManyBaseJobTagControllerJobTagEntity = function(__params, options) {\n        return (0, exports.JobTagsApiFp)(this.configuration).getManyBaseJobTagControllerJobTagEntity(__params, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Retrieve a single JobTagEntity\n     * @param {string} id\n     * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n     * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobTagsApi.prototype.getOneBaseJobTagControllerJobTagEntity = function(__params, options) {\n        return (0, exports.JobTagsApiFp)(this.configuration).getOneBaseJobTagControllerJobTagEntity(__params, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Update a single JobTagEntity\n     * @param {string} id\n     * @param {Api.JobTagEntity} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ JobTagsApi.prototype.updateOneBaseJobTagControllerJobTagEntity = function(id, request, options) {\n        return (0, exports.JobTagsApiFp)(this.configuration).updateOneBaseJobTagControllerJobTagEntity(id, request, options)(this.fetch, this.basePath);\n    };\n    return JobTagsApi;\n}(runtime_1.BaseAPI);\nexports.JobTagsApi = JobTagsApi;\n/**\n * ProjectApi - fetch parameter creator\n * @export\n */ var ProjectApiFetchParamCreator = function(configuration) {\n    return {\n        /**\n         * @summary Create a single ProjectEntity\n         * @param {Api.CreateProjectDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createOneBaseProjectControllerProjectEntity: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling createOneBaseProjectControllerProjectEntity.\");\n            }\n            var localVarPath = \"/project\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Delete a single ProjectEntity\n         * @param {string} slug\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ deleteOneBaseProjectControllerProjectEntity: function(slug, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'slug' is not null or undefined\n            if (slug === null || slug === undefined) {\n                throw new runtime_1.RequiredError(\"slug\", \"Required parameter slug was null or undefined when calling deleteOneBaseProjectControllerProjectEntity.\");\n            }\n            var localVarPath = \"/project/{slug}\".replace(\"{slug}\", encodeURIComponent(String(slug)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"DELETE\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Retrieve multiple ProjectEntities\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string} [s] <p>Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [filter] <p>Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [or] <p>Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [sort] <p>Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [limit] <p>Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a></p>\n         * @param {number} [offset] <p>Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a></p>\n         * @param {number} [page] <p>Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getManyBaseProjectControllerProjectEntity: function(__params, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/project\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            if (__params.fields !== undefined) {\n                /* array form */ localVarQueryParameter.append(\"fields\", __params.fields.map(function(localVarArrayMapElement) {\n                    return escape(String(localVarArrayMapElement));\n                }).join(\",\"));\n            }\n            if (__params.s !== undefined) {\n                localVarQueryParameter.append(\"s\", String(__params.s));\n            }\n            if (__params.filter !== undefined) {\n                /* array form exploded */ for(var _i = 0, _a = __params.filter; _i < _a.length; _i++){\n                    var localVarArrayElement = _a[_i];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"filter\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.or !== undefined) {\n                /* array form exploded */ for(var _b = 0, _c = __params.or; _b < _c.length; _b++){\n                    var localVarArrayElement = _c[_b];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"or\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.sort !== undefined) {\n                /* array form exploded */ for(var _d = 0, _e = __params.sort; _d < _e.length; _d++){\n                    var localVarArrayElement = _e[_d];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"sort\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.join !== undefined) {\n                /* array form exploded */ for(var _f = 0, _g = __params.join; _f < _g.length; _f++){\n                    var localVarArrayElement = _g[_f];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"join\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.limit !== undefined) {\n                localVarQueryParameter.append(\"limit\", String(__params.limit));\n            }\n            if (__params.offset !== undefined) {\n                localVarQueryParameter.append(\"offset\", String(__params.offset));\n            }\n            if (__params.page !== undefined) {\n                localVarQueryParameter.append(\"page\", String(__params.page));\n            }\n            if (__params.cache !== undefined) {\n                localVarQueryParameter.append(\"cache\", String(__params.cache));\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Retrieve a single ProjectEntity\n         * @param {string} slug\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getOneBaseProjectControllerProjectEntity: function(__params, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'slug' is not null or undefined\n            if (__params.slug === null || __params.slug === undefined) {\n                throw new runtime_1.RequiredError(\"slug\", \"Required parameter slug was null or undefined when calling getOneBaseProjectControllerProjectEntity.\");\n            }\n            var localVarPath = \"/project/{slug}\".replace(\"{slug}\", encodeURIComponent(String(__params.slug)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            if (__params.fields !== undefined) {\n                /* array form */ localVarQueryParameter.append(\"fields\", __params.fields.map(function(localVarArrayMapElement) {\n                    return escape(String(localVarArrayMapElement));\n                }).join(\",\"));\n            }\n            if (__params.join !== undefined) {\n                /* array form exploded */ for(var _i = 0, _a = __params.join; _i < _a.length; _i++){\n                    var localVarArrayElement = _a[_i];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"join\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.cache !== undefined) {\n                localVarQueryParameter.append(\"cache\", String(__params.cache));\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {Api.EditorRequestDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ projectControllerAddEditor: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling projectControllerAddEditor.\");\n            }\n            var localVarPath = \"/project/add-editor\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * <p>Obtains all items the current users has permission to edit.</p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ projectControllerICanEdit: function(options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/project/get-editable-by-me\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * <p>Obtains all items the current users owns.</p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ projectControllerOwnedByMe: function(options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/project/get-owned-by-me\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {Api.EditorRequestDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ projectControllerRemoveEditor: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling projectControllerRemoveEditor.\");\n            }\n            var localVarPath = \"/project/remove-editor\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {Api.TransferOwnershipRequestDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ projectControllerSwitchOwner: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling projectControllerSwitchOwner.\");\n            }\n            var localVarPath = \"/project/transfer-ownership\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Update a single ProjectEntity\n         * @param {string} slug\n         * @param {Api.CreateProjectDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ updateOneBaseProjectControllerProjectEntity: function(slug, request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'slug' is not null or undefined\n            if (slug === null || slug === undefined) {\n                throw new runtime_1.RequiredError(\"slug\", \"Required parameter slug was null or undefined when calling updateOneBaseProjectControllerProjectEntity.\");\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling updateOneBaseProjectControllerProjectEntity.\");\n            }\n            var localVarPath = \"/project/{slug}\".replace(\"{slug}\", encodeURIComponent(String(slug)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"PATCH\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.ProjectApiFetchParamCreator = ProjectApiFetchParamCreator;\n/**\n * ProjectApi - functional programming interface\n * @export\n */ var ProjectApiFp = function(configuration) {\n    return {\n        /**\n         * @summary Create a single ProjectEntity\n         * @param {Api.CreateProjectDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createOneBaseProjectControllerProjectEntity: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.ProjectApiFetchParamCreator)(configuration).createOneBaseProjectControllerProjectEntity(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_k) {\n                        switch(_k.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _k.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 201)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _k.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _k.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _k.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _k.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _k.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _k.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _k.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _k.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    27\n                                ];\n                                _j = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 26:\n                                return [\n                                    2 /*return*/ ,\n                                    (_j.body = _k.sent(), _j)\n                                ];\n                            case 27:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Delete a single ProjectEntity\n         * @param {string} slug\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ deleteOneBaseProjectControllerProjectEntity: function(slug, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.ProjectApiFetchParamCreator)(configuration).deleteOneBaseProjectControllerProjectEntity(slug, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_h) {\n                        switch(_h.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _h.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (response.status === 200) {\n                                    return [\n                                        2 /*return*/ ,\n                                        {\n                                            status: response.status\n                                        }\n                                    ];\n                                }\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _h.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _h.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _h.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _h.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _h.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _h.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _h.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Retrieve multiple ProjectEntities\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string} [s] <p>Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [filter] <p>Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [or] <p>Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [sort] <p>Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [limit] <p>Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a></p>\n         * @param {number} [offset] <p>Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a></p>\n         * @param {number} [page] <p>Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getManyBaseProjectControllerProjectEntity: function(__params, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.ProjectApiFetchParamCreator)(configuration).getManyBaseProjectControllerProjectEntity(__params, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Retrieve a single ProjectEntity\n         * @param {string} slug\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getOneBaseProjectControllerProjectEntity: function(__params, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.ProjectApiFetchParamCreator)(configuration).getOneBaseProjectControllerProjectEntity(__params, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_k) {\n                        switch(_k.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _k.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _k.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _k.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _k.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _k.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _k.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _k.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _k.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _k.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    27\n                                ];\n                                _j = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 26:\n                                return [\n                                    2 /*return*/ ,\n                                    (_j.body = _k.sent(), _j)\n                                ];\n                            case 27:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {Api.EditorRequestDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ projectControllerAddEditor: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.ProjectApiFetchParamCreator)(configuration).projectControllerAddEditor(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_h) {\n                        switch(_h.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _h.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _h.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _h.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _h.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _h.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _h.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _h.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _h.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * <p>Obtains all items the current users has permission to edit.</p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ projectControllerICanEdit: function(options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.ProjectApiFetchParamCreator)(configuration).projectControllerICanEdit(options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_h) {\n                        switch(_h.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _h.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (response.status === 200) {\n                                    return [\n                                        2 /*return*/ ,\n                                        {\n                                            status: response.status\n                                        }\n                                    ];\n                                }\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _h.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _h.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _h.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _h.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _h.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _h.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _h.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * <p>Obtains all items the current users owns.</p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ projectControllerOwnedByMe: function(options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.ProjectApiFetchParamCreator)(configuration).projectControllerOwnedByMe(options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_h) {\n                        switch(_h.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _h.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (response.status === 200) {\n                                    return [\n                                        2 /*return*/ ,\n                                        {\n                                            status: response.status\n                                        }\n                                    ];\n                                }\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _h.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _h.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _h.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _h.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _h.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _h.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _h.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {Api.EditorRequestDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ projectControllerRemoveEditor: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.ProjectApiFetchParamCreator)(configuration).projectControllerRemoveEditor(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_h) {\n                        switch(_h.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _h.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _h.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _h.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _h.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _h.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _h.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _h.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _h.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {Api.TransferOwnershipRequestDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ projectControllerSwitchOwner: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.ProjectApiFetchParamCreator)(configuration).projectControllerSwitchOwner(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_h) {\n                        switch(_h.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _h.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _h.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _h.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _h.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _h.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _h.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _h.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _h.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Update a single ProjectEntity\n         * @param {string} slug\n         * @param {Api.CreateProjectDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ updateOneBaseProjectControllerProjectEntity: function(slug, request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.ProjectApiFetchParamCreator)(configuration).updateOneBaseProjectControllerProjectEntity(slug, request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_k) {\n                        switch(_k.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _k.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _k.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _k.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _k.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _k.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _k.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _k.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _k.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _k.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    27\n                                ];\n                                _j = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 26:\n                                return [\n                                    2 /*return*/ ,\n                                    (_j.body = _k.sent(), _j)\n                                ];\n                            case 27:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        }\n    };\n};\nexports.ProjectApiFp = ProjectApiFp;\n/**\n * ProjectApi - factory interface\n * @export\n */ var ProjectApiFactory = function(configuration, basePath, fetch) {\n    return new ProjectApi(configuration, basePath, fetch);\n};\nexports.ProjectApiFactory = ProjectApiFactory;\n/**\n * ProjectApi - object-oriented interface\n * @export\n * @class ProjectApi\n * @extends {BaseAPI}\n */ var ProjectApi = /** @class */ function(_super) {\n    __extends(ProjectApi, _super);\n    function ProjectApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @summary Create a single ProjectEntity\n     * @param {Api.CreateProjectDto} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ ProjectApi.prototype.createOneBaseProjectControllerProjectEntity = function(request, options) {\n        return (0, exports.ProjectApiFp)(this.configuration).createOneBaseProjectControllerProjectEntity(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Delete a single ProjectEntity\n     * @param {string} slug\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ ProjectApi.prototype.deleteOneBaseProjectControllerProjectEntity = function(slug, options) {\n        return (0, exports.ProjectApiFp)(this.configuration).deleteOneBaseProjectControllerProjectEntity(slug, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Retrieve multiple ProjectEntities\n     * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n     * @param {string} [s] <p>Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [filter] <p>Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [or] <p>Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [sort] <p>Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n     * @param {number} [limit] <p>Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a></p>\n     * @param {number} [offset] <p>Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a></p>\n     * @param {number} [page] <p>Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a></p>\n     * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ ProjectApi.prototype.getManyBaseProjectControllerProjectEntity = function(__params, options) {\n        return (0, exports.ProjectApiFp)(this.configuration).getManyBaseProjectControllerProjectEntity(__params, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Retrieve a single ProjectEntity\n     * @param {string} slug\n     * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n     * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ ProjectApi.prototype.getOneBaseProjectControllerProjectEntity = function(__params, options) {\n        return (0, exports.ProjectApiFp)(this.configuration).getOneBaseProjectControllerProjectEntity(__params, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {Api.EditorRequestDto} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ ProjectApi.prototype.projectControllerAddEditor = function(request, options) {\n        return (0, exports.ProjectApiFp)(this.configuration).projectControllerAddEditor(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * <p>Obtains all items the current users has permission to edit.</p>\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ ProjectApi.prototype.projectControllerICanEdit = function(options) {\n        return (0, exports.ProjectApiFp)(this.configuration).projectControllerICanEdit(options)(this.fetch, this.basePath);\n    };\n    /**\n     * <p>Obtains all items the current users owns.</p>\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ ProjectApi.prototype.projectControllerOwnedByMe = function(options) {\n        return (0, exports.ProjectApiFp)(this.configuration).projectControllerOwnedByMe(options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {Api.EditorRequestDto} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ ProjectApi.prototype.projectControllerRemoveEditor = function(request, options) {\n        return (0, exports.ProjectApiFp)(this.configuration).projectControllerRemoveEditor(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {Api.TransferOwnershipRequestDto} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ ProjectApi.prototype.projectControllerSwitchOwner = function(request, options) {\n        return (0, exports.ProjectApiFp)(this.configuration).projectControllerSwitchOwner(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Update a single ProjectEntity\n     * @param {string} slug\n     * @param {Api.CreateProjectDto} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ ProjectApi.prototype.updateOneBaseProjectControllerProjectEntity = function(slug, request, options) {\n        return (0, exports.ProjectApiFp)(this.configuration).updateOneBaseProjectControllerProjectEntity(slug, request, options)(this.fetch, this.basePath);\n    };\n    return ProjectApi;\n}(runtime_1.BaseAPI);\nexports.ProjectApi = ProjectApi;\n/**\n * ProjectVersionApi - fetch parameter creator\n * @export\n */ var ProjectVersionApiFetchParamCreator = function(configuration) {\n    return {\n        /**\n         * @summary Create a single ProjectVersionEntity\n         * @param {Api.ProjectVersionEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createOneBaseProjectVersionControllerProjectVersionEntity: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling createOneBaseProjectVersionControllerProjectVersionEntity.\");\n            }\n            var localVarPath = \"/project-version\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Delete a single ProjectVersionEntity\n         * @param {string} id\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ deleteOneBaseProjectVersionControllerProjectVersionEntity: function(id, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new runtime_1.RequiredError(\"id\", \"Required parameter id was null or undefined when calling deleteOneBaseProjectVersionControllerProjectVersionEntity.\");\n            }\n            var localVarPath = \"/project-version/{id}\".replace(\"{id}\", encodeURIComponent(String(id)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"DELETE\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Retrieve multiple ProjectVersionEntities\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string} [s] <p>Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [filter] <p>Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [or] <p>Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [sort] <p>Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [limit] <p>Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a></p>\n         * @param {number} [offset] <p>Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a></p>\n         * @param {number} [page] <p>Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getManyBaseProjectVersionControllerProjectVersionEntity: function(__params, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/project-version\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            if (__params.fields !== undefined) {\n                /* array form */ localVarQueryParameter.append(\"fields\", __params.fields.map(function(localVarArrayMapElement) {\n                    return escape(String(localVarArrayMapElement));\n                }).join(\",\"));\n            }\n            if (__params.s !== undefined) {\n                localVarQueryParameter.append(\"s\", String(__params.s));\n            }\n            if (__params.filter !== undefined) {\n                /* array form exploded */ for(var _i = 0, _a = __params.filter; _i < _a.length; _i++){\n                    var localVarArrayElement = _a[_i];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"filter\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.or !== undefined) {\n                /* array form exploded */ for(var _b = 0, _c = __params.or; _b < _c.length; _b++){\n                    var localVarArrayElement = _c[_b];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"or\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.sort !== undefined) {\n                /* array form exploded */ for(var _d = 0, _e = __params.sort; _d < _e.length; _d++){\n                    var localVarArrayElement = _e[_d];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"sort\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.join !== undefined) {\n                /* array form exploded */ for(var _f = 0, _g = __params.join; _f < _g.length; _f++){\n                    var localVarArrayElement = _g[_f];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"join\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.limit !== undefined) {\n                localVarQueryParameter.append(\"limit\", String(__params.limit));\n            }\n            if (__params.offset !== undefined) {\n                localVarQueryParameter.append(\"offset\", String(__params.offset));\n            }\n            if (__params.page !== undefined) {\n                localVarQueryParameter.append(\"page\", String(__params.page));\n            }\n            if (__params.cache !== undefined) {\n                localVarQueryParameter.append(\"cache\", String(__params.cache));\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Retrieve a single ProjectVersionEntity\n         * @param {string} id\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getOneBaseProjectVersionControllerProjectVersionEntity: function(__params, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'id' is not null or undefined\n            if (__params.id === null || __params.id === undefined) {\n                throw new runtime_1.RequiredError(\"id\", \"Required parameter id was null or undefined when calling getOneBaseProjectVersionControllerProjectVersionEntity.\");\n            }\n            var localVarPath = \"/project-version/{id}\".replace(\"{id}\", encodeURIComponent(String(__params.id)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            if (__params.fields !== undefined) {\n                /* array form */ localVarQueryParameter.append(\"fields\", __params.fields.map(function(localVarArrayMapElement) {\n                    return escape(String(localVarArrayMapElement));\n                }).join(\",\"));\n            }\n            if (__params.join !== undefined) {\n                /* array form exploded */ for(var _i = 0, _a = __params.join; _i < _a.length; _i++){\n                    var localVarArrayElement = _a[_i];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"join\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.cache !== undefined) {\n                localVarQueryParameter.append(\"cache\", String(__params.cache));\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.ProjectVersionApiFetchParamCreator = ProjectVersionApiFetchParamCreator;\n/**\n * ProjectVersionApi - functional programming interface\n * @export\n */ var ProjectVersionApiFp = function(configuration) {\n    return {\n        /**\n         * @summary Create a single ProjectVersionEntity\n         * @param {Api.ProjectVersionEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createOneBaseProjectVersionControllerProjectVersionEntity: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.ProjectVersionApiFetchParamCreator)(configuration).createOneBaseProjectVersionControllerProjectVersionEntity(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 201)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Delete a single ProjectVersionEntity\n         * @param {string} id\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ deleteOneBaseProjectVersionControllerProjectVersionEntity: function(id, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.ProjectVersionApiFetchParamCreator)(configuration).deleteOneBaseProjectVersionControllerProjectVersionEntity(id, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_h) {\n                        switch(_h.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _h.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (response.status === 200) {\n                                    return [\n                                        2 /*return*/ ,\n                                        {\n                                            status: response.status\n                                        }\n                                    ];\n                                }\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _h.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _h.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _h.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _h.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _h.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _h.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _h.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Retrieve multiple ProjectVersionEntities\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string} [s] <p>Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [filter] <p>Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [or] <p>Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [sort] <p>Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [limit] <p>Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a></p>\n         * @param {number} [offset] <p>Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a></p>\n         * @param {number} [page] <p>Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getManyBaseProjectVersionControllerProjectVersionEntity: function(__params, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.ProjectVersionApiFetchParamCreator)(configuration).getManyBaseProjectVersionControllerProjectVersionEntity(__params, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Retrieve a single ProjectVersionEntity\n         * @param {string} id\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getOneBaseProjectVersionControllerProjectVersionEntity: function(__params, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.ProjectVersionApiFetchParamCreator)(configuration).getOneBaseProjectVersionControllerProjectVersionEntity(__params, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        }\n    };\n};\nexports.ProjectVersionApiFp = ProjectVersionApiFp;\n/**\n * ProjectVersionApi - factory interface\n * @export\n */ var ProjectVersionApiFactory = function(configuration, basePath, fetch) {\n    return new ProjectVersionApi(configuration, basePath, fetch);\n};\nexports.ProjectVersionApiFactory = ProjectVersionApiFactory;\n/**\n * ProjectVersionApi - object-oriented interface\n * @export\n * @class ProjectVersionApi\n * @extends {BaseAPI}\n */ var ProjectVersionApi = /** @class */ function(_super) {\n    __extends(ProjectVersionApi, _super);\n    function ProjectVersionApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @summary Create a single ProjectVersionEntity\n     * @param {Api.ProjectVersionEntity} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ ProjectVersionApi.prototype.createOneBaseProjectVersionControllerProjectVersionEntity = function(request, options) {\n        return (0, exports.ProjectVersionApiFp)(this.configuration).createOneBaseProjectVersionControllerProjectVersionEntity(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Delete a single ProjectVersionEntity\n     * @param {string} id\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ ProjectVersionApi.prototype.deleteOneBaseProjectVersionControllerProjectVersionEntity = function(id, options) {\n        return (0, exports.ProjectVersionApiFp)(this.configuration).deleteOneBaseProjectVersionControllerProjectVersionEntity(id, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Retrieve multiple ProjectVersionEntities\n     * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n     * @param {string} [s] <p>Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [filter] <p>Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [or] <p>Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [sort] <p>Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n     * @param {number} [limit] <p>Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a></p>\n     * @param {number} [offset] <p>Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a></p>\n     * @param {number} [page] <p>Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a></p>\n     * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ ProjectVersionApi.prototype.getManyBaseProjectVersionControllerProjectVersionEntity = function(__params, options) {\n        return (0, exports.ProjectVersionApiFp)(this.configuration).getManyBaseProjectVersionControllerProjectVersionEntity(__params, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Retrieve a single ProjectVersionEntity\n     * @param {string} id\n     * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n     * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ ProjectVersionApi.prototype.getOneBaseProjectVersionControllerProjectVersionEntity = function(__params, options) {\n        return (0, exports.ProjectVersionApiFp)(this.configuration).getOneBaseProjectVersionControllerProjectVersionEntity(__params, options)(this.fetch, this.basePath);\n    };\n    return ProjectVersionApi;\n}(runtime_1.BaseAPI);\nexports.ProjectVersionApi = ProjectVersionApi;\n/**\n * QuizApi - fetch parameter creator\n * @export\n */ var QuizApiFetchParamCreator = function(configuration) {\n    return {\n        /**\n         * @summary Create multiple QuizEntities\n         * @param {Api.CreateManyQuizEntityDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createManyBaseQuizControllerQuizEntity: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling createManyBaseQuizControllerQuizEntity.\");\n            }\n            var localVarPath = \"/courses/{courseid}/quiz/bulk\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Create a single QuizEntity\n         * @param {Api.QuizEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createOneBaseQuizControllerQuizEntity: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling createOneBaseQuizControllerQuizEntity.\");\n            }\n            var localVarPath = \"/courses/{courseid}/quiz\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Delete a single QuizEntity\n         * @param {string} id\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ deleteOneBaseQuizControllerQuizEntity: function(id, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new runtime_1.RequiredError(\"id\", \"Required parameter id was null or undefined when calling deleteOneBaseQuizControllerQuizEntity.\");\n            }\n            var localVarPath = \"/courses/{courseid}/quiz/{id}\".replace(\"{id}\", encodeURIComponent(String(id)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"DELETE\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Retrieve multiple QuizEntities\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string} [s] <p>Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [filter] <p>Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [or] <p>Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [sort] <p>Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [limit] <p>Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a></p>\n         * @param {number} [offset] <p>Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a></p>\n         * @param {number} [page] <p>Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getManyBaseQuizControllerQuizEntity: function(__params, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/courses/{courseid}/quiz\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            if (__params.fields !== undefined) {\n                /* array form */ localVarQueryParameter.append(\"fields\", __params.fields.map(function(localVarArrayMapElement) {\n                    return escape(String(localVarArrayMapElement));\n                }).join(\",\"));\n            }\n            if (__params.s !== undefined) {\n                localVarQueryParameter.append(\"s\", String(__params.s));\n            }\n            if (__params.filter !== undefined) {\n                /* array form exploded */ for(var _i = 0, _a = __params.filter; _i < _a.length; _i++){\n                    var localVarArrayElement = _a[_i];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"filter\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.or !== undefined) {\n                /* array form exploded */ for(var _b = 0, _c = __params.or; _b < _c.length; _b++){\n                    var localVarArrayElement = _c[_b];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"or\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.sort !== undefined) {\n                /* array form exploded */ for(var _d = 0, _e = __params.sort; _d < _e.length; _d++){\n                    var localVarArrayElement = _e[_d];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"sort\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.join !== undefined) {\n                /* array form exploded */ for(var _f = 0, _g = __params.join; _f < _g.length; _f++){\n                    var localVarArrayElement = _g[_f];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"join\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.limit !== undefined) {\n                localVarQueryParameter.append(\"limit\", String(__params.limit));\n            }\n            if (__params.offset !== undefined) {\n                localVarQueryParameter.append(\"offset\", String(__params.offset));\n            }\n            if (__params.page !== undefined) {\n                localVarQueryParameter.append(\"page\", String(__params.page));\n            }\n            if (__params.cache !== undefined) {\n                localVarQueryParameter.append(\"cache\", String(__params.cache));\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Retrieve a single QuizEntity\n         * @param {string} id\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getOneBaseQuizControllerQuizEntity: function(__params, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'id' is not null or undefined\n            if (__params.id === null || __params.id === undefined) {\n                throw new runtime_1.RequiredError(\"id\", \"Required parameter id was null or undefined when calling getOneBaseQuizControllerQuizEntity.\");\n            }\n            var localVarPath = \"/courses/{courseid}/quiz/{id}\".replace(\"{id}\", encodeURIComponent(String(__params.id)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            if (__params.fields !== undefined) {\n                /* array form */ localVarQueryParameter.append(\"fields\", __params.fields.map(function(localVarArrayMapElement) {\n                    return escape(String(localVarArrayMapElement));\n                }).join(\",\"));\n            }\n            if (__params.join !== undefined) {\n                /* array form exploded */ for(var _i = 0, _a = __params.join; _i < _a.length; _i++){\n                    var localVarArrayElement = _a[_i];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"join\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.cache !== undefined) {\n                localVarQueryParameter.append(\"cache\", String(__params.cache));\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Replace a single QuizEntity\n         * @param {string} id\n         * @param {Api.QuizEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ replaceOneBaseQuizControllerQuizEntity: function(id, request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new runtime_1.RequiredError(\"id\", \"Required parameter id was null or undefined when calling replaceOneBaseQuizControllerQuizEntity.\");\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling replaceOneBaseQuizControllerQuizEntity.\");\n            }\n            var localVarPath = \"/courses/{courseid}/quiz/{id}\".replace(\"{id}\", encodeURIComponent(String(id)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"PUT\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Update a single QuizEntity\n         * @param {string} id\n         * @param {Api.QuizEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ updateOneBaseQuizControllerQuizEntity: function(id, request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new runtime_1.RequiredError(\"id\", \"Required parameter id was null or undefined when calling updateOneBaseQuizControllerQuizEntity.\");\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling updateOneBaseQuizControllerQuizEntity.\");\n            }\n            var localVarPath = \"/courses/{courseid}/quiz/{id}\".replace(\"{id}\", encodeURIComponent(String(id)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"PATCH\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.QuizApiFetchParamCreator = QuizApiFetchParamCreator;\n/**\n * QuizApi - functional programming interface\n * @export\n */ var QuizApiFp = function(configuration) {\n    return {\n        /**\n         * @summary Create multiple QuizEntities\n         * @param {Api.CreateManyQuizEntityDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createManyBaseQuizControllerQuizEntity: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.QuizApiFetchParamCreator)(configuration).createManyBaseQuizControllerQuizEntity(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_b) {\n                        switch(_b.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _b.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 201)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _b.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Create a single QuizEntity\n         * @param {Api.QuizEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createOneBaseQuizControllerQuizEntity: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.QuizApiFetchParamCreator)(configuration).createOneBaseQuizControllerQuizEntity(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_b) {\n                        switch(_b.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _b.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 201)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _b.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Delete a single QuizEntity\n         * @param {string} id\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ deleteOneBaseQuizControllerQuizEntity: function(id, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.QuizApiFetchParamCreator)(configuration).deleteOneBaseQuizControllerQuizEntity(id, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_a) {\n                        switch(_a.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _a.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (response.status === 200) {\n                                    return [\n                                        2 /*return*/ ,\n                                        {\n                                            status: response.status\n                                        }\n                                    ];\n                                }\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Retrieve multiple QuizEntities\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string} [s] <p>Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [filter] <p>Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [or] <p>Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [sort] <p>Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [limit] <p>Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a></p>\n         * @param {number} [offset] <p>Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a></p>\n         * @param {number} [page] <p>Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getManyBaseQuizControllerQuizEntity: function(__params, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.QuizApiFetchParamCreator)(configuration).getManyBaseQuizControllerQuizEntity(__params, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_b) {\n                        switch(_b.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _b.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _b.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Retrieve a single QuizEntity\n         * @param {string} id\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getOneBaseQuizControllerQuizEntity: function(__params, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.QuizApiFetchParamCreator)(configuration).getOneBaseQuizControllerQuizEntity(__params, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_b) {\n                        switch(_b.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _b.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _b.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Replace a single QuizEntity\n         * @param {string} id\n         * @param {Api.QuizEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ replaceOneBaseQuizControllerQuizEntity: function(id, request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.QuizApiFetchParamCreator)(configuration).replaceOneBaseQuizControllerQuizEntity(id, request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_b) {\n                        switch(_b.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _b.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _b.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Update a single QuizEntity\n         * @param {string} id\n         * @param {Api.QuizEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ updateOneBaseQuizControllerQuizEntity: function(id, request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.QuizApiFetchParamCreator)(configuration).updateOneBaseQuizControllerQuizEntity(id, request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_b) {\n                        switch(_b.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _b.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _b.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        }\n    };\n};\nexports.QuizApiFp = QuizApiFp;\n/**\n * QuizApi - factory interface\n * @export\n */ var QuizApiFactory = function(configuration, basePath, fetch) {\n    return new QuizApi(configuration, basePath, fetch);\n};\nexports.QuizApiFactory = QuizApiFactory;\n/**\n * QuizApi - object-oriented interface\n * @export\n * @class QuizApi\n * @extends {BaseAPI}\n */ var QuizApi = /** @class */ function(_super) {\n    __extends(QuizApi, _super);\n    function QuizApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @summary Create multiple QuizEntities\n     * @param {Api.CreateManyQuizEntityDto} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ QuizApi.prototype.createManyBaseQuizControllerQuizEntity = function(request, options) {\n        return (0, exports.QuizApiFp)(this.configuration).createManyBaseQuizControllerQuizEntity(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Create a single QuizEntity\n     * @param {Api.QuizEntity} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ QuizApi.prototype.createOneBaseQuizControllerQuizEntity = function(request, options) {\n        return (0, exports.QuizApiFp)(this.configuration).createOneBaseQuizControllerQuizEntity(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Delete a single QuizEntity\n     * @param {string} id\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ QuizApi.prototype.deleteOneBaseQuizControllerQuizEntity = function(id, options) {\n        return (0, exports.QuizApiFp)(this.configuration).deleteOneBaseQuizControllerQuizEntity(id, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Retrieve multiple QuizEntities\n     * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n     * @param {string} [s] <p>Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [filter] <p>Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [or] <p>Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [sort] <p>Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n     * @param {number} [limit] <p>Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a></p>\n     * @param {number} [offset] <p>Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a></p>\n     * @param {number} [page] <p>Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a></p>\n     * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ QuizApi.prototype.getManyBaseQuizControllerQuizEntity = function(__params, options) {\n        return (0, exports.QuizApiFp)(this.configuration).getManyBaseQuizControllerQuizEntity(__params, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Retrieve a single QuizEntity\n     * @param {string} id\n     * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n     * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ QuizApi.prototype.getOneBaseQuizControllerQuizEntity = function(__params, options) {\n        return (0, exports.QuizApiFp)(this.configuration).getOneBaseQuizControllerQuizEntity(__params, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Replace a single QuizEntity\n     * @param {string} id\n     * @param {Api.QuizEntity} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ QuizApi.prototype.replaceOneBaseQuizControllerQuizEntity = function(id, request, options) {\n        return (0, exports.QuizApiFp)(this.configuration).replaceOneBaseQuizControllerQuizEntity(id, request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Update a single QuizEntity\n     * @param {string} id\n     * @param {Api.QuizEntity} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ QuizApi.prototype.updateOneBaseQuizControllerQuizEntity = function(id, request, options) {\n        return (0, exports.QuizApiFp)(this.configuration).updateOneBaseQuizControllerQuizEntity(id, request, options)(this.fetch, this.basePath);\n    };\n    return QuizApi;\n}(runtime_1.BaseAPI);\nexports.QuizApi = QuizApi;\n/**\n * TicketApi - fetch parameter creator\n * @export\n */ var TicketApiFetchParamCreator = function(configuration) {\n    return {\n        /**\n         * @summary Create a single TicketEntity\n         * @param {Api.CreateTicketDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createOneBaseTicketControllerTicketEntity: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling createOneBaseTicketControllerTicketEntity.\");\n            }\n            var localVarPath = \"/tickets\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"POST\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Delete a single TicketEntity\n         * @param {string} id\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ deleteOneBaseTicketControllerTicketEntity: function(id, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new runtime_1.RequiredError(\"id\", \"Required parameter id was null or undefined when calling deleteOneBaseTicketControllerTicketEntity.\");\n            }\n            var localVarPath = \"/tickets/{id}\".replace(\"{id}\", encodeURIComponent(String(id)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"DELETE\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Retrieve multiple TicketEntities\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string} [s] <p>Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [filter] <p>Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [or] <p>Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [sort] <p>Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [limit] <p>Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a></p>\n         * @param {number} [offset] <p>Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a></p>\n         * @param {number} [page] <p>Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getManyBaseTicketControllerTicketEntity: function(__params, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/tickets\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            if (__params.fields !== undefined) {\n                /* array form */ localVarQueryParameter.append(\"fields\", __params.fields.map(function(localVarArrayMapElement) {\n                    return escape(String(localVarArrayMapElement));\n                }).join(\",\"));\n            }\n            if (__params.s !== undefined) {\n                localVarQueryParameter.append(\"s\", String(__params.s));\n            }\n            if (__params.filter !== undefined) {\n                /* array form exploded */ for(var _i = 0, _a = __params.filter; _i < _a.length; _i++){\n                    var localVarArrayElement = _a[_i];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"filter\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.or !== undefined) {\n                /* array form exploded */ for(var _b = 0, _c = __params.or; _b < _c.length; _b++){\n                    var localVarArrayElement = _c[_b];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"or\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.sort !== undefined) {\n                /* array form exploded */ for(var _d = 0, _e = __params.sort; _d < _e.length; _d++){\n                    var localVarArrayElement = _e[_d];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"sort\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.join !== undefined) {\n                /* array form exploded */ for(var _f = 0, _g = __params.join; _f < _g.length; _f++){\n                    var localVarArrayElement = _g[_f];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"join\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.limit !== undefined) {\n                localVarQueryParameter.append(\"limit\", String(__params.limit));\n            }\n            if (__params.offset !== undefined) {\n                localVarQueryParameter.append(\"offset\", String(__params.offset));\n            }\n            if (__params.page !== undefined) {\n                localVarQueryParameter.append(\"page\", String(__params.page));\n            }\n            if (__params.cache !== undefined) {\n                localVarQueryParameter.append(\"cache\", String(__params.cache));\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Retrieve a single TicketEntity\n         * @param {string} id\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getOneBaseTicketControllerTicketEntity: function(__params, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'id' is not null or undefined\n            if (__params.id === null || __params.id === undefined) {\n                throw new runtime_1.RequiredError(\"id\", \"Required parameter id was null or undefined when calling getOneBaseTicketControllerTicketEntity.\");\n            }\n            var localVarPath = \"/tickets/{id}\".replace(\"{id}\", encodeURIComponent(String(__params.id)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            if (__params.fields !== undefined) {\n                /* array form */ localVarQueryParameter.append(\"fields\", __params.fields.map(function(localVarArrayMapElement) {\n                    return escape(String(localVarArrayMapElement));\n                }).join(\",\"));\n            }\n            if (__params.join !== undefined) {\n                /* array form exploded */ for(var _i = 0, _a = __params.join; _i < _a.length; _i++){\n                    var localVarArrayElement = _a[_i];\n                    if (localVarArrayElement !== undefined) {\n                        localVarQueryParameter.append(\"join\", localVarArrayElement !== null ? String(localVarArrayElement) : \"\");\n                    }\n                }\n            }\n            if (__params.cache !== undefined) {\n                localVarQueryParameter.append(\"cache\", String(__params.cache));\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @summary Update a single TicketEntity\n         * @param {string} id\n         * @param {Api.TicketEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ updateOneBaseTicketControllerTicketEntity: function(id, request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new runtime_1.RequiredError(\"id\", \"Required parameter id was null or undefined when calling updateOneBaseTicketControllerTicketEntity.\");\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling updateOneBaseTicketControllerTicketEntity.\");\n            }\n            var localVarPath = \"/tickets/{id}\".replace(\"{id}\", encodeURIComponent(String(id)));\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"PATCH\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.TicketApiFetchParamCreator = TicketApiFetchParamCreator;\n/**\n * TicketApi - functional programming interface\n * @export\n */ var TicketApiFp = function(configuration) {\n    return {\n        /**\n         * @summary Create a single TicketEntity\n         * @param {Api.CreateTicketDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createOneBaseTicketControllerTicketEntity: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.TicketApiFetchParamCreator)(configuration).createOneBaseTicketControllerTicketEntity(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 201)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Delete a single TicketEntity\n         * @param {string} id\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ deleteOneBaseTicketControllerTicketEntity: function(id, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.TicketApiFetchParamCreator)(configuration).deleteOneBaseTicketControllerTicketEntity(id, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_h) {\n                        switch(_h.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _h.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (response.status === 200) {\n                                    return [\n                                        2 /*return*/ ,\n                                        {\n                                            status: response.status\n                                        }\n                                    ];\n                                }\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _h.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _h.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _h.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _h.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _h.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _h.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _h.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Retrieve multiple TicketEntities\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string} [s] <p>Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [filter] <p>Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [or] <p>Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [sort] <p>Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [limit] <p>Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a></p>\n         * @param {number} [offset] <p>Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a></p>\n         * @param {number} [page] <p>Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getManyBaseTicketControllerTicketEntity: function(__params, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.TicketApiFetchParamCreator)(configuration).getManyBaseTicketControllerTicketEntity(__params, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Retrieve a single TicketEntity\n         * @param {string} id\n         * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n         * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n         * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ getOneBaseTicketControllerTicketEntity: function(__params, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.TicketApiFetchParamCreator)(configuration).getOneBaseTicketControllerTicketEntity(__params, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @summary Update a single TicketEntity\n         * @param {string} id\n         * @param {Api.TicketEntity} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ updateOneBaseTicketControllerTicketEntity: function(id, request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.TicketApiFetchParamCreator)(configuration).updateOneBaseTicketControllerTicketEntity(id, request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 200)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    25\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                            case 25:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        }\n    };\n};\nexports.TicketApiFp = TicketApiFp;\n/**\n * TicketApi - factory interface\n * @export\n */ var TicketApiFactory = function(configuration, basePath, fetch) {\n    return new TicketApi(configuration, basePath, fetch);\n};\nexports.TicketApiFactory = TicketApiFactory;\n/**\n * TicketApi - object-oriented interface\n * @export\n * @class TicketApi\n * @extends {BaseAPI}\n */ var TicketApi = /** @class */ function(_super) {\n    __extends(TicketApi, _super);\n    function TicketApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @summary Create a single TicketEntity\n     * @param {Api.CreateTicketDto} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ TicketApi.prototype.createOneBaseTicketControllerTicketEntity = function(request, options) {\n        return (0, exports.TicketApiFp)(this.configuration).createOneBaseTicketControllerTicketEntity(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Delete a single TicketEntity\n     * @param {string} id\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ TicketApi.prototype.deleteOneBaseTicketControllerTicketEntity = function(id, options) {\n        return (0, exports.TicketApiFp)(this.configuration).deleteOneBaseTicketControllerTicketEntity(id, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Retrieve multiple TicketEntities\n     * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n     * @param {string} [s] <p>Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [filter] <p>Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [or] <p>Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [sort] <p>Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n     * @param {number} [limit] <p>Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a></p>\n     * @param {number} [offset] <p>Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a></p>\n     * @param {number} [page] <p>Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a></p>\n     * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ TicketApi.prototype.getManyBaseTicketControllerTicketEntity = function(__params, options) {\n        return (0, exports.TicketApiFp)(this.configuration).getManyBaseTicketControllerTicketEntity(__params, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Retrieve a single TicketEntity\n     * @param {string} id\n     * @param {string[]} [fields] <p>Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a></p>\n     * @param {string[]} [join] <p>Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a></p>\n     * @param {number} [cache] <p>Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a></p>\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ TicketApi.prototype.getOneBaseTicketControllerTicketEntity = function(__params, options) {\n        return (0, exports.TicketApiFp)(this.configuration).getOneBaseTicketControllerTicketEntity(__params, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @summary Update a single TicketEntity\n     * @param {string} id\n     * @param {Api.TicketEntity} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ TicketApi.prototype.updateOneBaseTicketControllerTicketEntity = function(id, request, options) {\n        return (0, exports.TicketApiFp)(this.configuration).updateOneBaseTicketControllerTicketEntity(id, request, options)(this.fetch, this.basePath);\n    };\n    return TicketApi;\n}(runtime_1.BaseAPI);\nexports.TicketApi = TicketApi;\n/**\n * UsersApi - fetch parameter creator\n * @export\n */ var UsersApiFetchParamCreator = function(configuration) {\n    return {\n        /**\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ userControllerMe: function(options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/users/me\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ userProfileControllerGet: function(options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/user-profile/me\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"GET\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {Api.UpdateUserProfileDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ userProfileControllerUpdate: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            // verify required parameter 'request' is not null or undefined\n            if (request === null || request === undefined) {\n                throw new runtime_1.RequiredError(\"request\", \"Required parameter request was null or undefined when calling userProfileControllerUpdate.\");\n            }\n            var localVarPath = \"/user-profile/me\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"PATCH\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                localVarRequestOptions.body = JSON.stringify(request || {});\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * @param {Api.UserProfileControllerUpdateProfilePictureRequest.MultipartFormData} [request]\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ userProfileControllerUpdateProfilePicture: function(request, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var localVarPath = \"/user-profile/profile-picture\";\n            var localVarPathQueryStart = localVarPath.indexOf(\"?\");\n            var localVarRequestOptions = Object.assign({\n                method: \"PATCH\"\n            }, options);\n            var localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();\n            var localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n            if (localVarPathQueryStart !== -1) {\n                localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n            }\n            // authentication bearer required\n            // http authorization required\n            if (configuration && configuration.authorization) {\n                var localVarAuthorizationValue = typeof configuration.authorization === \"function\" ? configuration.authorization(\"bearer\") : configuration.authorization;\n                if (localVarAuthorizationValue !== null) {\n                    localVarHeaderParameter.set(\"Authorization\", \"Bearer \" + localVarAuthorizationValue);\n                }\n            }\n            localVarHeaderParameter.set(\"Content-Type\", \"multipart/form-data\");\n            localVarRequestOptions.headers = localVarHeaderParameter;\n            if (request !== undefined) {\n                var localVarFormData = new FormData();\n                if (request.profilePicture !== undefined) {\n                    localVarFormData.append(\"profilePicture\", request.profilePicture.value);\n                }\n                localVarRequestOptions.body = localVarFormData;\n            }\n            var localVarQueryParameterString = localVarQueryParameter.toString();\n            if (localVarQueryParameterString) {\n                localVarPath += \"?\" + localVarQueryParameterString;\n            }\n            return {\n                url: localVarPath,\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.UsersApiFetchParamCreator = UsersApiFetchParamCreator;\n/**\n * UsersApi - functional programming interface\n * @export\n */ var UsersApiFp = function(configuration) {\n    return {\n        /**\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ userControllerMe: function(options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.UsersApiFetchParamCreator)(configuration).userControllerMe(options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ userProfileControllerGet: function(options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.UsersApiFetchParamCreator)(configuration).userProfileControllerGet(options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {Api.UpdateUserProfileDto} request\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ userProfileControllerUpdate: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.UsersApiFetchParamCreator)(configuration).userProfileControllerUpdate(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        },\n        /**\n         * @param {Api.UserProfileControllerUpdateProfilePictureRequest.MultipartFormData} [request]\n         * @param {RequestInit} [options] Override http request option.\n         * @throws {RequiredError}\n         */ userProfileControllerUpdateProfilePicture: function(request, options) {\n            var _this = this;\n            var localVarFetchArgs = (0, exports.UsersApiFetchParamCreator)(configuration).userProfileControllerUpdateProfilePicture(request, options);\n            return function() {\n                var args_1 = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args_1[_i] = arguments[_i];\n                }\n                return __awaiter(_this, __spreadArray([], args_1, true), void 0, function(fetch, basePath) {\n                    var response, contentType, mimeType;\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (fetch === void 0) {\n                        fetch = runtime_1.defaultFetch;\n                    }\n                    if (basePath === void 0) {\n                        basePath = runtime_1.BASE_PATH;\n                    }\n                    return __generator(this, function(_j) {\n                        switch(_j.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n                                ];\n                            case 1:\n                                response = _j.sent();\n                                contentType = response.headers.get(\"Content-Type\");\n                                mimeType = contentType ? contentType.replace(/;.*/, \"\") : undefined;\n                                if (!(response.status === 400)) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                _a = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 2:\n                                return [\n                                    2 /*return*/ ,\n                                    (_a.body = _j.sent(), _a)\n                                ];\n                            case 3:\n                                throw response;\n                            case 4:\n                                if (!(response.status === 401)) return [\n                                    3 /*break*/ ,\n                                    7\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                _b = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 5:\n                                return [\n                                    2 /*return*/ ,\n                                    (_b.body = _j.sent(), _b)\n                                ];\n                            case 6:\n                                throw response;\n                            case 7:\n                                if (!(response.status === 403)) return [\n                                    3 /*break*/ ,\n                                    10\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    9\n                                ];\n                                _c = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 8:\n                                return [\n                                    2 /*return*/ ,\n                                    (_c.body = _j.sent(), _c)\n                                ];\n                            case 9:\n                                throw response;\n                            case 10:\n                                if (!(response.status === 404)) return [\n                                    3 /*break*/ ,\n                                    13\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    12\n                                ];\n                                _d = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 11:\n                                return [\n                                    2 /*return*/ ,\n                                    (_d.body = _j.sent(), _d)\n                                ];\n                            case 12:\n                                throw response;\n                            case 13:\n                                if (!(response.status === 409)) return [\n                                    3 /*break*/ ,\n                                    16\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    15\n                                ];\n                                _e = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 14:\n                                return [\n                                    2 /*return*/ ,\n                                    (_e.body = _j.sent(), _e)\n                                ];\n                            case 15:\n                                throw response;\n                            case 16:\n                                if (!(response.status === 422)) return [\n                                    3 /*break*/ ,\n                                    19\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    18\n                                ];\n                                _f = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 17:\n                                return [\n                                    2 /*return*/ ,\n                                    (_f.body = _j.sent(), _f)\n                                ];\n                            case 18:\n                                throw response;\n                            case 19:\n                                if (!(response.status === 500)) return [\n                                    3 /*break*/ ,\n                                    22\n                                ];\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    21\n                                ];\n                                _g = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 20:\n                                return [\n                                    2 /*return*/ ,\n                                    (_g.body = _j.sent(), _g)\n                                ];\n                            case 21:\n                                throw response;\n                            case 22:\n                                if (!(mimeType === \"application/json\")) return [\n                                    3 /*break*/ ,\n                                    24\n                                ];\n                                _h = {\n                                    status: response.status,\n                                    contentType: \"application/json\"\n                                };\n                                return [\n                                    4 /*yield*/ ,\n                                    response.json()\n                                ];\n                            case 23:\n                                return [\n                                    2 /*return*/ ,\n                                    (_h.body = _j.sent(), _h)\n                                ];\n                            case 24:\n                                throw response;\n                        }\n                    });\n                });\n            };\n        }\n    };\n};\nexports.UsersApiFp = UsersApiFp;\n/**\n * UsersApi - factory interface\n * @export\n */ var UsersApiFactory = function(configuration, basePath, fetch) {\n    return new UsersApi(configuration, basePath, fetch);\n};\nexports.UsersApiFactory = UsersApiFactory;\n/**\n * UsersApi - object-oriented interface\n * @export\n * @class UsersApi\n * @extends {BaseAPI}\n */ var UsersApi = /** @class */ function(_super) {\n    __extends(UsersApi, _super);\n    function UsersApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ UsersApi.prototype.userControllerMe = function(options) {\n        return (0, exports.UsersApiFp)(this.configuration).userControllerMe(options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ UsersApi.prototype.userProfileControllerGet = function(options) {\n        return (0, exports.UsersApiFp)(this.configuration).userProfileControllerGet(options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {Api.UpdateUserProfileDto} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ UsersApi.prototype.userProfileControllerUpdate = function(request, options) {\n        return (0, exports.UsersApiFp)(this.configuration).userProfileControllerUpdate(request, options)(this.fetch, this.basePath);\n    };\n    /**\n     * @param {Api.UserProfileControllerUpdateProfilePictureRequest.MultipartFormData} [request]\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */ UsersApi.prototype.userProfileControllerUpdateProfilePicture = function(request, options) {\n        return (0, exports.UsersApiFp)(this.configuration).userProfileControllerUpdateProfilePicture(request, options)(this.fetch, this.basePath);\n    };\n    return UsersApi;\n}(runtime_1.BaseAPI);\nexports.UsersApi = UsersApi;\n/**\n * We sometimes represent dates as strings (in models) and as Dates (in parameters) so this\n * function converts them both to a string.\n */ function dateToString(value) {\n    if (value instanceof Date) {\n        return value.toISOString();\n    } else if (typeof value === \"string\") {\n        return value;\n    } else {\n        return undefined;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../packages/apiclient/dist/api.js\n");

/***/ }),

/***/ "(rsc)/../../packages/apiclient/dist/configuration.js":
/*!******************************************************!*\
  !*** ../../packages/apiclient/dist/configuration.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/* eslint-disable */ // tslint:disable\n/**\n * gameguild.gg\n *\n *\n * OpenAPI spec version: 1.0.0\n * Contact:\n *\n * NOTE: This class is auto generated by OpenAPI Generator+.\n * https://github.com/karlvr/openapi-generator-plus\n * Do not edit the class manually.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Configuration = void 0;\nvar Configuration = /** @class */ function() {\n    function Configuration(param) {\n        if (param === void 0) {\n            param = {};\n        }\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.authorization = param.authorization;\n        this.basePath = param.basePath;\n    }\n    return Configuration;\n}();\nexports.Configuration = Configuration;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvYXBpY2xpZW50L2Rpc3QvY29uZmlndXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLGtCQUFrQixHQUNsQixpQkFBaUI7QUFDakI7Ozs7Ozs7Ozs7Q0FVQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQscUJBQXFCLEdBQUcsS0FBSztBQUM3QixJQUFJRSxnQkFBZ0IsV0FBVyxHQUFJO0lBQy9CLFNBQVNBLGNBQWNDLEtBQUs7UUFDeEIsSUFBSUEsVUFBVSxLQUFLLEdBQUc7WUFBRUEsUUFBUSxDQUFDO1FBQUc7UUFDcEMsSUFBSSxDQUFDQyxNQUFNLEdBQUdELE1BQU1DLE1BQU07UUFDMUIsSUFBSSxDQUFDQyxRQUFRLEdBQUdGLE1BQU1FLFFBQVE7UUFDOUIsSUFBSSxDQUFDQyxRQUFRLEdBQUdILE1BQU1HLFFBQVE7UUFDOUIsSUFBSSxDQUFDQyxhQUFhLEdBQUdKLE1BQU1JLGFBQWE7UUFDeEMsSUFBSSxDQUFDQyxRQUFRLEdBQUdMLE1BQU1LLFFBQVE7SUFDbEM7SUFDQSxPQUFPTjtBQUNYO0FBQ0FGLHFCQUFxQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL0BnYW1lZGV2LWd1aWxkL3dlYi8uLi8uLi9wYWNrYWdlcy9hcGljbGllbnQvZGlzdC9jb25maWd1cmF0aW9uLmpzPzY2ZjgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gdHNsaW50OmRpc2FibGVcbi8qKlxuICogZ2FtZWd1aWxkLmdnXG4gKlxuICpcbiAqIE9wZW5BUEkgc3BlYyB2ZXJzaW9uOiAxLjAuMFxuICogQ29udGFjdDpcbiAqXG4gKiBOT1RFOiBUaGlzIGNsYXNzIGlzIGF1dG8gZ2VuZXJhdGVkIGJ5IE9wZW5BUEkgR2VuZXJhdG9yKy5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9rYXJsdnIvb3BlbmFwaS1nZW5lcmF0b3ItcGx1c1xuICogRG8gbm90IGVkaXQgdGhlIGNsYXNzIG1hbnVhbGx5LlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbmZpZ3VyYXRpb24gPSB2b2lkIDA7XG52YXIgQ29uZmlndXJhdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb25maWd1cmF0aW9uKHBhcmFtKSB7XG4gICAgICAgIGlmIChwYXJhbSA9PT0gdm9pZCAwKSB7IHBhcmFtID0ge307IH1cbiAgICAgICAgdGhpcy5hcGlLZXkgPSBwYXJhbS5hcGlLZXk7XG4gICAgICAgIHRoaXMudXNlcm5hbWUgPSBwYXJhbS51c2VybmFtZTtcbiAgICAgICAgdGhpcy5wYXNzd29yZCA9IHBhcmFtLnBhc3N3b3JkO1xuICAgICAgICB0aGlzLmF1dGhvcml6YXRpb24gPSBwYXJhbS5hdXRob3JpemF0aW9uO1xuICAgICAgICB0aGlzLmJhc2VQYXRoID0gcGFyYW0uYmFzZVBhdGg7XG4gICAgfVxuICAgIHJldHVybiBDb25maWd1cmF0aW9uO1xufSgpKTtcbmV4cG9ydHMuQ29uZmlndXJhdGlvbiA9IENvbmZpZ3VyYXRpb247XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJDb25maWd1cmF0aW9uIiwicGFyYW0iLCJhcGlLZXkiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiYXV0aG9yaXphdGlvbiIsImJhc2VQYXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../packages/apiclient/dist/configuration.js\n");

/***/ }),

/***/ "(rsc)/../../packages/apiclient/dist/index.js":
/*!**********************************************!*\
  !*** ../../packages/apiclient/dist/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* eslint-disable */ // tslint:disable\n/**\n * gameguild.gg\n *\n *\n * OpenAPI spec version: 1.0.0\n * Contact:\n *\n * NOTE: This class is auto generated by OpenAPI Generator+.\n * https://github.com/karlvr/openapi-generator-plus\n * Do not edit the class manually.\n */ var __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.RequiredError = void 0;\n__exportStar(__webpack_require__(/*! ./api */ \"(rsc)/../../packages/apiclient/dist/api.js\"), exports);\n__exportStar(__webpack_require__(/*! ./models */ \"(rsc)/../../packages/apiclient/dist/models.js\"), exports);\n__exportStar(__webpack_require__(/*! ./configuration */ \"(rsc)/../../packages/apiclient/dist/configuration.js\"), exports);\nvar runtime_1 = __webpack_require__(/*! ./runtime */ \"(rsc)/../../packages/apiclient/dist/runtime.js\");\nObject.defineProperty(exports, \"RequiredError\", ({\n    enumerable: true,\n    get: function() {\n        return runtime_1.RequiredError;\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvYXBpY2xpZW50L2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixrQkFBa0IsR0FDbEIsaUJBQWlCO0FBQ2pCOzs7Ozs7Ozs7O0NBVUMsR0FDRCxJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQU1DLENBQUFBLE9BQU9DLE1BQU0sR0FBSSxTQUFTQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQzFGLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCLElBQUlHLE9BQU9QLE9BQU9RLHdCQUF3QixDQUFDTCxHQUFHQztJQUM5QyxJQUFJLENBQUNHLFFBQVMsVUFBU0EsT0FBTyxDQUFDSixFQUFFTSxVQUFVLEdBQUdGLEtBQUtHLFFBQVEsSUFBSUgsS0FBS0ksWUFBWSxHQUFHO1FBQ2pGSixPQUFPO1lBQUVLLFlBQVk7WUFBTUMsS0FBSztnQkFBYSxPQUFPVixDQUFDLENBQUNDLEVBQUU7WUFBRTtRQUFFO0lBQzlEO0lBQ0FKLE9BQU9jLGNBQWMsQ0FBQ1osR0FBR0csSUFBSUU7QUFDakMsSUFBTSxTQUFTTCxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQ3RCLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCRixDQUFDLENBQUNHLEdBQUcsR0FBR0YsQ0FBQyxDQUFDQyxFQUFFO0FBQ2hCLENBQUM7QUFDRCxJQUFJVyxlQUFlLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsWUFBWSxJQUFLLFNBQVNaLENBQUMsRUFBRWEsUUFBTztJQUNqRSxJQUFLLElBQUlDLEtBQUtkLEVBQUcsSUFBSWMsTUFBTSxhQUFhLENBQUNqQixPQUFPa0IsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0osVUFBU0MsSUFBSWxCLGdCQUFnQmlCLFVBQVNiLEdBQUdjO0FBQzNIO0FBQ0FqQiw4Q0FBNkM7SUFBRXFCLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RMLHFCQUFxQixHQUFHLEtBQUs7QUFDN0JELGFBQWFRLG1CQUFPQSxDQUFDLHlEQUFPLEdBQUdQO0FBQy9CRCxhQUFhUSxtQkFBT0EsQ0FBQywrREFBVSxHQUFHUDtBQUNsQ0QsYUFBYVEsbUJBQU9BLENBQUMsNkVBQWlCLEdBQUdQO0FBQ3pDLElBQUlRLFlBQVlELG1CQUFPQSxDQUFDLGlFQUFXO0FBQ25DdkIsaURBQWdEO0lBQUVZLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9XLFVBQVVGLGFBQWE7SUFBRTtBQUFFLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BnYW1lZGV2LWd1aWxkL3dlYi8uLi8uLi9wYWNrYWdlcy9hcGljbGllbnQvZGlzdC9pbmRleC5qcz8yNDI0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIHRzbGludDpkaXNhYmxlXG4vKipcbiAqIGdhbWVndWlsZC5nZ1xuICpcbiAqXG4gKiBPcGVuQVBJIHNwZWMgdmVyc2lvbjogMS4wLjBcbiAqIENvbnRhY3Q6XG4gKlxuICogTk9URTogVGhpcyBjbGFzcyBpcyBhdXRvIGdlbmVyYXRlZCBieSBPcGVuQVBJIEdlbmVyYXRvcisuXG4gKiBodHRwczovL2dpdGh1Yi5jb20va2FybHZyL29wZW5hcGktZ2VuZXJhdG9yLXBsdXNcbiAqIERvIG5vdCBlZGl0IHRoZSBjbGFzcyBtYW51YWxseS5cbiAqL1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlcXVpcmVkRXJyb3IgPSB2b2lkIDA7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYXBpXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9tb2RlbHNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbmZpZ3VyYXRpb25cIiksIGV4cG9ydHMpO1xudmFyIHJ1bnRpbWVfMSA9IHJlcXVpcmUoXCIuL3J1bnRpbWVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXF1aXJlZEVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBydW50aW1lXzEuUmVxdWlyZWRFcnJvcjsgfSB9KTtcbiJdLCJuYW1lcyI6WyJfX2NyZWF0ZUJpbmRpbmciLCJPYmplY3QiLCJjcmVhdGUiLCJvIiwibSIsImsiLCJrMiIsInVuZGVmaW5lZCIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2VzTW9kdWxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2V4cG9ydFN0YXIiLCJleHBvcnRzIiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInZhbHVlIiwiUmVxdWlyZWRFcnJvciIsInJlcXVpcmUiLCJydW50aW1lXzEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../packages/apiclient/dist/index.js\n");

/***/ }),

/***/ "(rsc)/../../packages/apiclient/dist/models.js":
/*!***********************************************!*\
  !*** ../../packages/apiclient/dist/models.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/* eslint-disable */ // tslint:disable\n/**\n * gameguild.gg\n *\n *\n * OpenAPI spec version: 1.0.0\n * Contact:\n *\n * NOTE: This class is auto generated by OpenAPI Generator+.\n * https://github.com/karlvr/openapi-generator-plus\n * Do not edit the class manually.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Api = void 0;\nvar Api;\n(function(Api) {\n    /**\n     * @export\n     * @namespace ChapterEntity\n     */ var ChapterEntity;\n    (function(ChapterEntity) {\n        var Visibility;\n        (function(Visibility) {\n            var Enum;\n            (function(Enum) {\n                Enum[\"DRAFT\"] = \"DRAFT\";\n                Enum[\"PUBLISHED\"] = \"PUBLISHED\";\n                Enum[\"FUTURE\"] = \"FUTURE\";\n                Enum[\"PENDING\"] = \"PENDING\";\n                Enum[\"PRIVATE\"] = \"PRIVATE\";\n                Enum[\"TRASH\"] = \"TRASH\";\n            })(Enum = Visibility.Enum || (Visibility.Enum = {}));\n        })(Visibility = ChapterEntity.Visibility || (ChapterEntity.Visibility = {}));\n    })(ChapterEntity = Api.ChapterEntity || (Api.ChapterEntity = {}));\n    /**\n     * @export\n     * @namespace ChessMatchResultDto\n     */ var ChessMatchResultDto;\n    (function(ChessMatchResultDto) {\n        var Result;\n        (function(Result) {\n            var Enum;\n            (function(Enum) {\n                Enum[\"GAMEOVER\"] = \"GAME_OVER\";\n                Enum[\"DRAW\"] = \"DRAW\";\n                Enum[\"NONE\"] = \"NONE\";\n            })(Enum = Result.Enum || (Result.Enum = {}));\n        })(Result = ChessMatchResultDto.Result || (ChessMatchResultDto.Result = {}));\n        var Reason;\n        (function(Reason) {\n            var Enum;\n            (function(Enum) {\n                Enum[\"CHECKMATE\"] = \"CHECKMATE\";\n                Enum[\"STALEMATE\"] = \"STALEMATE\";\n                Enum[\"INSUFFICIENTMATERIAL\"] = \"INSUFFICIENT_MATERIAL\";\n                Enum[\"FIFTYMOVERULE\"] = \"FIFTY_MOVE_RULE\";\n                Enum[\"THREEFOLDREPETITION\"] = \"THREEFOLD_REPETITION\";\n                Enum[\"INVALIDMOVE\"] = \"INVALID_MOVE\";\n                Enum[\"NONE\"] = \"NONE\";\n            })(Enum = Reason.Enum || (Reason.Enum = {}));\n        })(Reason = ChessMatchResultDto.Reason || (ChessMatchResultDto.Reason = {}));\n    })(ChessMatchResultDto = Api.ChessMatchResultDto || (Api.ChessMatchResultDto = {}));\n    /**\n     * @export\n     * @namespace CompetitionMatchEntity\n     */ var CompetitionMatchEntity;\n    (function(CompetitionMatchEntity) {\n        var Winner;\n        (function(Winner) {\n            var Enum;\n            (function(Enum) {\n                Enum[\"Player1\"] = \"Player1\";\n                Enum[\"Player2\"] = \"Player2\";\n            })(Enum = Winner.Enum || (Winner.Enum = {}));\n        })(Winner = CompetitionMatchEntity.Winner || (CompetitionMatchEntity.Winner = {}));\n    })(CompetitionMatchEntity = Api.CompetitionMatchEntity || (Api.CompetitionMatchEntity = {}));\n    /**\n     * @export\n     * @namespace CompetitionRunEntity\n     */ var CompetitionRunEntity;\n    (function(CompetitionRunEntity) {\n        var State;\n        (function(State) {\n            var Enum;\n            (function(Enum) {\n                Enum[\"NOTSTARTED\"] = \"NOT_STARTED\";\n                Enum[\"RUNNING\"] = \"RUNNING\";\n                Enum[\"FINISHED\"] = \"FINISHED\";\n                Enum[\"FAILED\"] = \"FAILED\";\n            })(Enum = State.Enum || (State.Enum = {}));\n        })(State = CompetitionRunEntity.State || (CompetitionRunEntity.State = {}));\n    })(CompetitionRunEntity = Api.CompetitionRunEntity || (Api.CompetitionRunEntity = {}));\n    /**\n     * @export\n     * @namespace CourseEntity\n     */ var CourseEntity;\n    (function(CourseEntity) {\n        var Visibility;\n        (function(Visibility) {\n            var Enum;\n            (function(Enum) {\n                Enum[\"DRAFT\"] = \"DRAFT\";\n                Enum[\"PUBLISHED\"] = \"PUBLISHED\";\n                Enum[\"FUTURE\"] = \"FUTURE\";\n                Enum[\"PENDING\"] = \"PENDING\";\n                Enum[\"PRIVATE\"] = \"PRIVATE\";\n                Enum[\"TRASH\"] = \"TRASH\";\n            })(Enum = Visibility.Enum || (Visibility.Enum = {}));\n        })(Visibility = CourseEntity.Visibility || (CourseEntity.Visibility = {}));\n    })(CourseEntity = Api.CourseEntity || (Api.CourseEntity = {}));\n    /**\n     * @export\n     * @namespace CreateProjectDto\n     */ var CreateProjectDto;\n    (function(CreateProjectDto) {\n        var Visibility;\n        (function(Visibility) {\n            var Enum;\n            (function(Enum) {\n                Enum[\"DRAFT\"] = \"DRAFT\";\n                Enum[\"PUBLISHED\"] = \"PUBLISHED\";\n                Enum[\"FUTURE\"] = \"FUTURE\";\n                Enum[\"PENDING\"] = \"PENDING\";\n                Enum[\"PRIVATE\"] = \"PRIVATE\";\n                Enum[\"TRASH\"] = \"TRASH\";\n            })(Enum = Visibility.Enum || (Visibility.Enum = {}));\n        })(Visibility = CreateProjectDto.Visibility || (CreateProjectDto.Visibility = {}));\n    })(CreateProjectDto = Api.CreateProjectDto || (Api.CreateProjectDto = {}));\n    /**\n     * @export\n     * @namespace FormLongAnswerDto\n     */ var FormLongAnswerDto;\n    (function(FormLongAnswerDto) {\n        var Type;\n        (function(Type) {\n            var Enum;\n            (function(Enum) {\n                Enum[\"MULTIPLECHOICE\"] = \"MULTIPLE_CHOICE\";\n                Enum[\"TRUEFALSE\"] = \"TRUE_FALSE\";\n                Enum[\"MULTIPLETRUEFALSE\"] = \"MULTIPLE_TRUE_FALSE\";\n                Enum[\"SHORTANSWER\"] = \"SHORT_ANSWER\";\n                Enum[\"LONGANSWER\"] = \"LONG_ANSWER\";\n                Enum[\"FILLINTHEBLANK\"] = \"FILL_IN_THE_BLANK\";\n                Enum[\"FILLINTHEBLANKDROPDOWN\"] = \"FILL_IN_THE_BLANK_DROPDOWN\";\n                Enum[\"FILLINMULTIPLEBLANKSDROPDOWN\"] = \"FILL_IN_MULTIPLE_BLANKS_DROPDOWN\";\n                Enum[\"FILLINMULTIPLEBLANKTEXT\"] = \"FILL_IN_MULTIPLE_BLANK_TEXT\";\n                Enum[\"MATCHING\"] = \"MATCHING\";\n                Enum[\"NUMERICAL\"] = \"NUMERICAL\";\n                Enum[\"FORMULA\"] = \"FORMULA\";\n                Enum[\"ESSAY\"] = \"ESSAY\";\n                Enum[\"FILEUPLOAD\"] = \"FILE_UPLOAD\";\n                Enum[\"TEXTNOQUESTION\"] = \"TEXT_NO_QUESTION\";\n                Enum[\"ORDERING\"] = \"ORDERING\";\n                Enum[\"CODE\"] = \"CODE\";\n            })(Enum = Type.Enum || (Type.Enum = {}));\n        })(Type = FormLongAnswerDto.Type || (FormLongAnswerDto.Type = {}));\n    })(FormLongAnswerDto = Api.FormLongAnswerDto || (Api.FormLongAnswerDto = {}));\n    /**\n     * @export\n     * @namespace FormShortAnswerDto\n     */ var FormShortAnswerDto;\n    (function(FormShortAnswerDto) {\n        var Type;\n        (function(Type) {\n            var Enum;\n            (function(Enum) {\n                Enum[\"MULTIPLECHOICE\"] = \"MULTIPLE_CHOICE\";\n                Enum[\"TRUEFALSE\"] = \"TRUE_FALSE\";\n                Enum[\"MULTIPLETRUEFALSE\"] = \"MULTIPLE_TRUE_FALSE\";\n                Enum[\"SHORTANSWER\"] = \"SHORT_ANSWER\";\n                Enum[\"LONGANSWER\"] = \"LONG_ANSWER\";\n                Enum[\"FILLINTHEBLANK\"] = \"FILL_IN_THE_BLANK\";\n                Enum[\"FILLINTHEBLANKDROPDOWN\"] = \"FILL_IN_THE_BLANK_DROPDOWN\";\n                Enum[\"FILLINMULTIPLEBLANKSDROPDOWN\"] = \"FILL_IN_MULTIPLE_BLANKS_DROPDOWN\";\n                Enum[\"FILLINMULTIPLEBLANKTEXT\"] = \"FILL_IN_MULTIPLE_BLANK_TEXT\";\n                Enum[\"MATCHING\"] = \"MATCHING\";\n                Enum[\"NUMERICAL\"] = \"NUMERICAL\";\n                Enum[\"FORMULA\"] = \"FORMULA\";\n                Enum[\"ESSAY\"] = \"ESSAY\";\n                Enum[\"FILEUPLOAD\"] = \"FILE_UPLOAD\";\n                Enum[\"TEXTNOQUESTION\"] = \"TEXT_NO_QUESTION\";\n                Enum[\"ORDERING\"] = \"ORDERING\";\n                Enum[\"CODE\"] = \"CODE\";\n            })(Enum = Type.Enum || (Type.Enum = {}));\n        })(Type = FormShortAnswerDto.Type || (FormShortAnswerDto.Type = {}));\n    })(FormShortAnswerDto = Api.FormShortAnswerDto || (Api.FormShortAnswerDto = {}));\n    /**\n     * @export\n     * @namespace JobPostCreateDto\n     */ var JobPostCreateDto;\n    (function(JobPostCreateDto) {\n        var Visibility;\n        (function(Visibility) {\n            var Enum;\n            (function(Enum) {\n                Enum[\"DRAFT\"] = \"DRAFT\";\n                Enum[\"PUBLISHED\"] = \"PUBLISHED\";\n                Enum[\"FUTURE\"] = \"FUTURE\";\n                Enum[\"PENDING\"] = \"PENDING\";\n                Enum[\"PRIVATE\"] = \"PRIVATE\";\n                Enum[\"TRASH\"] = \"TRASH\";\n            })(Enum = Visibility.Enum || (Visibility.Enum = {}));\n        })(Visibility = JobPostCreateDto.Visibility || (JobPostCreateDto.Visibility = {}));\n        var JobType;\n        (function(JobType) {\n            var Enum;\n            (function(Enum) {\n                Enum[\"CONTINUOUS\"] = \"CONTINUOUS\";\n                Enum[\"TASK\"] = \"TASK\";\n            })(Enum = JobType.Enum || (JobType.Enum = {}));\n        })(JobType = JobPostCreateDto.JobType || (JobPostCreateDto.JobType = {}));\n    })(JobPostCreateDto = Api.JobPostCreateDto || (Api.JobPostCreateDto = {}));\n    /**\n     * @export\n     * @namespace JobPostEntity\n     */ var JobPostEntity;\n    (function(JobPostEntity) {\n        var Visibility;\n        (function(Visibility) {\n            var Enum;\n            (function(Enum) {\n                Enum[\"DRAFT\"] = \"DRAFT\";\n                Enum[\"PUBLISHED\"] = \"PUBLISHED\";\n                Enum[\"FUTURE\"] = \"FUTURE\";\n                Enum[\"PENDING\"] = \"PENDING\";\n                Enum[\"PRIVATE\"] = \"PRIVATE\";\n                Enum[\"TRASH\"] = \"TRASH\";\n            })(Enum = Visibility.Enum || (Visibility.Enum = {}));\n        })(Visibility = JobPostEntity.Visibility || (JobPostEntity.Visibility = {}));\n        var JobType;\n        (function(JobType) {\n            var Enum;\n            (function(Enum) {\n                Enum[\"CONTINUOUS\"] = \"CONTINUOUS\";\n                Enum[\"TASK\"] = \"TASK\";\n            })(Enum = JobType.Enum || (JobType.Enum = {}));\n        })(JobType = JobPostEntity.JobType || (JobPostEntity.JobType = {}));\n    })(JobPostEntity = Api.JobPostEntity || (Api.JobPostEntity = {}));\n    /**\n     * @export\n     * @namespace JobPostWithAppliedDto\n     */ var JobPostWithAppliedDto;\n    (function(JobPostWithAppliedDto) {\n        var JobType;\n        (function(JobType) {\n            var Enum;\n            (function(Enum) {\n                Enum[\"CONTINUOUS\"] = \"CONTINUOUS\";\n                Enum[\"TASK\"] = \"TASK\";\n            })(Enum = JobType.Enum || (JobType.Enum = {}));\n        })(JobType = JobPostWithAppliedDto.JobType || (JobPostWithAppliedDto.JobType = {}));\n    })(JobPostWithAppliedDto = Api.JobPostWithAppliedDto || (Api.JobPostWithAppliedDto = {}));\n    /**\n     * @export\n     * @namespace LectureEntity\n     */ var LectureEntity;\n    (function(LectureEntity) {\n        var Visibility;\n        (function(Visibility) {\n            var Enum;\n            (function(Enum) {\n                Enum[\"DRAFT\"] = \"DRAFT\";\n                Enum[\"PUBLISHED\"] = \"PUBLISHED\";\n                Enum[\"FUTURE\"] = \"FUTURE\";\n                Enum[\"PENDING\"] = \"PENDING\";\n                Enum[\"PRIVATE\"] = \"PRIVATE\";\n                Enum[\"TRASH\"] = \"TRASH\";\n            })(Enum = Visibility.Enum || (Visibility.Enum = {}));\n        })(Visibility = LectureEntity.Visibility || (LectureEntity.Visibility = {}));\n        var Renderer;\n        (function(Renderer) {\n            var Enum;\n            (function(Enum) {\n                Enum[\"Markdown\"] = \"markdown\";\n                Enum[\"Youtube\"] = \"youtube\";\n                Enum[\"Lexical\"] = \"lexical\";\n                Enum[\"Reveal\"] = \"reveal\";\n                Enum[\"Html\"] = \"html\";\n                Enum[\"Pdf\"] = \"pdf\";\n                Enum[\"Image\"] = \"image\";\n                Enum[\"Video\"] = \"video\";\n                Enum[\"Audio\"] = \"audio\";\n                Enum[\"Code\"] = \"code\";\n                Enum[\"Link\"] = \"link\";\n            })(Enum = Renderer.Enum || (Renderer.Enum = {}));\n        })(Renderer = LectureEntity.Renderer || (LectureEntity.Renderer = {}));\n    })(LectureEntity = Api.LectureEntity || (Api.LectureEntity = {}));\n    /**\n     * @export\n     * @namespace ProjectEntity\n     */ var ProjectEntity;\n    (function(ProjectEntity) {\n        var Visibility;\n        (function(Visibility) {\n            var Enum;\n            (function(Enum) {\n                Enum[\"DRAFT\"] = \"DRAFT\";\n                Enum[\"PUBLISHED\"] = \"PUBLISHED\";\n                Enum[\"FUTURE\"] = \"FUTURE\";\n                Enum[\"PENDING\"] = \"PENDING\";\n                Enum[\"PRIVATE\"] = \"PRIVATE\";\n                Enum[\"TRASH\"] = \"TRASH\";\n            })(Enum = Visibility.Enum || (Visibility.Enum = {}));\n        })(Visibility = ProjectEntity.Visibility || (ProjectEntity.Visibility = {}));\n    })(ProjectEntity = Api.ProjectEntity || (Api.ProjectEntity = {}));\n    /**\n     * @export\n     * @namespace ProjectTestFeedbackQuestion\n     */ var ProjectTestFeedbackQuestion;\n    (function(ProjectTestFeedbackQuestion) {\n        var Type;\n        (function(Type) {\n            var Enum;\n            (function(Enum) {\n                Enum[\"SHORTANSWER\"] = \"SHORT_ANSWER\";\n                Enum[\"PARAGRAPH\"] = \"PARAGRAPH\";\n                Enum[\"CHECKBOX\"] = \"CHECKBOX\";\n                Enum[\"DROPDOWN\"] = \"DROPDOWN\";\n                Enum[\"LINEARSCALE\"] = \"LINEAR_SCALE\";\n            })(Enum = Type.Enum || (Type.Enum = {}));\n        })(Type = ProjectTestFeedbackQuestion.Type || (ProjectTestFeedbackQuestion.Type = {}));\n    })(ProjectTestFeedbackQuestion = Api.ProjectTestFeedbackQuestion || (Api.ProjectTestFeedbackQuestion = {}));\n    /**\n     * @export\n     * @namespace ProjectTestFeedbackQuestionCheckbox\n     */ var ProjectTestFeedbackQuestionCheckbox;\n    (function(ProjectTestFeedbackQuestionCheckbox) {\n        var Type;\n        (function(Type) {\n            var Enum;\n            (function(Enum) {\n                Enum[\"SHORTANSWER\"] = \"SHORT_ANSWER\";\n                Enum[\"PARAGRAPH\"] = \"PARAGRAPH\";\n                Enum[\"CHECKBOX\"] = \"CHECKBOX\";\n                Enum[\"DROPDOWN\"] = \"DROPDOWN\";\n                Enum[\"LINEARSCALE\"] = \"LINEAR_SCALE\";\n            })(Enum = Type.Enum || (Type.Enum = {}));\n        })(Type = ProjectTestFeedbackQuestionCheckbox.Type || (ProjectTestFeedbackQuestionCheckbox.Type = {}));\n    })(ProjectTestFeedbackQuestionCheckbox = Api.ProjectTestFeedbackQuestionCheckbox || (Api.ProjectTestFeedbackQuestionCheckbox = {}));\n    /**\n     * @export\n     * @namespace ProjectTestFeedbackQuestionDropdown\n     */ var ProjectTestFeedbackQuestionDropdown;\n    (function(ProjectTestFeedbackQuestionDropdown) {\n        var Type;\n        (function(Type) {\n            var Enum;\n            (function(Enum) {\n                Enum[\"SHORTANSWER\"] = \"SHORT_ANSWER\";\n                Enum[\"PARAGRAPH\"] = \"PARAGRAPH\";\n                Enum[\"CHECKBOX\"] = \"CHECKBOX\";\n                Enum[\"DROPDOWN\"] = \"DROPDOWN\";\n                Enum[\"LINEARSCALE\"] = \"LINEAR_SCALE\";\n            })(Enum = Type.Enum || (Type.Enum = {}));\n        })(Type = ProjectTestFeedbackQuestionDropdown.Type || (ProjectTestFeedbackQuestionDropdown.Type = {}));\n    })(ProjectTestFeedbackQuestionDropdown = Api.ProjectTestFeedbackQuestionDropdown || (Api.ProjectTestFeedbackQuestionDropdown = {}));\n    /**\n     * @export\n     * @namespace ProjectTestFeedbackQuestionLinearScale\n     */ var ProjectTestFeedbackQuestionLinearScale;\n    (function(ProjectTestFeedbackQuestionLinearScale) {\n        var Type;\n        (function(Type) {\n            var Enum;\n            (function(Enum) {\n                Enum[\"SHORTANSWER\"] = \"SHORT_ANSWER\";\n                Enum[\"PARAGRAPH\"] = \"PARAGRAPH\";\n                Enum[\"CHECKBOX\"] = \"CHECKBOX\";\n                Enum[\"DROPDOWN\"] = \"DROPDOWN\";\n                Enum[\"LINEARSCALE\"] = \"LINEAR_SCALE\";\n            })(Enum = Type.Enum || (Type.Enum = {}));\n        })(Type = ProjectTestFeedbackQuestionLinearScale.Type || (ProjectTestFeedbackQuestionLinearScale.Type = {}));\n    })(ProjectTestFeedbackQuestionLinearScale = Api.ProjectTestFeedbackQuestionLinearScale || (Api.ProjectTestFeedbackQuestionLinearScale = {}));\n    /**\n     * @export\n     * @namespace ProjectTestFeedbackQuestionParagraph\n     */ var ProjectTestFeedbackQuestionParagraph;\n    (function(ProjectTestFeedbackQuestionParagraph) {\n        var Type;\n        (function(Type) {\n            var Enum;\n            (function(Enum) {\n                Enum[\"SHORTANSWER\"] = \"SHORT_ANSWER\";\n                Enum[\"PARAGRAPH\"] = \"PARAGRAPH\";\n                Enum[\"CHECKBOX\"] = \"CHECKBOX\";\n                Enum[\"DROPDOWN\"] = \"DROPDOWN\";\n                Enum[\"LINEARSCALE\"] = \"LINEAR_SCALE\";\n            })(Enum = Type.Enum || (Type.Enum = {}));\n        })(Type = ProjectTestFeedbackQuestionParagraph.Type || (ProjectTestFeedbackQuestionParagraph.Type = {}));\n    })(ProjectTestFeedbackQuestionParagraph = Api.ProjectTestFeedbackQuestionParagraph || (Api.ProjectTestFeedbackQuestionParagraph = {}));\n    /**\n     * @export\n     * @namespace ProjectTestFeedbackQuestionShortAnswer\n     */ var ProjectTestFeedbackQuestionShortAnswer;\n    (function(ProjectTestFeedbackQuestionShortAnswer) {\n        var Type;\n        (function(Type) {\n            var Enum;\n            (function(Enum) {\n                Enum[\"SHORTANSWER\"] = \"SHORT_ANSWER\";\n                Enum[\"PARAGRAPH\"] = \"PARAGRAPH\";\n                Enum[\"CHECKBOX\"] = \"CHECKBOX\";\n                Enum[\"DROPDOWN\"] = \"DROPDOWN\";\n                Enum[\"LINEARSCALE\"] = \"LINEAR_SCALE\";\n            })(Enum = Type.Enum || (Type.Enum = {}));\n        })(Type = ProjectTestFeedbackQuestionShortAnswer.Type || (ProjectTestFeedbackQuestionShortAnswer.Type = {}));\n    })(ProjectTestFeedbackQuestionShortAnswer = Api.ProjectTestFeedbackQuestionShortAnswer || (Api.ProjectTestFeedbackQuestionShortAnswer = {}));\n    /**\n     * @export\n     * @namespace QuizEntity\n     */ var QuizEntity;\n    (function(QuizEntity) {\n        var Visibility;\n        (function(Visibility) {\n            var Enum;\n            (function(Enum) {\n                Enum[\"DRAFT\"] = \"DRAFT\";\n                Enum[\"PUBLISHED\"] = \"PUBLISHED\";\n                Enum[\"FUTURE\"] = \"FUTURE\";\n                Enum[\"PENDING\"] = \"PENDING\";\n                Enum[\"PRIVATE\"] = \"PRIVATE\";\n                Enum[\"TRASH\"] = \"TRASH\";\n            })(Enum = Visibility.Enum || (Visibility.Enum = {}));\n        })(Visibility = QuizEntity.Visibility || (QuizEntity.Visibility = {}));\n    })(QuizEntity = Api.QuizEntity || (Api.QuizEntity = {}));\n    /**\n     * @export\n     * @namespace TicketEntity\n     */ var TicketEntity;\n    (function(TicketEntity) {\n        var Status;\n        (function(Status) {\n            var Enum;\n            (function(Enum) {\n                Enum[\"OPEN\"] = \"OPEN\";\n                Enum[\"INPROGRESS\"] = \"IN_PROGRESS\";\n                Enum[\"RESOLVED\"] = \"RESOLVED\";\n                Enum[\"CLOSED\"] = \"CLOSED\";\n            })(Enum = Status.Enum || (Status.Enum = {}));\n        })(Status = TicketEntity.Status || (TicketEntity.Status = {}));\n        var Priority;\n        (function(Priority) {\n            var Enum;\n            (function(Enum) {\n                Enum[\"LOW\"] = \"LOW\";\n                Enum[\"MEDIUM\"] = \"MEDIUM\";\n                Enum[\"HIGH\"] = \"HIGH\";\n                Enum[\"CRITICAL\"] = \"CRITICAL\";\n            })(Enum = Priority.Enum || (Priority.Enum = {}));\n        })(Priority = TicketEntity.Priority || (TicketEntity.Priority = {}));\n    })(TicketEntity = Api.TicketEntity || (Api.TicketEntity = {}));\n})(Api || (exports.Api = Api = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../packages/apiclient/dist/models.js\n");

/***/ }),

/***/ "(rsc)/../../packages/apiclient/dist/runtime.js":
/*!************************************************!*\
  !*** ../../packages/apiclient/dist/runtime.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/* eslint-disable */ // tslint:disable\n/**\n * gameguild.gg\n *\n *\n * OpenAPI spec version: 1.0.0\n * Contact:\n *\n * NOTE: This class is auto generated by OpenAPI Generator+.\n * https://github.com/karlvr/openapi-generator-plus\n * Do not edit the class manually.\n */ var __extends = (void 0) && (void 0).__extends || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = exports.BASE_PATH = exports.defaultFetch = void 0;\nexports.defaultFetch = fetch;\nexports.BASE_PATH = \"http://localhost:8080\".replace(/\\/+$/, \"\");\n/**\n *\n * @export\n */ exports.COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\t\",\n    pipes: \"|\"\n};\n/**\n *\n * @export\n * @class BaseAPI\n */ var BaseAPI = /** @class */ function() {\n    function BaseAPI(configuration, basePath, fetch1) {\n        if (basePath === void 0) {\n            basePath = exports.BASE_PATH;\n        }\n        if (fetch1 === void 0) {\n            fetch1 = exports.defaultFetch;\n        }\n        this.basePath = basePath;\n        this.fetch = fetch1;\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n    return BaseAPI;\n}();\nexports.BaseAPI = BaseAPI;\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */ var RequiredError = /** @class */ function(_super) {\n    __extends(RequiredError, _super);\n    function RequiredError(field, msg) {\n        var _this = _super.call(this, msg) || this;\n        _this.field = field;\n        Object.setPrototypeOf(_this, RequiredError.prototype);\n        _this.name = \"RequiredError\";\n        return _this;\n    }\n    return RequiredError;\n}(Error);\nexports.RequiredError = RequiredError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvYXBpY2xpZW50L2Rpc3QvcnVudGltZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLGtCQUFrQixHQUNsQixpQkFBaUI7QUFDakI7Ozs7Ozs7Ozs7Q0FVQyxHQUNELElBQUlBLFlBQVksQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxTQUFTLElBQUs7SUFDeEMsSUFBSUMsZ0JBQWdCLFNBQVVDLENBQUMsRUFBRUMsQ0FBQztRQUM5QkYsZ0JBQWdCRyxPQUFPQyxjQUFjLElBQ2hDO1lBQUVDLFdBQVcsRUFBRTtRQUFDLGNBQWFDLFNBQVMsU0FBVUwsQ0FBQyxFQUFFQyxDQUFDO1lBQUlELEVBQUVJLFNBQVMsR0FBR0g7UUFBRyxLQUMxRSxTQUFVRCxDQUFDLEVBQUVDLENBQUM7WUFBSSxJQUFLLElBQUlLLEtBQUtMLEVBQUcsSUFBSUMsT0FBT0ssU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ1IsR0FBR0ssSUFBSU4sQ0FBQyxDQUFDTSxFQUFFLEdBQUdMLENBQUMsQ0FBQ0ssRUFBRTtRQUFFO1FBQ3BHLE9BQU9QLGNBQWNDLEdBQUdDO0lBQzVCO0lBQ0EsT0FBTyxTQUFVRCxDQUFDLEVBQUVDLENBQUM7UUFDakIsSUFBSSxPQUFPQSxNQUFNLGNBQWNBLE1BQU0sTUFDakMsTUFBTSxJQUFJUyxVQUFVLHlCQUF5QkMsT0FBT1YsS0FBSztRQUM3REYsY0FBY0MsR0FBR0M7UUFDakIsU0FBU1c7WUFBTyxJQUFJLENBQUNDLFdBQVcsR0FBR2I7UUFBRztRQUN0Q0EsRUFBRU8sU0FBUyxHQUFHTixNQUFNLE9BQU9DLE9BQU9ZLE1BQU0sQ0FBQ2IsS0FBTVcsQ0FBQUEsR0FBR0wsU0FBUyxHQUFHTixFQUFFTSxTQUFTLEVBQUUsSUFBSUssSUFBRztJQUN0RjtBQUNKO0FBQ0FWLDhDQUE2QztJQUFFZSxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxxQkFBcUIsR0FBR0EsZUFBZSxHQUFHQSwwQkFBMEIsR0FBR0EsaUJBQWlCLEdBQUdBLG9CQUFvQixHQUFHLEtBQUs7QUFDdkhBLG9CQUFvQixHQUFHTztBQUN2QlAsaUJBQWlCLEdBQUcsd0JBQXdCUSxPQUFPLENBQUMsUUFBUTtBQUM1RDs7O0NBR0MsR0FDRFIsMEJBQTBCLEdBQUc7SUFDekJTLEtBQUs7SUFDTEMsS0FBSztJQUNMQyxLQUFLO0lBQ0xDLE9BQU87QUFDWDtBQUNBOzs7O0NBSUMsR0FDRCxJQUFJVCxVQUFVLFdBQVcsR0FBSTtJQUN6QixTQUFTQSxRQUFRVSxhQUFhLEVBQUVDLFFBQVEsRUFBRVAsTUFBSztRQUMzQyxJQUFJTyxhQUFhLEtBQUssR0FBRztZQUFFQSxXQUFXZCxRQUFRSyxTQUFTO1FBQUU7UUFDekQsSUFBSUUsV0FBVSxLQUFLLEdBQUc7WUFBRUEsU0FBUVAsUUFBUU0sWUFBWTtRQUFFO1FBQ3RELElBQUksQ0FBQ1EsUUFBUSxHQUFHQTtRQUNoQixJQUFJLENBQUNQLEtBQUssR0FBR0E7UUFDYixJQUFJTSxlQUFlO1lBQ2YsSUFBSSxDQUFDQSxhQUFhLEdBQUdBO1lBQ3JCLElBQUksQ0FBQ0MsUUFBUSxHQUFHRCxjQUFjQyxRQUFRLElBQUksSUFBSSxDQUFDQSxRQUFRO1FBQzNEO0lBQ0o7SUFDQSxPQUFPWDtBQUNYO0FBQ0FILGVBQWUsR0FBR0c7QUFFbEI7Ozs7O0NBS0MsR0FDRCxJQUFJRCxnQkFBZ0IsV0FBVyxHQUFJLFNBQVVhLE1BQU07SUFDL0NqQyxVQUFVb0IsZUFBZWE7SUFDekIsU0FBU2IsY0FBY2MsS0FBSyxFQUFFQyxHQUFHO1FBQzdCLElBQUlDLFFBQVFILE9BQU90QixJQUFJLENBQUMsSUFBSSxFQUFFd0IsUUFBUSxJQUFJO1FBQzFDQyxNQUFNRixLQUFLLEdBQUdBO1FBQ2Q5QixPQUFPQyxjQUFjLENBQUMrQixPQUFPaEIsY0FBY1gsU0FBUztRQUNwRDJCLE1BQU1DLElBQUksR0FBRztRQUNiLE9BQU9EO0lBQ1g7SUFDQSxPQUFPaEI7QUFDWCxFQUFFa0I7QUFDRnBCLHFCQUFxQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL0BnYW1lZGV2LWd1aWxkL3dlYi8uLi8uLi9wYWNrYWdlcy9hcGljbGllbnQvZGlzdC9ydW50aW1lLmpzPzAzNWUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gdHNsaW50OmRpc2FibGVcbi8qKlxuICogZ2FtZWd1aWxkLmdnXG4gKlxuICpcbiAqIE9wZW5BUEkgc3BlYyB2ZXJzaW9uOiAxLjAuMFxuICogQ29udGFjdDpcbiAqXG4gKiBOT1RFOiBUaGlzIGNsYXNzIGlzIGF1dG8gZ2VuZXJhdGVkIGJ5IE9wZW5BUEkgR2VuZXJhdG9yKy5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9rYXJsdnIvb3BlbmFwaS1nZW5lcmF0b3ItcGx1c1xuICogRG8gbm90IGVkaXQgdGhlIGNsYXNzIG1hbnVhbGx5LlxuICovXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SZXF1aXJlZEVycm9yID0gZXhwb3J0cy5CYXNlQVBJID0gZXhwb3J0cy5DT0xMRUNUSU9OX0ZPUk1BVFMgPSBleHBvcnRzLkJBU0VfUEFUSCA9IGV4cG9ydHMuZGVmYXVsdEZldGNoID0gdm9pZCAwO1xuZXhwb3J0cy5kZWZhdWx0RmV0Y2ggPSBmZXRjaDtcbmV4cG9ydHMuQkFTRV9QQVRIID0gXCJodHRwOi8vbG9jYWxob3N0OjgwODBcIi5yZXBsYWNlKC9cXC8rJC8sIFwiXCIpO1xuLyoqXG4gKlxuICogQGV4cG9ydFxuICovXG5leHBvcnRzLkNPTExFQ1RJT05fRk9STUFUUyA9IHtcbiAgICBjc3Y6IFwiLFwiLFxuICAgIHNzdjogXCIgXCIsXG4gICAgdHN2OiBcIlxcdFwiLFxuICAgIHBpcGVzOiBcInxcIixcbn07XG4vKipcbiAqXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgQmFzZUFQSVxuICovXG52YXIgQmFzZUFQSSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCYXNlQVBJKGNvbmZpZ3VyYXRpb24sIGJhc2VQYXRoLCBmZXRjaCkge1xuICAgICAgICBpZiAoYmFzZVBhdGggPT09IHZvaWQgMCkgeyBiYXNlUGF0aCA9IGV4cG9ydHMuQkFTRV9QQVRIOyB9XG4gICAgICAgIGlmIChmZXRjaCA9PT0gdm9pZCAwKSB7IGZldGNoID0gZXhwb3J0cy5kZWZhdWx0RmV0Y2g7IH1cbiAgICAgICAgdGhpcy5iYXNlUGF0aCA9IGJhc2VQYXRoO1xuICAgICAgICB0aGlzLmZldGNoID0gZmV0Y2g7XG4gICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZ3VyYXRpb24gPSBjb25maWd1cmF0aW9uO1xuICAgICAgICAgICAgdGhpcy5iYXNlUGF0aCA9IGNvbmZpZ3VyYXRpb24uYmFzZVBhdGggfHwgdGhpcy5iYXNlUGF0aDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gQmFzZUFQSTtcbn0oKSk7XG5leHBvcnRzLkJhc2VBUEkgPSBCYXNlQVBJO1xuO1xuLyoqXG4gKlxuICogQGV4cG9ydFxuICogQGNsYXNzIFJlcXVpcmVkRXJyb3JcbiAqIEBleHRlbmRzIHtFcnJvcn1cbiAqL1xudmFyIFJlcXVpcmVkRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFJlcXVpcmVkRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVxdWlyZWRFcnJvcihmaWVsZCwgbXNnKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1zZykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZmllbGQgPSBmaWVsZDtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKF90aGlzLCBSZXF1aXJlZEVycm9yLnByb3RvdHlwZSk7XG4gICAgICAgIF90aGlzLm5hbWUgPSBcIlJlcXVpcmVkRXJyb3JcIjtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gUmVxdWlyZWRFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydHMuUmVxdWlyZWRFcnJvciA9IFJlcXVpcmVkRXJyb3I7XG4iXSwibmFtZXMiOlsiX19leHRlbmRzIiwiZXh0ZW5kU3RhdGljcyIsImQiLCJiIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJfXyIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJSZXF1aXJlZEVycm9yIiwiQmFzZUFQSSIsIkNPTExFQ1RJT05fRk9STUFUUyIsIkJBU0VfUEFUSCIsImRlZmF1bHRGZXRjaCIsImZldGNoIiwicmVwbGFjZSIsImNzdiIsInNzdiIsInRzdiIsInBpcGVzIiwiY29uZmlndXJhdGlvbiIsImJhc2VQYXRoIiwiX3N1cGVyIiwiZmllbGQiLCJtc2ciLCJfdGhpcyIsIm5hbWUiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../packages/apiclient/dist/runtime.js\n");

/***/ }),

/***/ "(rsc)/./src/app/api/auth/[...nextauth]/route.ts":
/*!*************************************************!*\
  !*** ./src/app/api/auth/[...nextauth]/route.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/auth */ \"(rsc)/./src/auth.ts\");\n // Referring to the auth.ts we just created\nconst { GET, POST } = _auth__WEBPACK_IMPORTED_MODULE_0__.handlers;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9hdXRoL1suLi5uZXh0YXV0aF0vcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWtDLENBQUMsMkNBQTJDO0FBRXZFLE1BQU0sRUFBRUMsR0FBRyxFQUFFQyxJQUFJLEVBQUUsR0FBR0YsMkNBQVFBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZ2FtZWRldi1ndWlsZC93ZWIvLi9zcmMvYXBwL2FwaS9hdXRoL1suLi5uZXh0YXV0aF0vcm91dGUudHM/MDA5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoYW5kbGVycyB9IGZyb20gJ0AvYXV0aCc7IC8vIFJlZmVycmluZyB0byB0aGUgYXV0aC50cyB3ZSBqdXN0IGNyZWF0ZWRcblxuZXhwb3J0IGNvbnN0IHsgR0VULCBQT1NUIH0gPSBoYW5kbGVycztcbiJdLCJuYW1lcyI6WyJoYW5kbGVycyIsIkdFVCIsIlBPU1QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/auth/[...nextauth]/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/auth.ts":
/*!*********************!*\
  !*** ./src/auth.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   auth: () => (/* binding */ auth),\n/* harmony export */   handlers: () => (/* binding */ handlers),\n/* harmony export */   signIn: () => (/* binding */ signIn),\n/* harmony export */   signOut: () => (/* binding */ signOut)\n/* harmony export */ });\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth */ \"(rsc)/../../node_modules/next-auth/index.js\");\n/* harmony import */ var _config_auth_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/config/auth.config */ \"(rsc)/./src/config/auth.config.ts\");\n\n\nconst { handlers, signIn, signOut, auth } = (0,next_auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n    ..._config_auth_config__WEBPACK_IMPORTED_MODULE_1__.authConfig\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXV0aC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBaUM7QUFDaUI7QUFFM0MsTUFBTSxFQUFFRSxRQUFRLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxJQUFJLEVBQUUsR0FBR0wscURBQVFBLENBQUM7SUFBRSxHQUFHQywyREFBVTtBQUFDLEdBQUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZ2FtZWRldi1ndWlsZC93ZWIvLi9zcmMvYXV0aC50cz82MmQ5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBOZXh0QXV0aCBmcm9tICduZXh0LWF1dGgnO1xuaW1wb3J0IHsgYXV0aENvbmZpZyB9IGZyb20gJ0AvY29uZmlnL2F1dGguY29uZmlnJztcblxuZXhwb3J0IGNvbnN0IHsgaGFuZGxlcnMsIHNpZ25Jbiwgc2lnbk91dCwgYXV0aCB9ID0gTmV4dEF1dGgoeyAuLi5hdXRoQ29uZmlnIH0pO1xuIl0sIm5hbWVzIjpbIk5leHRBdXRoIiwiYXV0aENvbmZpZyIsImhhbmRsZXJzIiwic2lnbkluIiwic2lnbk91dCIsImF1dGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/auth.ts\n");

/***/ }),

/***/ "(rsc)/./src/config/auth.config.ts":
/*!***********************************!*\
  !*** ./src/config/auth.config.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authConfig: () => (/* binding */ authConfig)\n/* harmony export */ });\n/* harmony import */ var next_auth_providers_google__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth/providers/google */ \"(rsc)/../../node_modules/next-auth/providers/google.js\");\n/* harmony import */ var next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth/providers/credentials */ \"(rsc)/../../node_modules/next-auth/providers/credentials.js\");\n/* harmony import */ var _config_environment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/config/environment */ \"(rsc)/./src/config/environment.ts\");\n/* harmony import */ var _game_guild_apiclient__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @game-guild/apiclient */ \"(rsc)/../../packages/apiclient/dist/index.js\");\n/* harmony import */ var _game_guild_apiclient__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_game_guild_apiclient__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var jwt_decode__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! jwt-decode */ \"(rsc)/../../node_modules/jwt-decode/build/esm/index.js\");\n\n\n\n\n\n// todo: add logic to refresh token!!! refresh token should be done in the jwt or session callback\n// https://authjs.dev/guides/refresh-token-rotation\n// list of providers\nconst providers = [];\nif (!_config_environment__WEBPACK_IMPORTED_MODULE_2__.environment.GoogleClientId || !_config_environment__WEBPACK_IMPORTED_MODULE_2__.environment.GoogleClientSecret || !_config_environment__WEBPACK_IMPORTED_MODULE_2__.environment.SignInGoogleCallbackUrl) {\n    throw new Error(\"GoogleClientId, GoogleClientSecret, and SignInGoogleCallbackUrl must be set in the environment. Please check your .env file. Or talk with us to provide them to you.\");\n}\nproviders.push((0,next_auth_providers_google__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n    clientId: _config_environment__WEBPACK_IMPORTED_MODULE_2__.environment.GoogleClientId,\n    clientSecret: _config_environment__WEBPACK_IMPORTED_MODULE_2__.environment.GoogleClientSecret,\n    authorization: {\n        params: {\n            request_uri: _config_environment__WEBPACK_IMPORTED_MODULE_2__.environment.SignInGoogleCallbackUrl\n        }\n    }\n}));\nconst authConfig = {\n    trustHost: true,\n    debug: true,\n    callbacks: {\n        signIn: async ({ user, account, profile, email, credentials })=>{\n            if (account?.provider === \"google\") {\n                const api = new _game_guild_apiclient__WEBPACK_IMPORTED_MODULE_3__.AuthApi({\n                    basePath: \"http://localhost:8080\"\n                });\n                // TODO:\n                //  After signing in with Google, check if the user is in the database.\n                //  If the user is not in the database, reject the sign-in.\n                //  If the user is in the database, return true to allow user to sign in.\n                // TODO: Sample code below:\n                if (!account?.id_token) return false;\n                const response = await api.authControllerSignInWithGoogle(account?.id_token);\n                if (response.status >= 400) {\n                    console.error(response.body);\n                    return false;\n                }\n                const body = response.body;\n                user.id = body.user.id;\n                user.email = body.user.email;\n                user.accessToken = body.accessToken;\n                user.refreshToken = body.refreshToken;\n                return true;\n            } else if (account?.provider === \"web-3\") {\n                return Boolean(user.wallet && user.accessToken && user.refreshToken);\n            } else if (account?.provider === \"magic-link\") {\n                return Boolean(user.email && user.accessToken && user.refreshToken);\n            }\n            return false;\n        },\n        jwt: async ({ token, user, account, profile, trigger, session })=>{\n            if (account) {\n                // First-time login, save the `access_token`, its expiry and the `refresh_token`\n                return {\n                    ...token,\n                    // ...account,\n                    access_token: account.access_token,\n                    refresh_token: account.refresh_token,\n                    user: user,\n                    profile: profile\n                };\n            }\n            if (user || token.user) {\n                // combine user and token.user to include the user object\n                // avoid TS2698: Spread types may only be created from object types.\n                const u = {\n                    ...user && typeof user === \"object\" ? user : {},\n                    ...token?.user && typeof token.user === \"object\" ? token.user : {}\n                };\n                const decoded = (0,jwt_decode__WEBPACK_IMPORTED_MODULE_4__.jwtDecode)(u.accessToken);\n                const exp = decoded.exp;\n                // 1 minute before the token expires, refresh the token\n                if (exp && Date.now() > exp * 1000 - 60 * 1000) {\n                    // refresh the token\n                    const api = new _game_guild_apiclient__WEBPACK_IMPORTED_MODULE_3__.AuthApi({\n                        basePath: \"http://localhost:8080\"\n                    });\n                    let r;\n                    try {\n                        const response = await api.authControllerRefreshToken({\n                            headers: {\n                                Authorization: `Bearer ${u.refreshToken}`\n                            }\n                        });\n                        if (response.status >= 400) {\n                            console.error(\"error refreshing token\", response.body);\n                            return null;\n                        }\n                        r = response.body;\n                    } catch (e) {\n                        console.error(e);\n                        token.error = e;\n                        return null;\n                    }\n                    u.accessToken = r.accessToken;\n                    u.refreshToken = r.refreshToken;\n                    token.user = u;\n                }\n            }\n            return {\n                ...token,\n                ...user\n            };\n        },\n        session: async ({ session, token, user })=>{\n            session = {\n                ...session,\n                user: {\n                    ...session?.user,\n                    ...user\n                },\n                ...token\n            };\n            return session;\n        }\n    },\n    pages: {\n        signIn: \"/connect\",\n        error: \"/connect\"\n    },\n    providers: [\n        ...providers,\n        (0,next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n            type: \"credentials\",\n            id: \"magic-link\",\n            name: \"magic-link\",\n            credentials: {\n                token: {\n                    label: \"Token\",\n                    type: \"text\",\n                    placeholder: \"0x0\"\n                }\n            },\n            async authorize (credentials) {\n                const token = credentials?.token;\n                const api = new _game_guild_apiclient__WEBPACK_IMPORTED_MODULE_3__.AuthApi({\n                    basePath: \"http://localhost:8080\"\n                });\n                const response = await api.authControllerRefreshToken({\n                    headers: {\n                        Authorization: `Bearer ${token}`\n                    }\n                });\n                if (response.status >= 400) {\n                    console.error(JSON.stringify(response.body));\n                    return null;\n                }\n                const body = response.body;\n                const accessToken = body.accessToken;\n                const refreshToken = body.refreshToken;\n                const userResponse = await api.authControllerGetCurrentUser({\n                    headers: {\n                        Authorization: `Bearer ${body.accessToken}`\n                    }\n                });\n                if (userResponse.status >= 400) {\n                    console.error(JSON.stringify(userResponse.body));\n                    return null;\n                }\n                const user = userResponse.body;\n                return {\n                    id: user.id,\n                    email: user.email,\n                    name: user.username,\n                    // image: user.profile?.picture,\n                    wallet: user.walletAddress,\n                    accessToken,\n                    refreshToken\n                };\n            }\n        }),\n        (0,next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n            type: \"credentials\",\n            id: \"web-3\",\n            name: \"web-3\",\n            credentials: {\n                signature: {\n                    label: \"Signature\",\n                    type: \"text\",\n                    placeholder: \"0x0\"\n                },\n                address: {\n                    label: \"address\",\n                    type: \"text\",\n                    placeholder: \"0x0\"\n                }\n            },\n            async authorize (credentials) {\n                const signature = credentials?.signature;\n                const address = credentials?.address;\n                const api = new _game_guild_apiclient__WEBPACK_IMPORTED_MODULE_3__.AuthApi({\n                    basePath: \"http://localhost:8080\"\n                });\n                const response = await api.authControllerValidateWeb3SignInChallenge({\n                    signature,\n                    address\n                });\n                if (response.status >= 400) {\n                    console.error(JSON.stringify(response.body));\n                    return null;\n                }\n                const body = response.body;\n                const accessToken = body.accessToken;\n                const refreshToken = body.refreshToken;\n                const user = body.user;\n                return {\n                    id: user.id,\n                    email: user.email,\n                    name: user.username,\n                    // image: user.profile?.picture,\n                    wallet: user.walletAddress,\n                    accessToken,\n                    refreshToken\n                };\n            }\n        }),\n        ...providers\n    ],\n    session: {\n        strategy: \"jwt\"\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/config/auth.config.ts\n");

/***/ }),

/***/ "(rsc)/./src/config/environment.ts":
/*!***********************************!*\
  !*** ./src/config/environment.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   environment: () => (/* binding */ environment)\n/* harmony export */ });\nconst environment = {\n    API_URL: `${\"http://localhost:8080\"}`,\n    GoogleAnalyticsMeasurementId: `${process.env.GOOGLE_ANALYTICS_MEASUREMENT_ID}`,\n    GoogleClientId: `${process.env.GOOGLE_CLIENT_ID}`,\n    GoogleClientSecret: `${process.env.GOOGLE_CLIENT_SECRET}`,\n    GoogleProjectId: `${process.env.GOOGLE_PROJECT_ID}`,\n    GoogleTagManagerId: `${process.env.GOOGLE_TAG_MANAGER_ID}`,\n    SignInGoogleCallbackUrl: `${\"https://localhost:3000\"}/api/auth/callback/google`\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvY29uZmlnL2Vudmlyb25tZW50LnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxjQUFjO0lBQ3pCQyxTQUFTLENBQUMsRUFBRUMsdUJBQStCLENBQUUsQ0FBQztJQUM5Q0csOEJBQThCLENBQUMsRUFBRUgsUUFBUUMsR0FBRyxDQUFDRywrQkFBK0IsQ0FBRSxDQUFDO0lBQy9FQyxnQkFBZ0IsQ0FBQyxFQUFFTCxRQUFRQyxHQUFHLENBQUNLLGdCQUFnQixDQUFFLENBQUM7SUFDbERDLG9CQUFvQixDQUFDLEVBQUVQLFFBQVFDLEdBQUcsQ0FBQ08sb0JBQW9CLENBQUUsQ0FBQztJQUMxREMsaUJBQWlCLENBQUMsRUFBRVQsUUFBUUMsR0FBRyxDQUFDUyxpQkFBaUIsQ0FBRSxDQUFDO0lBQ3BEQyxvQkFBb0IsQ0FBQyxFQUFFWCxRQUFRQyxHQUFHLENBQUNXLHFCQUFxQixDQUFFLENBQUM7SUFDM0RDLHlCQUF5QixDQUFDLEVBQUViLHdCQUErQixDQUFFLHlCQUF5QixDQUFDO0FBQ3pGLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZ2FtZWRldi1ndWlsZC93ZWIvLi9zcmMvY29uZmlnL2Vudmlyb25tZW50LnRzP2FmNzMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGVudmlyb25tZW50ID0ge1xuICBBUElfVVJMOiBgJHtwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19BUElfVVJMIX1gLFxuICBHb29nbGVBbmFseXRpY3NNZWFzdXJlbWVudElkOiBgJHtwcm9jZXNzLmVudi5HT09HTEVfQU5BTFlUSUNTX01FQVNVUkVNRU5UX0lEIX1gLFxuICBHb29nbGVDbGllbnRJZDogYCR7cHJvY2Vzcy5lbnYuR09PR0xFX0NMSUVOVF9JRCF9YCxcbiAgR29vZ2xlQ2xpZW50U2VjcmV0OiBgJHtwcm9jZXNzLmVudi5HT09HTEVfQ0xJRU5UX1NFQ1JFVCF9YCxcbiAgR29vZ2xlUHJvamVjdElkOiBgJHtwcm9jZXNzLmVudi5HT09HTEVfUFJPSkVDVF9JRCF9YCxcbiAgR29vZ2xlVGFnTWFuYWdlcklkOiBgJHtwcm9jZXNzLmVudi5HT09HTEVfVEFHX01BTkFHRVJfSUQhfWAsXG4gIFNpZ25Jbkdvb2dsZUNhbGxiYWNrVXJsOiBgJHtwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19XRUJfVVJMIX0vYXBpL2F1dGgvY2FsbGJhY2svZ29vZ2xlYCxcbn07XG4iXSwibmFtZXMiOlsiZW52aXJvbm1lbnQiLCJBUElfVVJMIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0FQSV9VUkwiLCJHb29nbGVBbmFseXRpY3NNZWFzdXJlbWVudElkIiwiR09PR0xFX0FOQUxZVElDU19NRUFTVVJFTUVOVF9JRCIsIkdvb2dsZUNsaWVudElkIiwiR09PR0xFX0NMSUVOVF9JRCIsIkdvb2dsZUNsaWVudFNlY3JldCIsIkdPT0dMRV9DTElFTlRfU0VDUkVUIiwiR29vZ2xlUHJvamVjdElkIiwiR09PR0xFX1BST0pFQ1RfSUQiLCJHb29nbGVUYWdNYW5hZ2VySWQiLCJHT09HTEVfVEFHX01BTkFHRVJfSUQiLCJTaWduSW5Hb29nbGVDYWxsYmFja1VybCIsIk5FWFRfUFVCTElDX1dFQl9VUkwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/config/environment.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@auth","vendor-chunks/next-auth","vendor-chunks/jose","vendor-chunks/@panva","vendor-chunks/preact","vendor-chunks/preact-render-to-string","vendor-chunks/oauth4webapi","vendor-chunks/jwt-decode"], () => (__webpack_exec__("(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute&page=%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute.ts&appDir=%2Fhome%2Fmiguel%2FProjects%2FExternos%2Fwebsite%2Fservices%2Fweb%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fmiguel%2FProjects%2FExternos%2Fwebsite%2Fservices%2Fweb&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();